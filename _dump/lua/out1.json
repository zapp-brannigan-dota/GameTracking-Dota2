{
    "CDOTABaseAbility_BotScript": {
        "description": "",
        "functions": {
            "CanAbilityBeUpgraded": {
                "args": [],
                "description": "Can this Ability be upgraded?",
                "return": "bool"
            },
            "CanBeDisassembled": {
                "args": [],
                "description": "Can this item be disassembled?",
                "return": "bool"
            },
            "GetAOERadius": {
                "args": [],
                "description": "Gets the AoE radius of this Ability.",
                "return": "int"
            },
            "GetAbilityDamage": {
                "args": [],
                "description": "Get the basic damage value of this Ability.",
                "return": "int"
            },
            "GetAutoCastState": {
                "args": [],
                "description": "Get the autocast state of this Ability.",
                "return": "bool"
            },
            "GetBehavior": {
                "args": [],
                "description": "Get the behavior type of this Ability.",
                "return": "int"
            },
            "GetCastPoint": {
                "args": [],
                "description": "Gets the cast point of this Ability.",
                "return": "float"
            },
            "GetCastRange": {
                "args": [],
                "description": "Gets the cast range of this Ability.",
                "return": "int"
            },
            "GetCaster": {
                "args": [],
                "description": "Get the unit who owns this Ability.",
                "return": "handle"
            },
            "GetChannelTime": {
                "args": [],
                "description": "How long does this Ability channel?",
                "return": "float"
            },
            "GetChannelledManaCostPerSecond": {
                "args": [],
                "description": "Get the mana cost per second of this Ability while channeling it.",
                "return": "int"
            },
            "GetCooldown": {
                "args": [],
                "description": "Get the cooldown of this Abilty.",
                "return": "float"
            },
            "GetCooldownTimeRemaining": {
                "args": [],
                "description": "Get the cooldown time remaning for this Ability.",
                "return": "float"
            },
            "GetCurrentCharges": {
                "args": [],
                "description": "Get the current charges of this item.",
                "return": "int"
            },
            "GetDamageType": {
                "args": [],
                "description": "Get the damage type of this Ability.",
                "return": "int"
            },
            "GetDuration": {
                "args": [],
                "description": "How long does this Ability persist once cast?",
                "return": "float"
            },
            "GetEstimatedDamageToTarget": {
                "arg_names": [
                    "hTarget",
                    "fDuration",
                    "nDamageTypes"
                ],
                "args": [
                    "handle",
                    "float",
                    "int"
                ],
                "description": "How much damage would this ability do to the specified target over the specified duration?",
                "return": "int"
            },
            "GetHeroLevelRequiredToUpgrade": {
                "args": [],
                "description": "Get the Hero level required to upgrade this Ability.",
                "return": "int"
            },
            "GetInitialCharges": {
                "args": [],
                "description": "Get the initial charges of this item.",
                "return": "int"
            },
            "GetLevel": {
                "args": [],
                "description": "Get the current level of the Ability.",
                "return": "int"
            },
            "GetManaCost": {
                "args": [],
                "description": "Get the mana cost of this Ability.",
                "return": "int"
            },
            "GetMaxLevel": {
                "args": [],
                "description": "Get the max level of this Ability.",
                "return": "int"
            },
            "GetName": {
                "args": [],
                "description": "Get the name of this Ability.",
                "return": "cstring"
            },
            "GetPowerTreadsStat": {
                "args": [],
                "description": "Get the stat these power treads are set to.",
                "return": "int"
            },
            "GetSecondaryCharges": {
                "args": [],
                "description": "Get the secondary charges of this item.",
                "return": "int"
            },
            "GetSpecialValueFloat": {
                "arg_names": [
                    "pszKey"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Get an int internal data parameter of this Abilty.",
                "return": "float"
            },
            "GetSpecialValueInt": {
                "arg_names": [
                    "pszKey"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Get an int internal data parameter of this Abilty.",
                "return": "int"
            },
            "GetTargetFlags": {
                "args": [],
                "description": "Get the flags for this Ability.",
                "return": "int"
            },
            "GetTargetTeam": {
                "args": [],
                "description": "Get the target team of this Ability.",
                "return": "int"
            },
            "GetTargetType": {
                "args": [],
                "description": "Get the target type of this Ability.",
                "return": "int"
            },
            "GetToggleState": {
                "args": [],
                "description": "Get the toggle state of this Ability.",
                "return": "bool"
            },
            "IsActivated": {
                "args": [],
                "description": "Is this Ability currently activated?",
                "return": "bool"
            },
            "IsChanneling": {
                "args": [],
                "description": "Is this Ability being channelled?",
                "return": "bool"
            },
            "IsCombineLocked": {
                "args": [],
                "description": "Is this item combine locked?",
                "return": "bool"
            },
            "IsCooldownReady": {
                "args": [],
                "description": "Is this Ability off cooldown?",
                "return": "bool"
            },
            "IsFullyCastable": {
                "args": [],
                "description": "Does the caster have the mana to use this Ability, and is it off cooldown?",
                "return": "bool"
            },
            "IsHidden": {
                "args": [],
                "description": "Is this Ability currently hidden?",
                "return": "bool"
            },
            "IsInAbilityPhase": {
                "args": [],
                "description": "Is this Ability being cast?",
                "return": "bool"
            },
            "IsItem": {
                "args": [],
                "description": "Is this an Item?",
                "return": "bool"
            },
            "IsOwnersManaEnough": {
                "args": [],
                "description": "Does the caster have the mana to use this Ability?",
                "return": "bool"
            },
            "IsPassive": {
                "args": [],
                "description": "Is this a passive Ability?",
                "return": "bool"
            },
            "IsStealable": {
                "args": [],
                "description": "Can this Ability be stolen?",
                "return": "bool"
            },
            "IsStolen": {
                "args": [],
                "description": "Is this the stolen version of an Ability?",
                "return": "bool"
            },
            "IsTalent": {
                "args": [],
                "description": "Is this a talent ability?",
                "return": "bool"
            },
            "IsToggle": {
                "args": [],
                "description": "Is this a toggled Ability?",
                "return": "bool"
            },
            "IsTrained": {
                "args": [],
                "description": "Is this Ability Trained at all?",
                "return": "bool"
            },
            "IsUltimate": {
                "args": [],
                "description": "Is this an ultimate ability?",
                "return": "bool"
            },
            "ProcsMagicStick": {
                "args": [],
                "description": "Does this Ability proc Magic Stick?",
                "return": "bool"
            },
            "ToggleAutoCast": {
                "args": [],
                "description": "Toggle the autocast state of this Ability.",
                "return": "void"
            }
        }
    },
    "CDOTA_Bot_Script": {
        "description": "A unit referenced from Dota bot script",
        "functions": {
            "ActionImmediate_Buyback": {
                "args": [],
                "description": "Tell a bot to buy back into the game.",
                "return": "void"
            },
            "ActionImmediate_Chat": {
                "arg_names": [
                    "pszMessage",
                    "bAllChat"
                ],
                "args": [
                    "cstring",
                    "bool"
                ],
                "description": "Tell a bot to say something.",
                "return": "void"
            },
            "ActionImmediate_Courier": {
                "arg_names": [
                    "hCourier",
                    "eAction"
                ],
                "args": [
                    "handle",
                    "int"
                ],
                "description": "Tell a bot to use the courier.",
                "return": "bool"
            },
            "ActionImmediate_DisassembleItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to disassemble an item.",
                "return": "void"
            },
            "ActionImmediate_Glyph": {
                "args": [],
                "description": "Tell a bot to use glyph.",
                "return": "void"
            },
            "ActionImmediate_LevelAbility": {
                "arg_names": [
                    "pszAbilityName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Tell a bot to level up a specific ability.",
                "return": "void"
            },
            "ActionImmediate_Ping": {
                "arg_names": [
                    "x",
                    "y",
                    "bNormalPing"
                ],
                "args": [
                    "float",
                    "float",
                    "bool"
                ],
                "description": "Tell a bot to ping a location.",
                "return": "void"
            },
            "ActionImmediate_PurchaseItem": {
                "arg_names": [
                    "pszItemName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Tell a bot to purchase an item by name.",
                "return": "<unknown>"
            },
            "ActionImmediate_SellItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to sell an item.",
                "return": "void"
            },
            "ActionImmediate_SetItemCombineLock": {
                "arg_names": [
                    "hItem",
                    "bLocked"
                ],
                "args": [
                    "handle",
                    "bool"
                ],
                "description": "Set the combine state on an item.",
                "return": "void"
            },
            "ActionImmediate_SwapItems": {
                "arg_names": [
                    "nSlot1",
                    "nSlot2"
                ],
                "args": [
                    "int",
                    "int"
                ],
                "description": "Tell a bot to swap the contents of two item slots.",
                "return": "void"
            },
            "ActionPush_AttackMove": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to attack-move a location.",
                "return": "void"
            },
            "ActionPush_AttackUnit": {
                "arg_names": [
                    "hTarget",
                    "bOnce"
                ],
                "args": [
                    "handle",
                    "bool"
                ],
                "description": "Tell a bot to attack a target unit. If bOnce is specified, it will auto-pop the action after one attack.",
                "return": "void"
            },
            "ActionPush_Delay": {
                "arg_names": [
                    "fDelay"
                ],
                "args": [
                    "float"
                ],
                "description": "Tell a bot to delay for the specified number of seconds.",
                "return": "void"
            },
            "ActionPush_DropItem": {
                "arg_names": [
                    "hItem",
                    "location"
                ],
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Tell a bot to drop an item.",
                "return": "void"
            },
            "ActionPush_MoveDirectly": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to move to a location.",
                "return": "void"
            },
            "ActionPush_MovePath": {
                "arg_names": [
                    "hPathTable"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to move along a specified path.",
                "return": "void"
            },
            "ActionPush_MoveToLocation": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to bot-pathfind to a location.",
                "return": "void"
            },
            "ActionPush_MoveToUnit": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to move to a unit and start following them.",
                "return": "void"
            },
            "ActionPush_PickUpItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to pick up a dropped item.",
                "return": "void"
            },
            "ActionPush_PickUpRune": {
                "arg_names": [
                    "nRune"
                ],
                "args": [
                    "int"
                ],
                "description": "Tell a bot to pick up a rune.",
                "return": "void"
            },
            "ActionPush_UseAbility": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to use a non-targeted ability.",
                "return": "void"
            },
            "ActionPush_UseAbilityOnEntity": {
                "arg_names": [
                    "hAbility",
                    "hTarget"
                ],
                "args": [
                    "handle",
                    "handle"
                ],
                "description": "Tell a bot to use a unit-targeted ability.",
                "return": "void"
            },
            "ActionPush_UseAbilityOnLocation": {
                "arg_names": [
                    "hAbility",
                    "location"
                ],
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Tell a bot to use a location-targeted ability.",
                "return": "void"
            },
            "ActionPush_UseAbilityOnTree": {
                "arg_names": [
                    "hAbility",
                    "iTree"
                ],
                "args": [
                    "handle",
                    "int"
                ],
                "description": "Tell a bot to use a tree-targeted ability.",
                "return": "void"
            },
            "ActionPush_UseShrine": {
                "arg_names": [
                    "hShrine"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to use the specified shrine.",
                "return": "void"
            },
            "ActionQueue_AttackMove": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to attack-move a location.",
                "return": "void"
            },
            "ActionQueue_AttackUnit": {
                "arg_names": [
                    "hTarget",
                    "bOnce"
                ],
                "args": [
                    "handle",
                    "bool"
                ],
                "description": "Tell a bot to attack a target unit. If bOnce is specified, it will auto-pop the action after one attack.",
                "return": "void"
            },
            "ActionQueue_Delay": {
                "arg_names": [
                    "fDelay"
                ],
                "args": [
                    "float"
                ],
                "description": "Tell a bot to delay for the specified number of seconds.",
                "return": "void"
            },
            "ActionQueue_DropItem": {
                "arg_names": [
                    "hItem",
                    "location"
                ],
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Tell a bot to drop an item.",
                "return": "void"
            },
            "ActionQueue_MoveDirectly": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to move to a location.",
                "return": "void"
            },
            "ActionQueue_MovePath": {
                "arg_names": [
                    "hPathTable"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to move along a specified path.",
                "return": "void"
            },
            "ActionQueue_MoveToLocation": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to bot-pathfind to a location.",
                "return": "void"
            },
            "ActionQueue_MoveToUnit": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to move to a unit and start following them.",
                "return": "void"
            },
            "ActionQueue_PickUpItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to pick up a dropped item.",
                "return": "void"
            },
            "ActionQueue_PickUpRune": {
                "arg_names": [
                    "nRune"
                ],
                "args": [
                    "int"
                ],
                "description": "Tell a bot to pick up a rune.",
                "return": "void"
            },
            "ActionQueue_UseAbility": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to use a non-targeted ability.",
                "return": "void"
            },
            "ActionQueue_UseAbilityOnEntity": {
                "arg_names": [
                    "hAbility",
                    "hTarget"
                ],
                "args": [
                    "handle",
                    "handle"
                ],
                "description": "Tell a bot to use a unit-targeted ability.",
                "return": "void"
            },
            "ActionQueue_UseAbilityOnLocation": {
                "arg_names": [
                    "hAbility",
                    "location"
                ],
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Tell a bot to use a location-targeted ability.",
                "return": "void"
            },
            "ActionQueue_UseAbilityOnTree": {
                "arg_names": [
                    "hAbility",
                    "iTree"
                ],
                "args": [
                    "handle",
                    "int"
                ],
                "description": "Tell a bot to use a tree-targeted ability.",
                "return": "void"
            },
            "ActionQueue_UseShrine": {
                "arg_names": [
                    "hShrine"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to use the specified shrine.",
                "return": "void"
            },
            "Action_AttackMove": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to attack-move a location.",
                "return": "void"
            },
            "Action_AttackUnit": {
                "arg_names": [
                    "hTarget",
                    "bOnce"
                ],
                "args": [
                    "handle",
                    "bool"
                ],
                "description": "Tell a bot to attack a target unit. If bOnce is specified, it will auto-pop the action after one attack.",
                "return": "void"
            },
            "Action_ClearActions": {
                "arg_names": [
                    "bStop"
                ],
                "args": [
                    "bool"
                ],
                "description": "Clear current action stack and return to idle.  Optionally stop in place.",
                "return": "void"
            },
            "Action_Delay": {
                "arg_names": [
                    "fDelay"
                ],
                "args": [
                    "float"
                ],
                "description": "Tell a bot to delay for the specified number of seconds.",
                "return": "void"
            },
            "Action_DropItem": {
                "arg_names": [
                    "hItem",
                    "location"
                ],
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Tell a bot to drop an item.",
                "return": "void"
            },
            "Action_MoveDirectly": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to move to a location.",
                "return": "void"
            },
            "Action_MovePath": {
                "arg_names": [
                    "hPathTable"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to move along a specified path.",
                "return": "void"
            },
            "Action_MoveToLocation": {
                "arg_names": [
                    "location"
                ],
                "args": [
                    "vector"
                ],
                "description": "Tell a bot to bot-pathfind to a location.",
                "return": "void"
            },
            "Action_MoveToUnit": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to move to a unit and start following them.",
                "return": "void"
            },
            "Action_PickUpItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to pick up a dropped item.",
                "return": "void"
            },
            "Action_PickUpRune": {
                "arg_names": [
                    "nRune"
                ],
                "args": [
                    "int"
                ],
                "description": "Tell a bot to pick up a rune.",
                "return": "void"
            },
            "Action_UseAbility": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to use a non-targeted ability.",
                "return": "void"
            },
            "Action_UseAbilityOnEntity": {
                "arg_names": [
                    "hAbility",
                    "hTarget"
                ],
                "args": [
                    "handle",
                    "handle"
                ],
                "description": "Tell a bot to use a unit-targeted ability.",
                "return": "void"
            },
            "Action_UseAbilityOnLocation": {
                "arg_names": [
                    "hAbility",
                    "location"
                ],
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Tell a bot to use a location-targeted ability.",
                "return": "void"
            },
            "Action_UseAbilityOnTree": {
                "arg_names": [
                    "hAbility",
                    "iTree"
                ],
                "args": [
                    "handle",
                    "int"
                ],
                "description": "Tell a bot to use a tree-targeted ability.",
                "return": "void"
            },
            "Action_UseShrine": {
                "arg_names": [
                    "hShrine"
                ],
                "args": [
                    "handle"
                ],
                "description": "Tell a bot to use the specified shrine.",
                "return": "void"
            },
            "CanBeSeen": {
                "args": [],
                "description": "Can we currently see this bot?  Always true for bots on our team.  Many functions will not return valid data without this being true.",
                "return": "bool"
            },
            "DistanceFromFountain": {
                "args": [],
                "description": "Gets the unit's straight-line distance from the team's fountain (0 is in the fountain).",
                "return": "int"
            },
            "DistanceFromSecretShop": {
                "args": [],
                "description": "Gets the unit's straight-line distance from the closest secret shop (0 is in a secret shop).",
                "return": "int"
            },
            "DistanceFromSideShop": {
                "args": [],
                "description": "Gets the unit's straight-line distance from the closest side shop (0 is in a side shop).",
                "return": "int"
            },
            "FindAoELocation": {
                "arg_names": [
                    "bEnemies",
                    "bHeroes",
                    "vBaseLocation",
                    "nMaxDistanceFromBase",
                    "nRadius",
                    "fTimeInFuture",
                    "nMaxHealth"
                ],
                "args": [
                    "bool",
                    "bool",
                    "vector",
                    "int",
                    "int",
                    "float",
                    "int"
                ],
                "description": "Finds optimal AoE location that overlaps heroes/creeps.",
                "return": "variant"
            },
            "FindItemSlot": {
                "arg_names": [
                    "pszItemName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Get the slot a named item is in",
                "return": "int"
            },
            "GetAbilityByName": {
                "arg_names": [
                    "pszAbilityName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Get a bot's ability by name",
                "return": "handle"
            },
            "GetAbilityInSlot": {
                "arg_names": [
                    "iAbility"
                ],
                "args": [
                    "int"
                ],
                "description": "Get a bot's ability by slot",
                "return": "handle"
            },
            "GetAbilityPoints": {
                "args": [],
                "description": "Get the number of ability points the bot can spend.",
                "return": "int"
            },
            "GetAbilityTarget": {
                "args": [],
                "description": "Get the unit being targeted by an ability.",
                "return": "handle"
            },
            "GetAcquisitionRange": {
                "args": [],
                "description": "Get the range at which this unit will start to attack a target.",
                "return": "int"
            },
            "GetActiveMode": {
                "args": [],
                "description": "Get the active mode ID",
                "return": "int"
            },
            "GetActiveModeDesire": {
                "args": [],
                "description": "Get the desire value of the active mode",
                "return": "float"
            },
            "GetActualIncomingDamage": {
                "arg_names": [
                    "nDamage",
                    "eDamageType"
                ],
                "args": [
                    "int",
                    "int"
                ],
                "description": "Gets the incoming damage value after reductions.",
                "return": "int"
            },
            "GetAnimActivity": {
                "args": [],
                "description": "Get the action the unit is currently performing.",
                "return": "int"
            },
            "GetAnimCycle": {
                "args": [],
                "description": "Get the amount the unit is through its current animation.",
                "return": "float"
            },
            "GetArmor": {
                "args": [],
                "description": "Gets the armor of the unit.",
                "return": "float"
            },
            "GetAssignedLane": {
                "args": [],
                "description": "Get the lane that a unit is assigned to.",
                "return": "int"
            },
            "GetAttackCombatProficiency": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "handle"
                ],
                "description": "Gets the damage multiplier for attacks on the specified unit.",
                "return": "float"
            },
            "GetAttackDamage": {
                "args": [],
                "description": "Gets the total attack damage.",
                "return": "float"
            },
            "GetAttackPoint": {
                "args": [],
                "description": "Gets the attack point of the unit.",
                "return": "float"
            },
            "GetAttackProjectileSpeed": {
                "args": [],
                "description": "Get the speed of the attack projectile for ranged units.",
                "return": "int"
            },
            "GetAttackRange": {
                "args": [],
                "description": "Gets the attack range of the unit.",
                "return": "int"
            },
            "GetAttackSpeed": {
                "args": [],
                "description": "Gets the attack speed of the unit.",
                "return": "float"
            },
            "GetAttackTarget": {
                "args": [],
                "description": "Get the unit being attacked.",
                "return": "handle"
            },
            "GetAttributeValue": {
                "arg_names": [
                    "nAttribute"
                ],
                "args": [
                    "int"
                ],
                "description": "Gets the evasion resist of the unit.",
                "return": "int"
            },
            "GetBaseDamage": {
                "args": [],
                "description": "Gets the base attack damage of the unit.",
                "return": "float"
            },
            "GetBaseDamageVariance": {
                "args": [],
                "description": "Gets the variance of the base attack damage.",
                "return": "float"
            },
            "GetBaseHealthRegen": {
                "args": [],
                "description": "Get a bot's base health regen rate.",
                "return": "float"
            },
            "GetBaseManaRegen": {
                "args": [],
                "description": "Get a bot's base mana regen rate.",
                "return": "float"
            },
            "GetBaseMovementSpeed": {
                "args": [],
                "description": "Get a bot's base movement speed.",
                "return": "int"
            },
            "GetBoundingRadius": {
                "args": [],
                "description": "Get the size of the unit's bounding radius.",
                "return": "float"
            },
            "GetBountyGoldMax": {
                "args": [],
                "description": "Gets the maximum amount of gold rewarded by killing this unit.",
                "return": "int"
            },
            "GetBountyGoldMin": {
                "args": [],
                "description": "Gets the minimum amount of gold rewarded by killing this unit.",
                "return": "int"
            },
            "GetBountyXP": {
                "args": [],
                "description": "Gets the amount of XP rewarded by killing this unit.",
                "return": "int"
            },
            "GetBuybackCooldown": {
                "args": [],
                "description": "Get the current cooldown on buying back.",
                "return": "float"
            },
            "GetBuybackCost": {
                "args": [],
                "description": "Get the current cost of buying back.",
                "return": "int"
            },
            "GetCourierValue": {
                "args": [],
                "description": "Get the value of items on the courier owned by this bot.",
                "return": "int"
            },
            "GetCurrentActionType": {
                "args": [],
                "description": "Get the type of the current action.",
                "return": "int"
            },
            "GetCurrentActiveAbility": {
                "args": [],
                "description": "Get the ability this bot is currently casting.",
                "return": "handle"
            },
            "GetCurrentMovementSpeed": {
                "args": [],
                "description": "Get a bot's current movement speed.",
                "return": "int"
            },
            "GetCurrentVisionRange": {
                "args": [],
                "description": "Get the unit's current vision range.",
                "return": "int"
            },
            "GetDayTimeVisionRange": {
                "args": [],
                "description": "Get the unit's vision range during the day.",
                "return": "int"
            },
            "GetDefendCombatProficiency": {
                "arg_names": [
                    "hAttacker"
                ],
                "args": [
                    "handle"
                ],
                "description": "Gets the damage multiplier for attacks from the specified unit.",
                "return": "float"
            },
            "GetDenies": {
                "args": [],
                "description": "Get the deny count of this bot.",
                "return": "int"
            },
            "GetDifficulty": {
                "args": [],
                "description": "Get the bot's difficulty settings.",
                "return": "int"
            },
            "GetEstimatedDamageToTarget": {
                "arg_names": [
                    "bCurrentlyAvailable",
                    "hTarget",
                    "fDuration",
                    "nDamageTypes"
                ],
                "args": [
                    "bool",
                    "handle",
                    "float",
                    "int"
                ],
                "description": "Get an estimate of how much damage a bot can do in the specified timeframe.  Takes into account item and ability usage based on current mana/cooldowns for allies, for enemies it assumes all items/abilities are available.  Uses no positional/situation info.  Basically asks 'How scary is X to Y?'.",
                "return": "int"
            },
            "GetEvasion": {
                "args": [],
                "description": "Gets the evasion resist of the unit.",
                "return": "float"
            },
            "GetExtrapolatedLocation": {
                "arg_names": [
                    "fDelay"
                ],
                "args": [
                    "float"
                ],
                "description": "Extrapolates their location in the future, based on past movement.",
                "return": "vector"
            },
            "GetFacing": {
                "args": [],
                "description": "Get a bot's facing (0-359).",
                "return": "int"
            },
            "GetGold": {
                "args": [],
                "description": "Get the bot's current gold.",
                "return": "int"
            },
            "GetGroundHeight": {
                "args": [],
                "description": "Get a bot's height value.",
                "return": "int"
            },
            "GetHealth": {
                "args": [],
                "description": "Get a bot's current health.",
                "return": "int"
            },
            "GetHealthRegen": {
                "args": [],
                "description": "Get a bot's health regen rate.",
                "return": "float"
            },
            "GetHealthRegenPerStr": {
                "args": [],
                "description": "Get amount of health regen given per unit of strength.",
                "return": "float"
            },
            "GetIncomingTrackingProjectiles": {
                "args": [],
                "description": "Gets the location and ability of projectiles incoming at this unit.",
                "return": "variant"
            },
            "GetItemInSlot": {
                "arg_names": [
                    "nSlot"
                ],
                "args": [
                    "int"
                ],
                "description": "Get a bot's item by slot",
                "return": "handle"
            },
            "GetItemSlotType": {
                "arg_names": [
                    "nSlot"
                ],
                "args": [
                    "int"
                ],
                "description": "Get the type of the specified item slot",
                "return": "int"
            },
            "GetLastAttackTime": {
                "args": [],
                "description": "Gets the last attack time of the unit.",
                "return": "float"
            },
            "GetLastHits": {
                "args": [],
                "description": "Get the last hit count of this bot.",
                "return": "int"
            },
            "GetLevel": {
                "args": [],
                "description": "Get the bot's current level.",
                "return": "int"
            },
            "GetLocation": {
                "args": [],
                "description": "Geta  bot's 2D location.",
                "return": "vector"
            },
            "GetMagicResist": {
                "args": [],
                "description": "Gets the magic resist of the unit.",
                "return": "float"
            },
            "GetMana": {
                "args": [],
                "description": "Get a bot's current mana.",
                "return": "int"
            },
            "GetManaRegen": {
                "args": [],
                "description": "Get a bot's mana regen rate.",
                "return": "float"
            },
            "GetManaRegenPerInt": {
                "args": [],
                "description": "Get amount of mana regen given per unit of intellect.",
                "return": "float"
            },
            "GetMaxHealth": {
                "args": [],
                "description": "Get a bot's maximum health.",
                "return": "int"
            },
            "GetMaxMana": {
                "args": [],
                "description": "Get a bot's maximum mana.",
                "return": "int"
            },
            "GetModifierAuxiliaryUnits": {
                "arg_names": [
                    "nModifier"
                ],
                "args": [
                    "int"
                ],
                "description": "Get a table of a modifier's auxiliary units.",
                "return": "variant"
            },
            "GetModifierByName": {
                "arg_names": [
                    "pszModifierName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Get the modifier index of a specified modifier.",
                "return": "int"
            },
            "GetModifierList": {
                "args": [],
                "description": "Gets a table of all the modifiers on this unit.",
                "return": "variant"
            },
            "GetModifierName": {
                "arg_names": [
                    "nModifier"
                ],
                "args": [
                    "int"
                ],
                "description": "Get a specific modifier name.",
                "return": "cstring"
            },
            "GetModifierRemainingDuration": {
                "arg_names": [
                    "nModifier"
                ],
                "args": [
                    "int"
                ],
                "description": "Get a modifier's remaining duration.",
                "return": "float"
            },
            "GetModifierStackCount": {
                "arg_names": [
                    "nModifier"
                ],
                "args": [
                    "int"
                ],
                "description": "Get a modifier's stack count.",
                "return": "int"
            },
            "GetMostRecentPing": {
                "args": [],
                "description": "Get the most recent ping by this player.",
                "return": "variant"
            },
            "GetMovementDirectionStability": {
                "args": [],
                "description": "Indicates how consistent the unit's movement has been over the last few seconds.  1 is a straight line, 0 is serpentine.",
                "return": "float"
            },
            "GetNearbyBarracks": {
                "arg_names": [
                    "nRadius",
                    "bEnemies"
                ],
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Get all nearby barracks.",
                "return": "variant"
            },
            "GetNearbyCreeps": {
                "arg_names": [
                    "nRadius",
                    "bEnemies"
                ],
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Get nearby creeps (lane or neutral) that we can see.",
                "return": "variant"
            },
            "GetNearbyFillers": {
                "arg_names": [
                    "nRadius",
                    "bEnemies"
                ],
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Get all nearby filler buildings.",
                "return": "variant"
            },
            "GetNearbyHeroes": {
                "arg_names": [
                    "nRadius",
                    "bEnemies",
                    "eBotMode"
                ],
                "args": [
                    "int",
                    "bool",
                    "int"
                ],
                "description": "Get nearby heroes that we can see in a mode.  Can specify a bot mode when querying allies.  BOT_MODE_NONE does no mode filtering.",
                "return": "variant"
            },
            "GetNearbyLaneCreeps": {
                "arg_names": [
                    "nRadius",
                    "bEnemies"
                ],
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Get nearby lane creeps that we can see.",
                "return": "variant"
            },
            "GetNearbyNeutralCreeps": {
                "arg_names": [
                    "nRadius"
                ],
                "args": [
                    "int"
                ],
                "description": "Get nearby neutral creeps that we can see.",
                "return": "variant"
            },
            "GetNearbyShrines": {
                "arg_names": [
                    "nRadius",
                    "bEnemies"
                ],
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Get all nearby shrines.",
                "return": "variant"
            },
            "GetNearbyTowers": {
                "arg_names": [
                    "nRadius",
                    "bEnemies"
                ],
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Get all nearby towers.",
                "return": "variant"
            },
            "GetNearbyTrees": {
                "arg_names": [
                    "nRadius"
                ],
                "args": [
                    "int"
                ],
                "description": "Get nearby trees.",
                "return": "variant"
            },
            "GetNetWorth": {
                "args": [],
                "description": "Get the bot's current net worth.",
                "return": "int"
            },
            "GetNextItemPurchaseValue": {
                "args": [],
                "description": "Gets the purchase value of the next item the unit wants to purchase.",
                "return": "int"
            },
            "GetNightTimeVisionRange": {
                "args": [],
                "description": "Get the unit's vision range during the night.",
                "return": "int"
            },
            "GetOffensivePower": {
                "args": [],
                "description": "Get the unit's current offensive power.",
                "return": "float"
            },
            "GetPlayerID": {
                "args": [],
                "description": "Get the unit's controlling player id.",
                "return": "int"
            },
            "GetPrimaryAttribute": {
                "args": [],
                "description": "Gets the evasion resist of the unit.",
                "return": "int"
            },
            "GetQueuedActionType": {
                "arg_names": [
                    "nQueuedAction"
                ],
                "args": [
                    "int"
                ],
                "description": "Get the specified action in the queue.",
                "return": "int"
            },
            "GetRawOffensivePower": {
                "args": [],
                "description": "Get the unit's raw offensive power.",
                "return": "float"
            },
            "GetRemainingLifespan": {
                "args": [],
                "description": "Get remaining lifespan of a unit.",
                "return": "float"
            },
            "GetRespawnTime": {
                "args": [],
                "description": "Get the time in seconds until a bot respawns.",
                "return": "float"
            },
            "GetSecondsPerAttack": {
                "args": [],
                "description": "Gets the number of seconds per attack that a unit can do.",
                "return": "float"
            },
            "GetSlowDuration": {
                "arg_names": [
                    "bCurrentlyAvailable"
                ],
                "args": [
                    "bool"
                ],
                "description": "Get the duration of available slows.",
                "return": "float"
            },
            "GetSpellAmp": {
                "args": [],
                "description": "Gets the spell damage amplification of the unit.",
                "return": "float"
            },
            "GetStashValue": {
                "args": [],
                "description": "Get the value of the items in the bot's stash.",
                "return": "int"
            },
            "GetStunDuration": {
                "arg_names": [
                    "bCurrentlyAvailable"
                ],
                "args": [
                    "bool"
                ],
                "description": "Get the duration of available stuns.",
                "return": "float"
            },
            "GetTalent": {
                "arg_names": [
                    "nLevel",
                    "nSide"
                ],
                "args": [
                    "int",
                    "int"
                ],
                "description": "Get one of the talents at the specified level",
                "return": "handle"
            },
            "GetTarget": {
                "args": [],
                "description": "Get the current target of this bot.",
                "return": "handle"
            },
            "GetTeam": {
                "args": [],
                "description": "Get the unit's team.",
                "return": "int"
            },
            "GetUnitName": {
                "args": [],
                "description": "Get the unit's name.",
                "return": "cstring"
            },
            "GetVelocity": {
                "args": [],
                "description": "Get the velocity the unit has moved over the last two seconds.",
                "return": "vector"
            },
            "GetXPNeededToLevel": {
                "args": [],
                "description": "Get the amount of XP needed to level up.",
                "return": "int"
            },
            "HasBlink": {
                "arg_names": [
                    "bCurrentlyAvailable"
                ],
                "args": [
                    "bool"
                ],
                "description": "Does the bot have a blink available?",
                "return": "bool"
            },
            "HasBuyback": {
                "args": [],
                "description": "Can the bot buy back?",
                "return": "bool"
            },
            "HasInvisibility": {
                "arg_names": [
                    "bCurrentlyAvailable"
                ],
                "args": [
                    "bool"
                ],
                "description": "Does the bot have invisibility available?",
                "return": "bool"
            },
            "HasMinistunOnAttack": {
                "args": [],
                "description": "Does the bot have ministuns on attack?",
                "return": "bool"
            },
            "HasModifier": {
                "arg_names": [
                    "pszModifierName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Does the bot have the specified modifier?",
                "return": "bool"
            },
            "HasScepter": {
                "args": [],
                "description": "Does the unit have Aghanim's Scepter?",
                "return": "bool"
            },
            "HasSilence": {
                "arg_names": [
                    "bCurrentlyAvailable"
                ],
                "args": [
                    "bool"
                ],
                "description": "Does the bot have a silence available?",
                "return": "bool"
            },
            "IsAlive": {
                "args": [],
                "description": "Is a bot alive?",
                "return": "bool"
            },
            "IsAncientCreep": {
                "args": [],
                "description": "Is this unit an ancient creep?",
                "return": "bool"
            },
            "IsAttackImmune": {
                "args": [],
                "description": "Is the unit attack immune?",
                "return": "bool"
            },
            "IsBlind": {
                "args": [],
                "description": "Is the unit blind?",
                "return": "bool"
            },
            "IsBlockDisabled": {
                "args": [],
                "description": "Is the unit block disabled?",
                "return": "bool"
            },
            "IsBot": {
                "args": [],
                "description": "Is this unit owned by a bot?",
                "return": "bool"
            },
            "IsBuilding": {
                "args": [],
                "description": "Is this unit a building?",
                "return": "bool"
            },
            "IsCastingAbility": {
                "args": [],
                "description": "Is this bot currently casting an ability?",
                "return": "bool"
            },
            "IsChanneling": {
                "args": [],
                "description": "Is this bot currently channeling an ability?",
                "return": "bool"
            },
            "IsCourier": {
                "args": [],
                "description": "Is this a courier?",
                "return": "bool"
            },
            "IsCreep": {
                "args": [],
                "description": "Is this unit a creep?",
                "return": "bool"
            },
            "IsDisarmed": {
                "args": [],
                "description": "Is the unit disarmed?",
                "return": "bool"
            },
            "IsDominated": {
                "args": [],
                "description": "Is the unit dominated?",
                "return": "bool"
            },
            "IsEvadeDisabled": {
                "args": [],
                "description": "Is the unit evade disabled?",
                "return": "bool"
            },
            "IsFacingLocation": {
                "arg_names": [
                    "vLocation",
                    "nDegrees"
                ],
                "args": [
                    "vector",
                    "int"
                ],
                "description": "Is the unit facing this location, within the specified degree tolerance?",
                "return": "bool"
            },
            "IsFort": {
                "args": [],
                "description": "Is this unit a fort (the main ancient building)?",
                "return": "bool"
            },
            "IsHero": {
                "args": [],
                "description": "Is this unit a hero?",
                "return": "bool"
            },
            "IsHexed": {
                "args": [],
                "description": "Is the unit hexed?",
                "return": "bool"
            },
            "IsIllusion": {
                "args": [],
                "description": "Is this unit an illusion?",
                "return": "bool"
            },
            "IsInvisible": {
                "args": [],
                "description": "Is the unit invisible?",
                "return": "bool"
            },
            "IsInvulnerable": {
                "args": [],
                "description": "Is the unit invulnerable?",
                "return": "bool"
            },
            "IsMagicImmune": {
                "args": [],
                "description": "Is the unit magic immune?",
                "return": "bool"
            },
            "IsMinion": {
                "args": [],
                "description": "Is this a bot's minion?",
                "return": "bool"
            },
            "IsMuted": {
                "args": [],
                "description": "Is the unit muted?",
                "return": "bool"
            },
            "IsNightmared": {
                "args": [],
                "description": "Is the unit nightmared?",
                "return": "bool"
            },
            "IsRooted": {
                "args": [],
                "description": "Is the unit rooted?",
                "return": "bool"
            },
            "IsSilenced": {
                "args": [],
                "description": "Is the unit silenced?",
                "return": "bool"
            },
            "IsSpeciallyDeniable": {
                "args": [],
                "description": "Is the unit specially deniable?",
                "return": "bool"
            },
            "IsStunned": {
                "args": [],
                "description": "Is the unit stunned?",
                "return": "bool"
            },
            "IsTower": {
                "args": [],
                "description": "Is this unit a tower?",
                "return": "bool"
            },
            "IsUnableToMiss": {
                "args": [],
                "description": "Is the unit unable to miss?",
                "return": "bool"
            },
            "IsUsingAbility": {
                "args": [],
                "description": "Is this bot currently using an ability?",
                "return": "bool"
            },
            "NumModifiers": {
                "args": [],
                "description": "Get the number of modifiers on this bot.",
                "return": "int"
            },
            "NumQueuedActions": {
                "args": [],
                "description": "Get the number actions currently queued.",
                "return": "int"
            },
            "SetNextItemPurchaseValue": {
                "arg_names": [
                    "nGold"
                ],
                "args": [
                    "int"
                ],
                "description": "Sets the value of the next item the unit wants to purchase.",
                "return": "void"
            },
            "SetTarget": {
                "arg_names": [
                    ""
                ],
                "args": [
                    "handle"
                ],
                "description": "Set the current target of this bot. Causes no actions, but is used for coordinating between modes and ability/item usage.",
                "return": "void"
            },
            "TimeSinceDamagedByAnyHero": {
                "args": [],
                "description": "How long as it been since the unit was damaged by any enemy?",
                "return": "float"
            },
            "TimeSinceDamagedByCreep": {
                "args": [],
                "description": "How long as it been since the unit was damaged by a creep?",
                "return": "float"
            },
            "TimeSinceDamagedByHero": {
                "arg_names": [
                    "hHero"
                ],
                "args": [
                    "handle"
                ],
                "description": "How long as it been since the unit was damaged by an specific enemy?",
                "return": "float"
            },
            "TimeSinceDamagedByPlayer": {
                "arg_names": [
                    "nPlayerID"
                ],
                "args": [
                    "int"
                ],
                "description": "How long as it been since the unit was damaged by an specific player?",
                "return": "float"
            },
            "TimeSinceDamagedByTower": {
                "args": [],
                "description": "How long as it been since the unit was damaged by a tower?",
                "return": "float"
            },
            "UsingItemBreaksInvisibility": {
                "args": [],
                "description": "Will using an item break invisibiilty?",
                "return": "bool"
            },
            "WasRecentlyDamagedByAnyHero": {
                "arg_names": [
                    "fTime"
                ],
                "args": [
                    "float"
                ],
                "description": "Was the unit recently damaged by any enemy?",
                "return": "bool"
            },
            "WasRecentlyDamagedByCreep": {
                "arg_names": [
                    "fTime"
                ],
                "args": [
                    "float"
                ],
                "description": "Was the unit recently damaged by a creep?",
                "return": "bool"
            },
            "WasRecentlyDamagedByHero": {
                "arg_names": [
                    "hHero",
                    "fTime"
                ],
                "args": [
                    "handle",
                    "float"
                ],
                "description": "Was the unit recently damaged by an specific enemy?",
                "return": "bool"
            },
            "WasRecentlyDamagedByPlayer": {
                "arg_names": [
                    "nPlayerID",
                    "fTime"
                ],
                "args": [
                    "int",
                    "float"
                ],
                "description": "Was the unit recently damaged by an specific player?",
                "return": "bool"
            },
            "WasRecentlyDamagedByTower": {
                "arg_names": [
                    "fTime"
                ],
                "args": [
                    "float"
                ],
                "description": "Was the unit recently damaged by a tower?",
                "return": "bool"
            }
        }
    },
    "CDOTA_TeamCommander": {
        "description": "A Dota Bot Team Commander",
        "functions": {}
    },
    "Global": {
        "functions": {
            "AddAvoidanceZone": {
                "args": [
                    "vector",
                    "float"
                ],
                "description": "Adds a global avoidance zone for use with GeneratePath.",
                "return": "int"
            },
            "AddConditionalAvoidanceZone": {
                "args": [
                    "vector",
                    "handle"
                ],
                "description": "Adds a global avoidance zone for use with GeneratePath, with a conditional function for whether it's active or not.",
                "return": "int"
            },
            "CMBanHero": {
                "args": [
                    "cstring"
                ],
                "description": "Ban a hero in Captain's mode by name.",
                "return": "void"
            },
            "CMPickHero": {
                "args": [
                    "cstring"
                ],
                "description": "Pick a hero in Captain's mode by name.",
                "return": "void"
            },
            "Clamp": {
                "args": [
                    "float",
                    "float",
                    "float"
                ],
                "description": "Clamps the value between the two supplied values.",
                "return": "float"
            },
            "CreateHTTPRequest": {
                "args": [
                    "cstring"
                ],
                "description": "Create a localhost HTTP request.",
                "return": "handle"
            },
            "CreateRemoteHTTPRequest": {
                "args": [
                    "cstring"
                ],
                "description": "Create a remote HTTP request.",
                "return": "handle"
            },
            "DebugDrawCircle": {
                "args": [
                    "vector",
                    "float",
                    "int",
                    "int",
                    "int"
                ],
                "description": "Draws a circle for one frame",
                "return": "void"
            },
            "DebugDrawLine": {
                "args": [
                    "vector",
                    "vector",
                    "int",
                    "int",
                    "int"
                ],
                "description": "Draws a line for one frame",
                "return": "void"
            },
            "DebugDrawText": {
                "args": [
                    "float",
                    "float",
                    "cstring",
                    "int",
                    "int",
                    "int"
                ],
                "description": "Draws text for one frame",
                "return": "void"
            },
            "DebugPause": {
                "args": [],
                "description": "Pauses the game",
                "return": "void"
            },
            "DotaTime": {
                "args": [],
                "description": "Gets the game time -- matches the in-game clock.  Pauses with game pause.",
                "return": "float"
            },
            "GameTime": {
                "args": [],
                "description": "Gets the time since the hero picking phase started.  Pauses with game pause.",
                "return": "float"
            },
            "GeneratePath": {
                "args": [
                    "vector",
                    "vector",
                    "handle",
                    "handle"
                ],
                "description": "Generates a path, avoiding the specified zones.",
                "return": "int"
            },
            "GetAllTrees": {
                "args": [],
                "description": "Returns a table with all tree locations",
                "return": "variant"
            },
            "GetAmountAlongLane": {
                "args": [
                    "int",
                    "vector"
                ],
                "description": "Calculates the amount along the lane (and distance from the lane) for the specified location.",
                "return": "variant"
            },
            "GetAncient": {
                "args": [
                    "int"
                ],
                "description": "Gets the ancient on the specified team.",
                "return": "handle"
            },
            "GetAvoidanceZones": {
                "args": [],
                "description": "Gets an array\t of all visible avoidance zones in a {ability, location, radius} table.",
                "return": "variant"
            },
            "GetBarracks": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Gets the specified barracks on the specified team.",
                "return": "handle"
            },
            "GetBot": {
                "args": [],
                "description": "Get the bot on which script is currently being run.",
                "return": "handle"
            },
            "GetBotAbilityByHandle": {
                "args": [
                    "uint"
                ],
                "description": "Get the bot ability specified by the supplied handle.",
                "return": "handle"
            },
            "GetBotByHandle": {
                "args": [
                    "uint"
                ],
                "description": "Get the bot specified by the supplied handle.",
                "return": "handle"
            },
            "GetCMCaptain": {
                "args": [],
                "description": "Gets player ID of the Captain's Mode captain.",
                "return": "int"
            },
            "GetCMPhaseTimeRemaining": {
                "args": [],
                "description": "Get the amount of time remaining in the current Captain's Mode phase.",
                "return": "float"
            },
            "GetCourier": {
                "args": [
                    "int"
                ],
                "description": "Gets a specific courier.",
                "return": "handle"
            },
            "GetCourierForPlayer": {
                "args": [
                    "int"
                ],
                "description": "Gets the first courier useable by the specified player.",
                "return": "handle"
            },
            "GetCourierState": {
                "args": [
                    "handle"
                ],
                "description": "Gets a specific courier's current state.",
                "return": "int"
            },
            "GetDefendLaneDesire": {
                "args": [
                    "int"
                ],
                "description": "Gets the team-wide desire to defend a lane.",
                "return": "float"
            },
            "GetDroppedItemList": {
                "args": [],
                "description": "Returns the array of items that we can see that have been dropped on the ground.",
                "return": "variant"
            },
            "GetFarmLaneDesire": {
                "args": [
                    "int"
                ],
                "description": "Gets the team-wide desire to farm a lane.",
                "return": "float"
            },
            "GetGameMode": {
                "args": [],
                "description": "Gets the game mode type.",
                "return": "int"
            },
            "GetGameState": {
                "args": [],
                "description": "Gets the current state of the game.",
                "return": "int"
            },
            "GetGameStateTimeRemaining": {
                "args": [],
                "description": "Gets how much time is remaining in the current game state.",
                "return": "float"
            },
            "GetGlyphCooldown": {
                "args": [],
                "description": "Returns the cooldown on glyph (0 if available).",
                "return": "float"
            },
            "GetHeightLevel": {
                "args": [
                    "vector"
                ],
                "description": "Get the height level (1 through 5) of the specified location.",
                "return": "int"
            },
            "GetHeroAssists": {
                "args": [
                    "int"
                ],
                "description": "Gets the assists of the hero controlled by the specified PlayerID.",
                "return": "int"
            },
            "GetHeroDeaths": {
                "args": [
                    "int"
                ],
                "description": "Gets the deaths of the hero controlled by the specified PlayerID.",
                "return": "int"
            },
            "GetHeroKills": {
                "args": [
                    "int"
                ],
                "description": "Gets the kills of the hero controlled by the specified PlayerID.",
                "return": "int"
            },
            "GetHeroLastSeenInfo": {
                "args": [
                    "int"
                ],
                "description": "Gets the {location, time} of the last seen PlayerID unit.",
                "return": "variant"
            },
            "GetHeroLevel": {
                "args": [
                    "int"
                ],
                "description": "Gets the level of the hero controlled by the specified PlayerID.",
                "return": "int"
            },
            "GetHeroPickState": {
                "args": [],
                "description": "Gets the current phase of hero picking.",
                "return": "int"
            },
            "GetIncomingTeleports": {
                "args": [],
                "description": "Gets a table of all the teleports that are visibly happening.",
                "return": "variant"
            },
            "GetItemComponents": {
                "args": [
                    "cstring"
                ],
                "description": "Returns a table of items required to make the specified item.",
                "return": "variant"
            },
            "GetItemCost": {
                "args": [
                    "cstring"
                ],
                "description": "Get the cost of an item by name.",
                "return": "int"
            },
            "GetItemStockCount": {
                "args": [
                    "cstring"
                ],
                "description": "Get the current stock count for the named item.",
                "return": "int"
            },
            "GetLaneFrontAmount": {
                "args": [
                    "int",
                    "int",
                    "bool"
                ],
                "description": "Gets the lane front amount (0.0 - 1.0) of the specified team's creeps along the specified lane.  Optionally can ignore towers for front calculation.",
                "return": "float"
            },
            "GetLaneFrontLocation": {
                "args": [
                    "int",
                    "int",
                    "float"
                ],
                "description": "Gets the location of the lane front for the specified team and lane.  Always ignores towers.  Has a third parameter for a distance delta from the front.",
                "return": "vector"
            },
            "GetLinearProjectileByHandle": {
                "args": [
                    "int"
                ],
                "description": "Gets a specific linear projectile's info using its handle.",
                "return": "variant"
            },
            "GetLinearProjectiles": {
                "args": [],
                "description": "Gets an array of all visible linear projectiles in a {ability, location, velocity, radius} table.",
                "return": "variant"
            },
            "GetLocationAlongLane": {
                "args": [
                    "int",
                    "float"
                ],
                "description": "Calculates the location of the specified amount (0.0 - 1.0) along the specified lane.",
                "return": "vector"
            },
            "GetNeutralSpawners": {
                "args": [],
                "description": "Get the location of all neutral spawners, and what side of the river they're on.",
                "return": "variant"
            },
            "GetNumCouriers": {
                "args": [],
                "description": "Gets the number of couriers on the team.",
                "return": "int"
            },
            "GetOpposingTeam": {
                "args": [],
                "description": "Gets the team that you're fighting against.",
                "return": "int"
            },
            "GetPushLaneDesire": {
                "args": [
                    "int"
                ],
                "description": "Gets the team-wide desire to push a lane.",
                "return": "float"
            },
            "GetRoamDesire": {
                "args": [],
                "description": "Gets the team-wide desire to roam to a target.",
                "return": "float"
            },
            "GetRoamTarget": {
                "args": [],
                "description": "Gets the target of the team-wide roam desire.",
                "return": "handle"
            },
            "GetRoshanDesire": {
                "args": [],
                "description": "Gets the team-wide desire to kill Roshan.",
                "return": "float"
            },
            "GetRoshanKillTime": {
                "args": [],
                "description": "Returns the last time that Roshan was killed.",
                "return": "float"
            },
            "GetRuneSpawnLocation": {
                "args": [
                    "int"
                ],
                "description": "Gets the spawn location of the specified rune.",
                "return": "vector"
            },
            "GetRuneStatus": {
                "args": [
                    "int"
                ],
                "description": "Gets the status of the specified rune.",
                "return": "<unknown>"
            },
            "GetRuneTimeSinceSeen": {
                "args": [
                    "int"
                ],
                "description": "Gets the time since we've seen the specified rune.",
                "return": "float"
            },
            "GetRuneType": {
                "args": [
                    "int"
                ],
                "description": "Gets the type of the specified rune, if known.",
                "return": "int"
            },
            "GetScriptDirectory": {
                "args": [],
                "description": "Get the directory from which bot scripts are being run.",
                "return": "cstring"
            },
            "GetSelectedHeroName": {
                "args": [
                    "int"
                ],
                "description": "Gets the name of the hero selected by a player.",
                "return": "cstring"
            },
            "GetShopLocation": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Get location for the specified shop.",
                "return": "vector"
            },
            "GetShrine": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Gets the specified shrine on the specified team.",
                "return": "handle"
            },
            "GetShrineCooldown": {
                "args": [
                    "handle"
                ],
                "description": "Gets the healing cooldown of the specified shrine.",
                "return": "float"
            },
            "GetTeam": {
                "args": [],
                "description": "Get the team on which script is currently being run.",
                "return": "int"
            },
            "GetTeamForPlayer": {
                "args": [
                    "int"
                ],
                "description": "Gets the team of the specified player.",
                "return": "int"
            },
            "GetTeamMember": {
                "args": [
                    "int"
                ],
                "description": "Get a member of a team.",
                "return": "handle"
            },
            "GetTeamPlayers": {
                "args": [
                    "int"
                ],
                "description": "Gets a list of Player IDs for the specified team.",
                "return": "variant"
            },
            "GetTimeOfDay": {
                "args": [],
                "description": "Gets the curren time of day (0.0 is midnight, 0.5 is noon).",
                "return": "float"
            },
            "GetTower": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Gets the specified tower on the specified team.",
                "return": "handle"
            },
            "GetTowerAttackTarget": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Gets the attack target of the specified tower on the specified team.",
                "return": "handle"
            },
            "GetTreeLocation": {
                "args": [
                    "int"
                ],
                "description": "Gets the location of the specified tree.",
                "return": "vector"
            },
            "GetUnitList": {
                "args": [
                    "int"
                ],
                "description": "Gets a list of visible units.",
                "return": "variant"
            },
            "GetUnitPotentialValue": {
                "args": [
                    "handle",
                    "vector",
                    "float"
                ],
                "description": "Gets the 0-255 potential-value location of a hero at the specified location and radius.",
                "return": "int"
            },
            "GetUnitToLocationDistance": {
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Get the distance between a unit and a location.",
                "return": "float"
            },
            "GetUnitToLocationDistanceSqr": {
                "args": [
                    "handle",
                    "vector"
                ],
                "description": "Get the squared distance between a unit and a location.",
                "return": "float"
            },
            "GetUnitToUnitDistance": {
                "args": [
                    "handle",
                    "handle"
                ],
                "description": "Get the distance between two units.",
                "return": "float"
            },
            "GetUnitToUnitDistanceSqr": {
                "args": [
                    "handle",
                    "handle"
                ],
                "description": "Get the squared distance between two units.",
                "return": "float"
            },
            "GetWorldBounds": {
                "args": [],
                "description": "Gets the minimum and maximum bounds of the world.",
                "return": "variant"
            },
            "InstallCastCallback": {
                "args": [
                    "int",
                    "handle"
                ],
                "description": "Install a callback for whenever the specified player's units cast an ability or use an item.",
                "return": "void"
            },
            "InstallChatCallback": {
                "args": [
                    "handle"
                ],
                "description": "Install a callback for whenever a player chats.",
                "return": "void"
            },
            "InstallCourierDeathCallback": {
                "args": [
                    "handle"
                ],
                "description": "Install a callback for whenever a courier is killed.",
                "return": "void"
            },
            "InstallDamageCallback": {
                "args": [
                    "int",
                    "handle"
                ],
                "description": "Install a callback for whenever the specified player's units take damage.",
                "return": "void"
            },
            "InstallRoshanDeathCallback": {
                "args": [
                    "handle"
                ],
                "description": "Install a callback for whenever Roshan is killed.",
                "return": "void"
            },
            "IsCMBannedHero": {
                "args": [
                    "cstring"
                ],
                "description": "Has the named hero been banned in Captain's Mode?",
                "return": "bool"
            },
            "IsCMPickedHero": {
                "args": [
                    "int",
                    "cstring"
                ],
                "description": "Has the named hero been picked in Captain's Mode?",
                "return": "bool"
            },
            "IsCourierAvailable": {
                "args": [],
                "description": "Asks if a courier is available to use.",
                "return": "bool"
            },
            "IsFlyingCourier": {
                "args": [
                    "handle"
                ],
                "description": "Gets whether a courier is a flying courier.",
                "return": "bool"
            },
            "IsHeroAlive": {
                "args": [
                    "int"
                ],
                "description": "Asks if the specified PlayerID is alive.",
                "return": "bool"
            },
            "IsInCMBanPhase": {
                "args": [],
                "description": "Is Captain's Mode in Ban phase?",
                "return": "bool"
            },
            "IsInCMPickPhase": {
                "args": [],
                "description": "Is Captain's Mode in Pick phase?",
                "return": "bool"
            },
            "IsItemPurchasedFromSecretShop": {
                "args": [
                    "cstring"
                ],
                "description": "Can the named item can be purchased from the secret shop?",
                "return": "bool"
            },
            "IsItemPurchasedFromSideShop": {
                "args": [
                    "cstring"
                ],
                "description": "Can the named item can be purchased from the side shop?",
                "return": "bool"
            },
            "IsLocationPassable": {
                "args": [
                    "vector"
                ],
                "description": "Can the specified location currently be pathed through?",
                "return": "bool"
            },
            "IsLocationVisible": {
                "args": [
                    "vector"
                ],
                "description": "Can the specified location currently be seen?",
                "return": "bool"
            },
            "IsPlayerBot": {
                "args": [
                    "int"
                ],
                "description": "Asks if a specific Player ID is a bot.",
                "return": "bool"
            },
            "IsPlayerInHeroSelectionControl": {
                "args": [
                    "int"
                ],
                "description": "Is this player allowed to currently allowed to select a hero?",
                "return": "bool"
            },
            "IsRadiusVisible": {
                "args": [
                    "vector",
                    "float"
                ],
                "description": "Can the specified circle currently be seen?",
                "return": "bool"
            },
            "IsShrineHealing": {
                "args": [
                    "handle"
                ],
                "description": "Gets whether the Shrine is actively healing or not.",
                "return": "bool"
            },
            "IsTeamPlayer": {
                "args": [
                    "int"
                ],
                "description": "Asks if a specific Player ID is a member of Radiant or Dire.",
                "return": "bool"
            },
            "Max": {
                "args": [
                    "float",
                    "float"
                ],
                "description": "Returns the smaller of the two supplied values.",
                "return": "float"
            },
            "Min": {
                "args": [
                    "float",
                    "float"
                ],
                "description": "Returns the smaller of the two supplied values.",
                "return": "float"
            },
            "PointToLineDistance": {
                "args": [
                    "vector",
                    "vector",
                    "vector"
                ],
                "description": "Get the squared distance between a unit and a location.",
                "return": "variant"
            },
            "RandomFloat": {
                "args": [
                    "float",
                    "float"
                ],
                "description": "Get a random float within a range",
                "return": "float"
            },
            "RandomInt": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Get a random int within a range",
                "return": "int"
            },
            "RandomVector": {
                "args": [
                    "float"
                ],
                "description": "Get a random 2D vector of the specified length.",
                "return": "vector"
            },
            "RealTime": {
                "args": [],
                "description": "Gets the real-world time since the app has started.  Does not pause with game pause.",
                "return": "float"
            },
            "RemapVal": {
                "args": [
                    "float",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "description": "Linearly remaps X from A,B to C,D",
                "return": "float"
            },
            "RemapValClamped": {
                "args": [
                    "float",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "description": "Linearly remaps X from A,B to C,D, clamping to C,D",
                "return": "float"
            },
            "RemoveAvoidanceZone": {
                "args": [
                    "int"
                ],
                "description": "Adds a global avoidance zone for use with GeneratePath.",
                "return": "void"
            },
            "RollPercentage": {
                "args": [
                    "int"
                ],
                "description": "Rolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified",
                "return": "bool"
            },
            "SelectHero": {
                "args": [
                    "int",
                    "cstring"
                ],
                "description": "Selects a hero for a player.",
                "return": "void"
            },
            "SetCMCaptain": {
                "args": [
                    "int"
                ],
                "description": "Sets a player to be Captain's Mode captain.",
                "return": "void"
            }
        }
    }
}