{
    "achievement_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Turn on achievement debug msgs."
    },
    "achievement_disable": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Turn off achievements."
    },
    "adsp_alley_min": {
        "default_value": "122"
    },
    "adsp_courtyard_min": {
        "default_value": "126"
    },
    "adsp_debug": {
        "default_value": "0",
        "flags": [
            "archive"
        ]
    },
    "adsp_door_height": {
        "default_value": "112"
    },
    "adsp_duct_min": {
        "default_value": "106"
    },
    "adsp_hall_min": {
        "default_value": "110"
    },
    "adsp_low_ceiling": {
        "default_value": "108"
    },
    "adsp_opencourtyard_min": {
        "default_value": "126"
    },
    "adsp_openspace_min": {
        "default_value": "130"
    },
    "adsp_openstreet_min": {
        "default_value": "118"
    },
    "adsp_openwall_min": {
        "default_value": "130"
    },
    "adsp_room_min": {
        "default_value": "102"
    },
    "adsp_street_min": {
        "default_value": "118"
    },
    "adsp_tunnel_min": {
        "default_value": "114"
    },
    "adsp_wall_height": {
        "default_value": "128"
    },
    "ai_LOS_mode": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "ai_debug_los": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "NPC Line-Of-Sight debug mode. If 1, solid entities that block NPC LOC will be highlighted with white bounding boxes. If 2, it'll show non-solid entities that would do it if they were solid."
    },
    "ai_debug_off_nav": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "ai_debug_ragdoll_magnets": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "ai_debug_shoot_positions": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "ai_debug_speech": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "ai_expression_frametime": {
        "default_value": "0.05",
        "flags": [
            "gamedll"
        ],
        "help_text": "Maximum frametime to still play background expressions."
    },
    "ai_expression_optimization": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Disable npc background expressions when you can't see them."
    },
    "ai_force_serverside_ragdoll": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "ai_sequence_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "ai_shot_bias_max": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "ai_shot_bias_min": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "ai_show_hull_attacks": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Show AI hull traces for melee attacks. 1 = show them for attacks, 2 = show them for tests."
    },
    "ai_use_visibility_cache": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "all_pick_force_test": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "anim_disable": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "animgraph_debug_tags": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "animgraph_debug_variables": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "animgraph_ik_debug": {
        "default_value": "0"
    },
    "async_allow_held_files": {
        "default_value": "1",
        "help_text": "Allow AsyncBegin/EndRead()"
    },
    "async_mode": {
        "default_value": "0",
        "help_text": "Set the async filesystem mode (0 = async, 1 = synchronous)"
    },
    "async_serialize": {
        "default_value": "0",
        "help_text": "Force async reads to serialize for profiling"
    },
    "async_simulate_delay": {
        "default_value": "0",
        "help_text": "Simulate a delay of up to a set msec per file operation"
    },
    "autoaim_max_deflect": {
        "default_value": "0.99",
        "flags": [
            "gamedll"
        ]
    },
    "autoaim_max_dist": {
        "default_value": "2160",
        "flags": [
            "gamedll"
        ]
    },
    "blackbox": {
        "default_value": "1"
    },
    "breakable_disable_gib_limit": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "breakable_multiplayer": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "buddha": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify",
            "cheat"
        ],
        "help_text": "Player takes damage but won't die"
    },
    "bug_submitter_override": {
        "flags": [
            "archive"
        ]
    },
    "cc_norepeat": {
        "default_value": "5",
        "flags": [
            "gamedll"
        ],
        "help_text": "In multiplayer games, don't repeat captions more often than this many seconds."
    },
    "cc_showmissing": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Show missing closecaption entries."
    },
    "cl_aggregate_particles": {
        "default_value": "0"
    },
    "cl_allowupload": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Client uploads customization files"
    },
    "cl_cache_sendtable": {
        "default_value": "1",
        "help_text": "Cache sendtables"
    },
    "cl_clock_correction": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable/disable clock correction on the client."
    },
    "cl_clock_correction_adjustment_max_amount": {
        "default_value": "200",
        "flags": [
            "cheat"
        ],
        "help_text": "Sets the maximum number of milliseconds per second it is allowed to correct the client clock. It will only correct this amount if the difference between the client and server clock is equal to or larger than cl_clock_correction_adjustment_max_offset."
    },
    "cl_clock_correction_adjustment_max_offset": {
        "default_value": "90",
        "flags": [
            "cheat"
        ],
        "help_text": "As the clock offset goes from cl_clock_correction_adjustment_min_offset to this value (in milliseconds), it moves towards applying cl_clock_correction_adjustment_max_amount of adjustment. That way, the response is small when the offset is small."
    },
    "cl_clock_correction_adjustment_min_offset": {
        "default_value": "10",
        "flags": [
            "cheat"
        ],
        "help_text": "If the clock offset is less than this amount (in milliseconds), then no clock correction is applied."
    },
    "cl_clock_correction_force_server_tick": {
        "default_value": "999",
        "flags": [
            "cheat"
        ],
        "help_text": "Force clock correction to match the server tick + this offset (-999 disables it)."
    },
    "cl_clock_showdebuginfo": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Show debugging info about the clock drift. "
    },
    "cl_clockdbg": {
        "default_value": "0"
    },
    "cl_clockdrift_max_ms": {
        "default_value": "150",
        "flags": [
            "cheat"
        ],
        "help_text": "Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server's."
    },
    "cl_clockdrift_max_ms_threadmode": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server's."
    },
    "cl_cloud_settings": {
        "default_value": "-1",
        "flags": [
            "hidden"
        ],
        "help_text": "Cloud enabled from (from HKCU\\Software\\Valve\\Steam\\Apps\\appid\\Cloud)"
    },
    "cl_cmdrate": {
        "default_value": "30",
        "flags": [
            "archive",
            "userinfo"
        ],
        "help_text": "Max number of command packets sent to server per second",
        "max_value": 100,
        "min_value": 10
    },
    "cl_connectionretrytime_p2p": {
        "default_value": "20",
        "flags": [
            "release"
        ],
        "help_text": "Number of seconds over which to spread retry attempts for P2P."
    },
    "cl_consistencycheck_interval": {
        "default_value": "180.0",
        "flags": [
            "replicated"
        ],
        "help_text": "Perform a consistency check after this amount of time (seconds) has passed since the last."
    },
    "cl_disconnect_soundevent": {
        "default_value": "core.stop_all_soundevents",
        "help_text": "This soundevent is called to stop the desired soundevents when the game is disconnected."
    },
    "cl_downloadfilter": {
        "default_value": "all",
        "flags": [
            "archive"
        ],
        "help_text": "Determines which files can be downloaded from the server (all, none, nosounds)"
    },
    "cl_flushentitypacket": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "For debugging. Force the engine to flush an entity packet."
    },
    "cl_ignorepackets": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Force client to ignore packets (for debugging)."
    },
    "cl_jiggle_bone_debug": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Display physics-based 'jiggle bone' debugging information"
    },
    "cl_jiggle_bone_debug_pitch_constraints": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Display physics-based 'jiggle bone' debugging information"
    },
    "cl_jiggle_bone_debug_yaw_constraints": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Display physics-based 'jiggle bone' debugging information"
    },
    "cl_jiggle_bone_invert": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "cl_jiggle_bone_sanity": {
        "default_value": "1",
        "help_text": "Prevent jiggle bones from pointing directly away from their target in case of numerical instability."
    },
    "cl_language": {
        "default_value": "english",
        "flags": [
            "userinfo"
        ],
        "help_text": "Language"
    },
    "cl_log_tick": {
        "default_value": "0",
        "help_text": "Log when a tick is recieved\n"
    },
    "cl_log_tick_skips": {
        "default_value": "0",
        "help_text": "Log when the tick delta >= this"
    },
    "cl_particle_batch_mode": {
        "default_value": "1"
    },
    "cl_particle_fallback_base": {
        "default_value": "0",
        "help_text": "Base for falling back to cheaper effects under load."
    },
    "cl_particle_fallback_multiplier": {
        "default_value": "0",
        "help_text": "Multiplier for falling back to cheaper effects under load."
    },
    "cl_particle_max_count": {
        "default_value": "0"
    },
    "cl_particle_retire_cost": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "cl_particle_sim_fallback_base_multiplier": {
        "default_value": "5",
        "help_text": "How aggressive the switch to fallbacks will be depending on how far over the cl_particle_sim_fallback_threshold_ms the sim time is.  Higher numbers are more aggressive."
    },
    "cl_particle_sim_fallback_threshold_ms": {
        "default_value": "6.0",
        "help_text": "Amount of simulation time that can elapse before new systems start falling back to cheaper versions"
    },
    "cl_particle_simulate": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enables/Disables Particle Simulation"
    },
    "cl_particles_debug_showparticles": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "cl_playback_screenshots": {
        "default_value": "0",
        "help_text": "Allows the client to playback screenshot and jpeg commands in demos."
    },
    "cl_resend": {
        "default_value": "0.5",
        "flags": [
            "release"
        ],
        "help_text": "Delay in seconds before the client will resend the 'connect' attempt",
        "max_value": 2,
        "min_value": 0
    },
    "cl_retire_low_priority_lights": {
        "default_value": "0",
        "help_text": "Low priority dlights are replaced by high priority ones"
    },
    "cl_sendtable_cache_filename": {
        "default_value": "sendtables.bin",
        "help_text": "Send tables cache file"
    },
    "cl_showdemooverlay": {
        "default_value": "0",
        "help_text": "How often to flash demo recording/playback overlay (0 - disable overlay, -1 - show always)"
    },
    "cl_spectator_cmdrate_factor": {
        "default_value": "0.5",
        "help_text": "Rate multiplier when connected via hltv"
    },
    "cl_timeout": {
        "default_value": "30",
        "flags": [
            "archive"
        ],
        "help_text": "After this many seconds without receiving a packet from the server, the client will disconnect itself"
    },
    "cl_updaterate": {
        "default_value": "20",
        "flags": [
            "archive",
            "userinfo"
        ],
        "help_text": "Number of packets per second of updates you are requesting from the server"
    },
    "cl_use_snp": {
        "default_value": "0",
        "flags": [
            "dont_record",
            "release"
        ],
        "help_text": "-1:request no, 0:let server decide, +1:request yes"
    },
    "cl_voice_filter": {
        "help_text": "Filter voice by name substring"
    },
    "clientport": {
        "flags": [
            "release"
        ],
        "help_text": "If non-empty, client binds port to specific address.  Usually you should leave this blank to use a different random system-assigned port for each connection."
    },
    "closecaption": {
        "default_value": "0",
        "flags": [
            "archive",
            "userinfo",
            "archive_xbox"
        ],
        "help_text": "Enable close captioning."
    },
    "cloth_airdrag": {
        "default_value": "0"
    },
    "cloth_airdrag_override": {
        "default_value": "0"
    },
    "cloth_attr_pos": {
        "default_value": "1"
    },
    "cloth_attr_vel": {
        "default_value": "2"
    },
    "cloth_batch": {
        "default_value": "32"
    },
    "cloth_compatibility": {
        "default_value": "1"
    },
    "cloth_damping_bias": {
        "default_value": "0"
    },
    "cloth_damping_multiplier": {
        "default_value": "1"
    },
    "cloth_debug": {
        "default_value": "0"
    },
    "cloth_debug_draw_nodepth_alpha": {
        "default_value": "16"
    },
    "cloth_expairdrag": {
        "default_value": "0"
    },
    "cloth_expquadairdrag": {
        "default_value": "0"
    },
    "cloth_ground_offset": {
        "default_value": "0.0"
    },
    "cloth_ground_plane_thickness": {
        "default_value": "3"
    },
    "cloth_guard_threshold": {
        "default_value": "1000"
    },
    "cloth_iteration_multiplier": {
        "default_value": "1"
    },
    "cloth_iv_store_back": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "cloth_legacy_stretch_force": {
        "default_value": "0.95"
    },
    "cloth_node_debug_axis_length": {
        "default_value": "1.0"
    },
    "cloth_node_velocity_limit": {
        "default_value": "1000000"
    },
    "cloth_quad_smooth_iterations": {
        "default_value": "-1"
    },
    "cloth_quad_smooth_rate": {
        "default_value": "-1"
    },
    "cloth_quadairdrag": {
        "default_value": "0"
    },
    "cloth_reload_immediately": {
        "default_value": "0"
    },
    "cloth_rod_smooth_iterations": {
        "default_value": "-1"
    },
    "cloth_rod_smooth_rate": {
        "default_value": "-1"
    },
    "cloth_simulate": {
        "default_value": "1"
    },
    "cloth_step": {
        "default_value": "1"
    },
    "cloth_watch": {
        "default_value": "1",
        "flags": [
            "replicated"
        ]
    },
    "cloth_wind": {
        "default_value": "0"
    },
    "cloth_wind_pitch": {
        "default_value": "0"
    },
    "collision_shake_amp": {
        "default_value": "0.2",
        "flags": [
            "gamedll"
        ]
    },
    "collision_shake_freq": {
        "default_value": "0.5",
        "flags": [
            "gamedll"
        ]
    },
    "collision_shake_time": {
        "default_value": "0.5",
        "flags": [
            "gamedll"
        ]
    },
    "commentary": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive",
            "archive_xbox"
        ],
        "help_text": "Desired commentary mode state."
    },
    "commentary_available": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Automatically set by the game when a commentary file is available for the current map."
    },
    "con_logfile_suffix": {
        "help_text": "Suffix to append to the console log, may be changed to reopen the log"
    },
    "convars_echo_toggle_changes": {
        "default_value": "1",
        "help_text": "Echo to the console changes caused by toggling."
    },
    "crowbar_impact_damage_mass": {
        "default_value": "8.0",
        "flags": [
            "gamedll"
        ]
    },
    "crowbar_impact_damage_scale": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "csm_bias_override_0": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "csm_bias_override_1": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "csm_bias_override_2": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "csm_bias_override_3": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "csm_cascade0_override_dist": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_cascade1_override_dist": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_cascade2_override_dist": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_cascade3_override_dist": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_cascade_viewdir_shadow_bias_scale": {
        "default_value": "2",
        "flags": [
            "cheat"
        ]
    },
    "csm_max_num_cascades_override": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_max_shadow_dist_override": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_res_override_0": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "csm_res_override_1": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "csm_res_override_2": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "csm_res_override_3": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "csm_slope_scale_db_override": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "csm_split_log_scalar": {
        "default_value": "0.85",
        "flags": [
            "cheat"
        ]
    },
    "csm_viewdir_shadow_bias": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "d2lobby_enable_live_stats": {
        "default_value": "1"
    },
    "dart_fly_straight_dampening": {
        "default_value": "0.5",
        "flags": [
            "gamedll"
        ]
    },
    "dart_fly_straight_torque": {
        "default_value": "10000.0",
        "flags": [
            "gamedll"
        ]
    },
    "debug_materialmodifycontrol": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "debug_overlay_fullposition": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "debug_physimpact": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "debug_shared_random": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "debug_touchlinks": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Spew touch link activity"
    },
    "debug_visibility_monitor": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "debugoverlay_draw_current": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Tell debugoverlay to not draw any entries that have aged out by the time of rendering. Useful if sim runs more often than rendering."
    },
    "debugoverlay_ignore_source": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Draw everything normal and ignore the source for rendering"
    },
    "debugoverlay_show_text_outline": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Toggle display of box around text"
    },
    "decalfrequency": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "demo_avellimit": {
        "default_value": "2000",
        "help_text": "Angular velocity limit before eyes considered snapped for demo playback."
    },
    "demo_fastforwardfinalspeed": {
        "default_value": "20",
        "help_text": "Go this fast when starting to hold FF button."
    },
    "demo_fastforwardramptime": {
        "default_value": "5",
        "help_text": "How many seconds it takes to get to full FF speed."
    },
    "demo_fastforwardstartspeed": {
        "default_value": "2",
        "help_text": "Go this fast when starting to hold FF button."
    },
    "demo_flush": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Flush writing the demo file every network update"
    },
    "demo_interplimit": {
        "default_value": "4000",
        "help_text": "How much origin velocity before it's considered to have 'teleported' causing interpolation to reset."
    },
    "demo_interpolateview": {
        "default_value": "1",
        "help_text": "Do view interpolation during dem playback."
    },
    "demo_pauseatservertick": {
        "default_value": "0",
        "help_text": "Pauses demo playback at server tick"
    },
    "demo_quitafterplayback": {
        "default_value": "0",
        "help_text": "Quits game after demo playback."
    },
    "demo_recordcommands": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Record commands typed at console into .dem files."
    },
    "demo_usefastgoto": {
        "default_value": "1",
        "help_text": "Use fast frame skipping when available for demo_goto commands."
    },
    "demo_writefullupdate_rate": {
        "default_value": "60",
        "help_text": "Interval time in seconds to write full updates to demo."
    },
    "developer": {
        "default_value": "0",
        "help_text": "Set developer message level."
    },
    "diffcheck": {
        "default_value": "0",
        "help_text": "Activate diffcheck system."
    },
    "diffcheck_playerslot": {
        "default_value": "0"
    },
    "diffcheck_spew": {
        "default_value": "1",
        "help_text": "Actually show diffcheck results."
    },
    "disable_dynamic_prop_loading": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If non-zero when a map loads, dynamic props won't be loaded"
    },
    "dispcoll_drawplane": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "display_game_events": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "displaysoundlist": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_1v1_skip_strategy": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_ability_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_ability_refcount_modifiers": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_all_vision": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_allow_orders_while_paused": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_allow_pause_in_match": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Allow players to pause in matchmade games"
    },
    "dota_animation_force_modifier": {
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_announcer_idle_speech_deathwait": {
        "default_value": "45",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "This many seconds must pass after a hero dies for an announcer to consider saying idle lines."
    },
    "dota_announcer_idle_speech_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If true print debug information about why announcers do or do not idle."
    },
    "dota_announcer_idle_speech_herodamage_limit": {
        "default_value": "250",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If any hero has taken more than this many hitpoints of damage recently, no idles play."
    },
    "dota_announcer_idle_speech_herodamage_window": {
        "default_value": "45",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If any hero has taken more than dota_announcer_idle_speech_herodamage_limit hitpoints of damage in this many seconds, no idles play."
    },
    "dota_announcer_idle_speech_interval": {
        "default_value": "240",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "After an announcer has said an idle line, another can't play for at least this many seconds."
    },
    "dota_announcer_idle_speech_minwait": {
        "default_value": "20",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Announcers won't say idle speech unless at least this many seconds passed since the last time they said something."
    },
    "dota_announcer_idle_speech_starttime": {
        "default_value": "240",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "This many seconds must have passed since start of game before announcers poll for idle speech."
    },
    "dota_auto_surrender_all_disconnected_timeout": {
        "default_value": "60",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If all players have been disconnected for at least N seconds, end the game immediately"
    },
    "dota_bonus_hero_rollover_time": {
        "default_value": "-14400",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_bot_chat_throttle_duration": {
        "default_value": "4.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_debug_assemble": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_debug_grid": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_debug_lanes": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_debug_minimap": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_debug_path": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_debug_path_avg": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_debug_path_draw": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_debug_pathing": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_debug_potential_location": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_debug_team": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_bot_debug_ward_spots": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_disable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_disable_test": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_failed_pathfind_warnings": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_force_pick": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Force bots to pick one of these heroes before falling back to random selection (should be a comma-separated list with no spaces)"
    },
    "dota_bot_level": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If set, bots will be set to the level specified with appropriate gold on game start"
    },
    "dota_bot_long_frame_limit": {
        "default_value": "2.0",
        "flags": [
            "gamedll",
            "archive"
        ]
    },
    "dota_bot_mode": {
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_bot_pick_odds": {
        "default_value": "500",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_practice_difficulty": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Default difficulty for quick bot practice games"
    },
    "dota_bot_practice_gamemode": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Default game mode for bot practice games, AP = 1"
    },
    "dota_bot_practice_script": {
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Bot script ID (as a string) to use for local games."
    },
    "dota_bot_practice_select_hero": {
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Force selection of a hero for the human player in practice games."
    },
    "dota_bot_practice_start": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Whether to start a local game when the map loads"
    },
    "dota_bot_practice_team": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive",
            "replicated"
        ],
        "help_text": "Default team for quick bot practice games"
    },
    "dota_bot_purchase_item_enable": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_takeover_disconnected": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_bot_tutorial_boss": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_use_machine_learned_weights": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_building_defended_radius": {
        "default_value": "800",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_building_health_loss_warn_interval": {
        "default_value": "9",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Minimum seconds between announcer warning a particular building is under attack"
    },
    "dota_cd_captain_pick_time": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_cd_minimum_pick_time": {
        "default_value": "5.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_cd_pool_size": {
        "default_value": "27",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_cm_captain_pick_time": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_cm_minimum_pick_time": {
        "default_value": "5.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_combatlog_fight_idle_time": {
        "default_value": "5.0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "The amount of time needed to determine a fight is over (no one involved in a fight did anything to anyone else involved in the fight)."
    },
    "dota_combatlog_location_interval": {
        "default_value": "1.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_creep_distance_interval": {
        "default_value": "5.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_creep_stack_nearby_hero_radius": {
        "default_value": "3000",
        "flags": [
            "gamedll"
        ]
    },
    "dota_creeps_no_spawning": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_custom_game_win_score": {
        "default_value": "11",
        "flags": [
            "gamedll"
        ]
    },
    "dota_damage_flash": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive"
        ],
        "help_text": "Flash when enemies take damage from the player"
    },
    "dota_daynightcycle_pause": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "0 = resume day/night cycle; 1 = pause day/night cycle; default = 0;"
    },
    "dota_dead_unit_delete_time": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_dead_unit_disappear_time": {
        "default_value": "4.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_debug_lasthit_timing": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_debug_location_x": {
        "default_value": "0.01",
        "flags": [
            "gamedll"
        ]
    },
    "dota_debug_location_y": {
        "default_value": "0.01",
        "flags": [
            "gamedll"
        ]
    },
    "dota_debug_stuck": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_default_gold": {
        "default_value": "600",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_director_record_combat_log": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_director_shoulder_view_chance": {
        "default_value": "10",
        "flags": [
            "gamedll"
        ]
    },
    "dota_disable_bot_lane": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_disable_mid_lane": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_disable_top_lane": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_easy_mode": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_easybuy": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Everything is free, all shops are in range, and you can purchase for other heroes"
    },
    "dota_echoslam_max_projectiles": {
        "default_value": "75",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_effective_creep_spawn_time": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If non-zero, the time the creep spawner uses for deciding what to spawn"
    },
    "dota_endgame_cinematic_disable": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_entity_count_grace_threshold": {
        "default_value": "128",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of entities to reserve when we're getting close to the limit. Stops some entities from spawning."
    },
    "dota_experimental_stats_interval": {
        "default_value": "60",
        "flags": [
            "gamedll"
        ],
        "help_text": "Seconds between each experimental stat update."
    },
    "dota_fanfare_disable": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_fantasy_stat_update_interval_s": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "How often the server updates the GC with player fantasy stats"
    },
    "dota_force_battle_cup_winner": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_force_bot_cycle": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set automatically by matchmaking to fill slots with bots"
    },
    "dota_force_gamemode": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Force the game mode to a specific one. AP = 1, CM = 2, RD = 3, SD = 4. INTRO = 6. 7 = HW. 8 = REVERSE CM. 9 = XMAS"
    },
    "dota_force_pick_allow": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_force_upload_match_stats": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If enabled, server will upload match stats even when there aren't human players on each side"
    },
    "dota_fountain_idle_minimum_time": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long into the game we need to be before we boot players for being intentionally Idle."
    },
    "dota_fountain_protection": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "hidden",
            "cheat"
        ]
    },
    "dota_fow_grid_size": {
        "default_value": "64",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_gamemode_ability_draft_per_player_time": {
        "default_value": "7",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Total time in seconds a player has to draft an ability"
    },
    "dota_gamemode_ability_draft_pool_hero": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Forced hero id to be in the ability pool"
    },
    "dota_gamemode_ability_draft_pre_round_time": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Break between rounds"
    },
    "dota_gamemode_ability_draft_pre_time": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_gamemode_ability_draft_test_hero": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Forced hero id for player 0"
    },
    "dota_gamemode_ardm_hero_count": {
        "default_value": "90",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_gamemode_ardm_preload_count": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_gamemode_ardm_sellback_percent": {
        "default_value": "0.85",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_gg_call_time": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_gold_redistribute_time": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_black_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_blue_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_green_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_orange_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_purple_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_red_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_seed": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_white_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_greevil_yellow_essence": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_gridnav_show": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_hack_delay_start": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_hero_god_mode": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_hero_multiple_kill_time": {
        "default_value": "18",
        "flags": [
            "gamedll"
        ]
    },
    "dota_hero_undying_max_zombies": {
        "default_value": "64",
        "flags": [
            "gamedll"
        ],
        "help_text": "Maximum amount of zombies that can be spawned."
    },
    "dota_heropicker_ad_select_time": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_alldraft_banning_time": {
        "default_value": "15.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_heropicker_alldraft_random_time": {
        "default_value": "11.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_heropicker_alldraft_select_time": {
        "default_value": "26.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_heropicker_ap_select_time": {
        "default_value": "75.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_ar_select_time": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_ardm_select_time": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_fh_select_time": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_sd_select_time": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_select_penalty_cost": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_select_penalty_time": {
        "default_value": "30.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_heropicker_tutorial_select_time": {
        "default_value": "599.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_hide_wearables": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "If set, wearables (default body parts) will be hidden. This is for the item icon editor."
    },
    "dota_ice_grip": {
        "default_value": "500.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_ice_grip_skates": {
        "default_value": "2000.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_ice_slide": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_idle_acquire": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_idle_rare_interval_max": {
        "default_value": "25",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_idle_rare_interval_min": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_idle_time": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long a player needs to be idle before he counts as disconnected."
    },
    "dota_inventory_combine_ground_items_radius": {
        "default_value": "200",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_item_free_disassemble_interval": {
        "default_value": "10.0f",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_item_fullprice_buyback_interval": {
        "default_value": "10.0f",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_item_suggestion_time": {
        "default_value": "30",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Window for item suggestions."
    },
    "dota_killcam_history_time": {
        "default_value": "20",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_lane_detection_distance": {
        "default_value": "1200.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_lane_detection_duration": {
        "default_value": "600",
        "flags": [
            "gamedll"
        ]
    },
    "dota_lane_detection_interval": {
        "default_value": "5.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_last_hit_multiple_kill_time": {
        "default_value": "8",
        "flags": [
            "gamedll"
        ]
    },
    "dota_lenient_idle_time": {
        "default_value": "480",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long a player needs to be idle before he counts as disconnected during the end stages of the game."
    },
    "dota_local_event_difficulty": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_local_event_enable": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_local_event_game": {
        "default_value": "holdout",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_local_event_map": {
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_local_map_strategy_time": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_match_signout_timeout": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_max_courier_purchase_limit": {
        "default_value": "24",
        "flags": [
            "gamedll"
        ],
        "help_text": "Maximum allowed couriers per player (purchasing disallowed when reached)"
    },
    "dota_max_disconnected_time": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long a player needs to be disconnected before he counts as a leaver and gets punished."
    },
    "dota_max_hero_select_time": {
        "default_value": "390",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long a player has to choose their hero before being marked as AFK."
    },
    "dota_max_invade_path_length": {
        "default_value": "1000",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_max_pets": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Number of pets allowed in a single match."
    },
    "dota_max_physical_items_drop_limit": {
        "default_value": "6",
        "flags": [
            "gamedll"
        ],
        "help_text": "Maximum allowed physical items on ground per player for split items (tango/wards)"
    },
    "dota_max_physical_items_purchase_limit": {
        "default_value": "24",
        "flags": [
            "gamedll"
        ],
        "help_text": "Maximum allowed physical items per player (purchasing disallowed when reached)"
    },
    "dota_metadata_min_games_for_avg_stats": {
        "default_value": "2",
        "flags": [
            "gamedll"
        ],
        "help_text": "Games required on a hero for average KDA to be valid and calibrated"
    },
    "dota_modifier_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_music_battle_debug": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_battle_distance": {
        "default_value": "1000",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_battle_duration": {
        "default_value": "2.5",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_battle_enable": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_battle_pre_time": {
        "default_value": "2",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_battle_rest_time": {
        "default_value": "10",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_battle_weight_trigger": {
        "default_value": "40",
        "flags": [
            "gamedll"
        ]
    },
    "dota_music_enable_spectator_mode": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_music_gank_enemy_timer": {
        "default_value": "2.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_neutral_initial_spawn_delay": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Time after 0:00 to spawn the first wave of creeps."
    },
    "dota_neutral_spacing_radius": {
        "default_value": "100.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Range that neutrals will be spaced apart from each other."
    },
    "dota_neutral_spawn_fx_timing": {
        "default_value": "2.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Time before neutral spawns to play effects."
    },
    "dota_neutral_spawn_interval": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Time between neutral creep camp respawns, starting at 1:00."
    },
    "dota_npc_creep_pushback_enabled": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_height_scale": {
        "default_value": "100",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_max_damage_amount": {
        "default_value": "500",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_max_damage_force": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_max_random_force": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_max_time": {
        "default_value": "0.6",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_min_damage_amount": {
        "default_value": "100",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_min_damage_force": {
        "default_value": "0.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_min_random_force": {
        "default_value": "0.9",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_min_time": {
        "default_value": "0.4",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_random_yaw": {
        "default_value": "2",
        "flags": [
            "gamedll"
        ]
    },
    "dota_npc_creep_pushback_scale": {
        "default_value": "200",
        "flags": [
            "gamedll"
        ]
    },
    "dota_ogs_report_interval": {
        "default_value": "120",
        "flags": [
            "gamedll"
        ],
        "help_text": "When in 'heartbeat' dota_ogs_report_vprof mode, the number of seconds between reports"
    },
    "dota_ogs_report_vprof": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Control reporting of vprof data to ogs. 0: no report, 1: database report at end of game, 2: report every dota_ogs_report_interval seconds, 11: like 1, but fake report to console (for testing), 12: like 2, but fake report to console (for testing)."
    },
    "dota_ogs_report_vprof_fraction": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If nonzero, then only one in this many servers will run vprof if dota_ogs_report_vprof is set."
    },
    "dota_ogs_snapshot_interval": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ]
    },
    "dota_orders_update_bots_immediately": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_overhead_damage_threshold_percent": {
        "default_value": "15",
        "flags": [
            "gamedll"
        ]
    },
    "dota_overkill_threshold": {
        "default_value": "0.33",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pause_cooldown": {
        "default_value": "2.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pause_cooldown_time": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of seconds before a player is allowed to pause again"
    },
    "dota_pause_count": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of times a player is allowed to pause the game"
    },
    "dota_pause_countdown": {
        "default_value": "3.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pause_force_unpause_time": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of seconds after which the game will automatically unpause"
    },
    "dota_pause_game_pause_silently": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_pause_same_team_resume_time": {
        "default_value": "5",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of seconds resuming is restricted to the same team, after that either team can pause"
    },
    "dota_pause_same_team_resume_time_disconnected": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of seconds resuming is restricted to the same team if someone disconnected, after that either team can pause"
    },
    "dota_pet_aatest_threat": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_allow_infront": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_creepdist_maxthreat": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_creepdist_minthreat": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_decay_rate": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_dist_cone": {
        "default_value": "50",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_dist_max": {
        "default_value": "400",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_dist_min": {
        "default_value": "200",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_dist_range": {
        "default_value": "400",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_dmg_threshold_panic": {
        "default_value": "200.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_emote_maxtime": {
        "default_value": "30.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_emote_mintime": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_fleedir_persist_time": {
        "default_value": "2.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_herodist_maxthreat": {
        "default_value": "0.5",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_herodist_minthreat": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_herodist_radius": {
        "default_value": "1024",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_itemcarry": {
        "default_value": "120.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_priorthreat_to_vanish": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_reposition_maxtime": {
        "default_value": "7",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_reposition_mintime": {
        "default_value": "4",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_return_threshold": {
        "default_value": "0.2",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_return_threshold_time": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_threat_rate": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_pet_threat_time": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_poor_network_detection_debug_level": {
        "default_value": "2",
        "flags": [
            "gamedll"
        ],
        "help_text": "Spew verbosity for poor network condition detection"
    },
    "dota_poor_network_detection_loss_pct": {
        "default_value": ".5",
        "flags": [
            "gamedll"
        ],
        "help_text": "Packet loss threshold (0...1) for declaring a QoS stat interval to be 'bad'"
    },
    "dota_poor_network_detection_max_intervals_player": {
        "default_value": "5",
        "flags": [
            "gamedll"
        ],
        "help_text": "Max number of bad intervals to count for a player"
    },
    "dota_poor_network_detection_min_intervals_player": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ],
        "help_text": "Player must have at least N bad intervals to count"
    },
    "dota_poor_network_detection_num_intervals_team": {
        "default_value": "11",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of QoS stats intervals that must be 'bad' on each team."
    },
    "dota_poor_network_detection_num_intervals_total": {
        "default_value": "25",
        "flags": [
            "gamedll"
        ],
        "help_text": "Number of QoS stats intervals that must be 'bad' over the whole match."
    },
    "dota_post_game_report_time": {
        "default_value": "600",
        "flags": [
            "gamedll"
        ],
        "help_text": "Time after the signout completes that we can still report and commend players, given the lobby id"
    },
    "dota_post_game_survey_player_count": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ],
        "help_text": "The first N player id slots will be surveyed for match quality"
    },
    "dota_postgame_finish_replay_time": {
        "default_value": "15",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long to wait after the end scoreboard panel to finish the replay"
    },
    "dota_privatebeta_teamswap": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_projection_enabled_ti6": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive"
        ]
    },
    "dota_quit_after_game": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Quit after a game is completed, do not hibernate"
    },
    "dota_quit_on_hibernate_after_lobby": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Always terminate after receiving a lobby, do not rehibernate"
    },
    "dota_random_strength": {
        "default_value": "0.35",
        "flags": [
            "gamedll"
        ]
    },
    "dota_realtime_stat_keyframe_interval_s": {
        "default_value": "10.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "How often the server generates a keyframe of realtime stats"
    },
    "dota_realtime_stat_update_interval_s": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "How often the server updates internal game state and checks whether it should update the GC with realtime stats"
    },
    "dota_reconnect_idle_buffer_time": {
        "default_value": "45",
        "flags": [
            "gamedll"
        ],
        "help_text": "How much extra time the player has after reconnecting before he gets marked as AFK."
    },
    "dota_recorder_use_default_items": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Use default items only when recording heroes."
    },
    "dota_replay_upload_script": {
        "default_value": "upload_replay.py",
        "flags": [
            "gamedll"
        ],
        "help_text": "Name of the script used to upload replay files"
    },
    "dota_restrict_partner_type_chat": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Disallow chat between certain partner types"
    },
    "dota_roshan_upgrade_rate": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "dota_select_scale": {
        "default_value": "0.85",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_send_courier_killed": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_server_allow_custom_games": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Where this server makes itself available to host custom games:  0 = both regular and custom, 1 = regular only, 2 = custom only"
    },
    "dota_server_projection_fow_check": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_server_projection_spectator_only": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_server_wait_for_lobby": {
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_sf_game_end_delay": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Delay before the end game panel animation (XP + scoreboard) starts once a game is ended"
    },
    "dota_show_heightmap": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_show_nav_obstructions": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_show_object_obstructions": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_special_attack_delay": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_spectator_graph_interval": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Seconds between each graph update.  Each update will update one stat for one player."
    },
    "dota_spectator_graph_networking_enabled": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "0 to disable graph data networking for perf comparisons."
    },
    "dota_spectator_graph_networking_override": {
        "default_value": "0.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "1 to enable graph data networking for all clients."
    },
    "dota_spectator_graph_per_player_stats": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set to enable creation and networking of per player stats."
    },
    "dota_spectator_graph_send_interval": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Seconds between each graph update and tranmission."
    },
    "dota_spectator_inventory_snapshot_interval": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "Seconds between inventory snapshots"
    },
    "dota_speech_emotes": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set 0 to disable emotes."
    },
    "dota_speech_hardcoded_respeak_delay": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Certain speech concepts will not be said more than once per (n) seconds. Set to 0 to disable."
    },
    "dota_speech_missinglane_call_interval": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Bots will call 'missing' on a lane no more than once per this many seconds."
    },
    "dota_speech_missinglane_call_threshold": {
        "default_value": "8",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Bots will call 'missing' on a lane if an opponent has been gone this many seconds."
    },
    "dota_speech_mute_time": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_speech_proximity_interval": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Once per (n) seconds, one hero will poll for TLK_ALLY_NEARBY. Because there are ten heroes this means each hero will poll once per n*10 seconds. Set 0 to disable altogether."
    },
    "dota_speech_proximity_radius": {
        "default_value": "500",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Heroes nearer than this distance will poll for the TLK_ALLY_NEARBY concept."
    },
    "dota_speech_proximity_radius_enemy": {
        "default_value": "1000",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Enemy heroes nearer than this distance will poll for the TLK_ENEMY_NEARBY concept."
    },
    "dota_speech_shop_dawdle_interval": {
        "default_value": "15",
        "flags": [
            "gamedll"
        ],
        "help_text": "Play 'dawdling' line from shopkeeper after hero has been in shop this long."
    },
    "dota_speech_shop_enter_interval": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "At least this many seconds must pass between shopkeeper greeting someone to his shop."
    },
    "dota_speech_shopkeeper": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Enable or disable shopkeepers' speech."
    },
    "dota_spew_connected_players": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If enabled, server will spew connected player GC updates\n"
    },
    "dota_start_ai_game": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_statmanager_debug": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Enables debug spew for the stat manager. 0 = off, 1 = on, 2 = verbose."
    },
    "dota_suggest_disable": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_item_sequence_allow_threshold": {
        "default_value": "0.02",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_item_sequence_dupe_multiplier": {
        "default_value": "0.3",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_item_sequence_other_option_multiplier": {
        "default_value": "0.25",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_item_sequence_threshold_full": {
        "default_value": "15",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_item_sequence_threshold_start": {
        "default_value": "6",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_item_threshold": {
        "default_value": "0.01",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_lane_trilane_penalty": {
        "default_value": "0.8",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_pregame_items_reduction": {
        "default_value": "0.9",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_pregame_items_threshold": {
        "default_value": "0.1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_spew_abilities": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_spew_items": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_spew_lanes": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_spew_pregame_items": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_spew_win_probability": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_spew_win_probability_chat": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suggest_win_probability_interval": {
        "default_value": "5.0",
        "flags": [
            "gamedll"
        ]
    },
    "dota_suppress_invalid_orders": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Don't log invalid orders"
    },
    "dota_surrender_on_disconnect": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "If enabled, a team will surrender if all players on that team disconnect"
    },
    "dota_surrender_timeout": {
        "default_value": "360",
        "flags": [
            "gamedll"
        ],
        "help_text": "Delay after an entire team has disconnected before timing the game out."
    },
    "dota_surrender_timeout_abandoner": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "Delay after an entire team has disconnected before timing the game out when someone has abandoned."
    },
    "dota_surrender_timeout_all_abandoned": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ],
        "help_text": "Delay after an entire team has officially left the game (not just disconnected from the server) before timing the game out."
    },
    "dota_sv_ogs_itemevents": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "When enabled, this will handle logging to ogs of item events, otherwise it will omit this logging"
    },
    "dota_teamscore_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_test_tp_particle_team": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_ti7_teams_tp_effects": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "clientdll"
        ]
    },
    "dota_time_of_day_rate": {
        "default_value": "0.00208",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Rate at which time of day changes relative to game seconds"
    },
    "dota_timed_hero_stats_initial_entry_time": {
        "default_value": "120.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "The initial time offset before we get the values, this has the effect of not adding a 0 entry and adding an actual early game valid entry"
    },
    "dota_timed_hero_stats_interval": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ]
    },
    "dota_turbo_ad_creeps_melee_interval_minutes": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_melee_num_intervals": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_melee_start_minutes": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_ranged_interval_minutes": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_ranged_num_intervals": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_ranged_start_minutes": {
        "default_value": "25",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_siege_interval_minutes": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_siege_num_intervals": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_creeps_siege_start_minutes": {
        "default_value": "30",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_gold_scale": {
        "default_value": "1.5",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_rubber_band_max_player_lead": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_rubber_band_min_player_lead": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_turbo_ad_xp_scale": {
        "default_value": "1.25",
        "flags": [
            "gamedll",
            "hidden"
        ]
    },
    "dota_tutorial_actionpanel": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_camera_location_dist": {
        "default_value": "500.f",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_debug": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_disable_bot_situational_items": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_force_bot_defend": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_force_learn_ability": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_game": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_heroselection": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_move_location_dist": {
        "default_value": "225.f",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_percent_bot_exp_decrease": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_percent_damage_decrease": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Percentage decrease to apply on damage on the player character.",
        "max_value": 100,
        "min_value": 0
    },
    "dota_tutorial_prevent_exp_gain": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_prevent_start": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_see_enemy": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_tutorial_show_tower_damage": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_skip_pregame": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_start_lesson": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_state_change_delay": {
        "default_value": "2.f",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_tutorial_stop_daynightcycle": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_tutorial_usemodifierforanim": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "dota_unit_alert_radius": {
        "default_value": "500",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_alert_range": {
        "default_value": "1800",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_anger_cooldown": {
        "default_value": "3.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_anger_duration": {
        "default_value": "2.3",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_anger_radius": {
        "default_value": "500",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_blocked_angle_threshold": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_blocked_look_ahead_angle_threshold": {
        "default_value": "0.7",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_blocked_wait_time": {
        "default_value": "0.15",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_blocked_wait_time_long": {
        "default_value": "0.4",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_blocked_wait_time_mid": {
        "default_value": "0.3",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_cache_npc_searches": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Whether to reuse a unit's search cache every frame to avoid obstruction manager queries."
    },
    "dota_unit_damage_event_window": {
        "default_value": "2.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Window (in seconds) that we track damage events for future health value extrapolation."
    },
    "dota_unit_debug_acquisition_range": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shows the acquisition range for selected units (Green circle)"
    },
    "dota_unit_debug_attack": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_debug_attack_range": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shows the attack range for selected units (Red circle)"
    },
    "dota_unit_debug_vision_range": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shows the vision range for selected units (Teal circle)"
    },
    "dota_unit_draw_paths": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_lean_angle": {
        "default_value": "90",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_unit_lean_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_unit_lean_rate": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_unit_short_path_search_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_show_bounding_radius": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unit_show_collision_radius": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unpause_countdown": {
        "default_value": "3.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_unpause_mass_disconnect_cooldown": {
        "default_value": "86400.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dota_update_connected_players_check_time": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "How often the server should check if it needs to update the GC in seconds"
    },
    "dota_update_connected_players_send_time": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Minimum send interval: Don't check for lobby vs game state discrepancies if we've sent a message within N seconds"
    },
    "dota_update_connected_players_urgency_building_state": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: tower state changed"
    },
    "dota_update_connected_players_urgency_connect": {
        "default_value": "30.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: player connect"
    },
    "dota_update_connected_players_urgency_disconnect_consequences": {
        "default_value": "5.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: player disconnects, relevant leaver actions are predicted"
    },
    "dota_update_connected_players_urgency_disconnect_noconsequences": {
        "default_value": "30.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: player disconnects, no relevant leaver actions predicted"
    },
    "dota_update_connected_players_urgency_gamestate_timeout": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: We send a game state change, but lobby hasn't acknowledged it"
    },
    "dota_update_connected_players_urgency_heartbeat": {
        "default_value": "1800",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: nothing has changed and lobby appears to be accurate"
    },
    "dota_update_connected_players_urgency_herochanged": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: player changer their hero"
    },
    "dota_update_connected_players_urgency_kills": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: kill counts changed"
    },
    "dota_update_connected_players_urgency_mass_disconnect": {
        "default_value": "3.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: mass disconnection has been detected"
    },
    "dota_update_connected_players_urgency_spectator_count": {
        "default_value": "60.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "max send interval: spectator count changed"
    },
    "dota_update_gc_connection_check_count": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "How many tries we check if the GC is still connected before terminating due to no response"
    },
    "dota_update_gc_connection_check_time": {
        "default_value": "1200",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "How often the server should check the GC is still connected"
    },
    "dota_update_gc_server_info": {
        "default_value": "600",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "How often the server should check if it needs to update the GC in seconds"
    },
    "dota_upload_item_purchase_history_duration_threshold": {
        "default_value": "1200",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "match duration below which we will not upload item purchases"
    },
    "dota_upload_item_purchase_history_mmr_threshold": {
        "default_value": "1000",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "MMR below which we will not upload item purchases"
    },
    "dota_upload_match_state_history_duration_threshold": {
        "default_value": "900",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "match duration below which we will not upload item purchases"
    },
    "dota_upload_match_state_history_interval": {
        "default_value": "300",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "interval in seconds that we track game states"
    },
    "dota_upload_match_state_history_mmr_threshold": {
        "default_value": "2000",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "MMR below which we will not upload game state history"
    },
    "dota_use_heightmap": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to 0 to disable using heightmap when tracing vertical rays"
    },
    "dota_wait_for_players_battle_cup_present_time": {
        "default_value": "10",
        "flags": [
            "gamedll"
        ],
        "help_text": "Time to stay after waiting for players succeeds when displaying battle cup winners"
    },
    "dota_wait_for_players_completed_delay": {
        "default_value": "2",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long to stay at the waiting-for-players UI after all players have loaded"
    },
    "dota_wait_for_players_failed_delay": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long to stay at the waiting-for-players UI after all players have loaded"
    },
    "dota_wait_for_players_to_load": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "If set, hero picking will be delayed until all players have loaded."
    },
    "dota_wait_for_players_to_load_streaming_timeout": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "Game will start after this time, even if all players haven't loaded yet"
    },
    "dota_wait_for_players_to_load_timeout": {
        "default_value": "180",
        "flags": [
            "gamedll"
        ],
        "help_text": "Game will start after this time, even if all players haven't loaded yet"
    },
    "dota_wearables_clientside": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_winter_ambientfx": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_workshoptest": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "dota_workshoptest_modelnew0": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelnew1": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelnew2": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelorg0": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelorg1": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelorg2": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable0": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable1": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable10": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable11": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable12": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable13": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable14": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable15": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable2": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable3": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable4": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable5": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable6": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable7": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable8": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_workshoptest_modelwearable9": {
        "flags": [
            "gamedll"
        ]
    },
    "dp_drag": {
        "default_value": "0.9",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dp_pull": {
        "default_value": "0.3",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dp_radius": {
        "default_value": "100",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dp_spirits": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "dsp_automatic": {
        "default_value": "0",
        "flags": [
            "demo"
        ]
    },
    "dsp_db_min": {
        "default_value": "80",
        "flags": [
            "demo"
        ]
    },
    "dsp_db_mixdrop": {
        "default_value": "0.5",
        "flags": [
            "demo"
        ]
    },
    "dsp_dist_max": {
        "default_value": "1440.0",
        "flags": [
            "cheat",
            "demo"
        ]
    },
    "dsp_dist_min": {
        "default_value": "0.0",
        "flags": [
            "cheat",
            "demo"
        ]
    },
    "dsp_mix_max": {
        "default_value": "0.8",
        "flags": [
            "demo"
        ]
    },
    "dsp_mix_min": {
        "default_value": "0.2",
        "flags": [
            "demo"
        ]
    },
    "dsp_off": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "dsp_vol_2ch": {
        "default_value": "1.0",
        "flags": [
            "demo"
        ]
    },
    "dsp_vol_4ch": {
        "default_value": "0.5",
        "flags": [
            "demo"
        ]
    },
    "dsp_vol_5ch": {
        "default_value": "0.5",
        "flags": [
            "demo"
        ]
    },
    "dsp_volume": {
        "default_value": "0.8",
        "flags": [
            "archive",
            "demo"
        ]
    },
    "dti_report_stddev_threshold": {
        "default_value": "1.0",
        "flags": [
            "release"
        ],
        "help_text": "For network encoding stats, provide a notes field if field change count is above this many standard deviations for the average field change counts for the serializer."
    },
    "engine_experimental_drop_frame_ticks": {
        "default_value": "0",
        "help_text": "Experimental feature to skip ticks when the client is catching up in low frame rate situations."
    },
    "engine_max_framerate": {
        "default_value": "0"
    },
    "engine_max_resource_system_update_time": {
        "default_value": "5"
    },
    "engine_no_focus_sleep": {
        "default_value": "20",
        "flags": [
            "archive"
        ]
    },
    "engine_no_focus_sleep_vconsole_suppress": {
        "default_value": "1",
        "help_text": "When VConsole is in the foreground, don't trigger engine_no_focus_sleep behavior"
    },
    "engine_platform_name_extended": {
        "help_text": "Platform the engine is running on."
    },
    "engine_rendersystem_init": {
        "help_text": "Rendersystem option requested (changing this does not change the rendersystem)."
    },
    "engine_rendersystem_used": {
        "help_text": "Rendersystem option in use (changing this does not change the rendersystem)."
    },
    "engine_show_frame_multiple_ticks": {
        "default_value": "0"
    },
    "engine_show_frame_pacing": {
        "default_value": "0"
    },
    "engine_show_frame_ticks": {
        "default_value": "0"
    },
    "ent_debugkeys": {
        "flags": [
            "gamedll"
        ]
    },
    "ent_joint_axis_size": {
        "default_value": "4",
        "flags": [
            "gamedll"
        ]
    },
    "ent_joint_names": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "ent_joint_only_ik_joints": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "ent_messages_draw": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Visualizes all entity input/output activity."
    },
    "ent_pivot_size": {
        "default_value": "20",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ]
    },
    "ent_show_contexts": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Show entity contexts in ent_text display"
    },
    "ent_skeleton_only_ik_joints": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "ent_steadystate_batchsize": {
        "default_value": "20",
        "flags": [
            "gamedll"
        ],
        "help_text": "Max number of entities to transmit to player"
    },
    "ent_steadystate_cooldown": {
        "default_value": "5.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Time in seconds after player state changes before steady state changes can occur."
    },
    "ent_steadystate_delay": {
        "default_value": "5",
        "flags": [
            "gamedll"
        ],
        "help_text": "Time in seconds without network state changes until an entity is considered for trickle updates"
    },
    "ent_steadystate_enable": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "ent_steadystate_interval": {
        "default_value": "0.1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Rate at which entities can be trickled to players"
    },
    "ent_text_flags_active": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ]
    },
    "ent_text_no_name_really_i_mean_it": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "entity_log_load_unserialize": {
        "default_value": "0",
        "help_text": "Output unserialization of entities on map load. 0 - off, 1 - client/server, 2 - server, 3 - client"
    },
    "execute_command_every_frame": {
        "flags": [
            "cheat"
        ]
    },
    "filesystem_buffer_size": {
        "default_value": "0",
        "help_text": "Size of per file buffers. 0 for none"
    },
    "filesystem_max_stdio_read": {
        "default_value": "16"
    },
    "filesystem_native": {
        "default_value": "1",
        "help_text": "Use native FS or STDIO"
    },
    "filesystem_report_buffered_io": {
        "default_value": "0"
    },
    "filesystem_unbuffered_io": {
        "default_value": "1"
    },
    "fire_absorbrate": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ]
    },
    "fire_dmgbase": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "fire_dmginterval": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "fire_dmgscale": {
        "default_value": "0.1",
        "flags": [
            "gamedll"
        ]
    },
    "fire_extabsorb": {
        "default_value": "5",
        "flags": [
            "gamedll"
        ]
    },
    "fire_extscale": {
        "default_value": "12",
        "flags": [
            "gamedll"
        ]
    },
    "fire_growthrate": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "fire_heatscale": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "fire_incomingheatscale": {
        "default_value": "0.1",
        "flags": [
            "gamedll"
        ]
    },
    "fire_maxabsorb": {
        "default_value": "50",
        "flags": [
            "gamedll"
        ]
    },
    "fish_dormant": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Turns off interactive fish behavior. Fish become immobile and unresponsive."
    },
    "flex_cycler_think_interval": {
        "default_value": "0.0",
        "flags": [
            "gamedll"
        ]
    },
    "flex_expression": {
        "default_value": "-",
        "flags": [
            "gamedll"
        ]
    },
    "flex_talk": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "fog_clipmap_update": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "fog_clipmaps_enabled": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "fog_color": {
        "default_value": "-1 -1 -1",
        "flags": [
            "cheat"
        ]
    },
    "fog_disable": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "fog_enable": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable fog"
    },
    "fog_enable_jitter": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "fog_enable_stereo": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "fog_hdrcolorscale": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "fog_override": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Overrides the map's fog settings (-1 populates fog_ vars with map's values)"
    },
    "fog_override_enable": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Use fog_override convars instead of world fog data"
    },
    "fog_override_end": {
        "default_value": "3500",
        "flags": [
            "cheat"
        ]
    },
    "fog_override_exponent": {
        "default_value": "2",
        "flags": [
            "cheat"
        ]
    },
    "fog_override_max_density": {
        "default_value": "0.4",
        "flags": [
            "cheat"
        ]
    },
    "fog_override_start": {
        "default_value": "1000",
        "flags": [
            "cheat"
        ]
    },
    "fog_volume_debug": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If enabled, prints diagnostic information about the current fog volume"
    },
    "fow_degree_fade_in_rate1": {
        "default_value": "4.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW area fade in rate #1 (greater than 1 is faster)"
    },
    "fow_degree_fade_in_rate2": {
        "default_value": "4.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW area fade in rate #2 (greater than 1 is faster)"
    },
    "fow_degree_fade_in_rate_midpoint": {
        "default_value": "0.5",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW area fade out rate midpoint (0.0 - 1.0)"
    },
    "fow_degree_fade_out_rate1": {
        "default_value": "4.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW area fade out rate #1 (greater than 1 is faster)"
    },
    "fow_degree_fade_out_rate2": {
        "default_value": "4.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW area fade out rate #2 (greater than 1 is faster)"
    },
    "fow_degree_fade_out_rate_midpoint": {
        "default_value": "0.5",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW area fade out rate (0.0 - 1.0)"
    },
    "fow_entity_reveal_unseen_radius": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Radius in world space to reveal around all viewers from unseen state, regardless of visibility."
    },
    "fow_entity_reveal_unseen_time": {
        "default_value": "0.5",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Seconds over which an unseen area is revealed by radius checks, 0 is instant."
    },
    "fow_server_show_stats": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "fow_server_viz_flags": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "hidden",
            "cheat"
        ]
    },
    "fow_simd_unseen": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "fow_tile_update_time": {
        "default_value": "0.2",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "FoW tile update time."
    },
    "fps_max": {
        "default_value": "120",
        "flags": [
            "archive"
        ],
        "help_text": "Frame rate limiter"
    },
    "fs_fake_read_delay_ms": {
        "default_value": "0",
        "help_text": "Add N ms of delay to every low-level read operation, to simulate a slow disk"
    },
    "fs_monitor_read_from_pack": {
        "default_value": "0",
        "help_text": "0:Off, 1:Any, 2:Sync only"
    },
    "fs_report_long_reads": {
        "default_value": "0",
        "help_text": "0:Off, 1:All (for tracking accumulated duplicate read times), >1:Microsecond threashold"
    },
    "fs_report_sync_opens": {
        "default_value": "0",
        "help_text": "0:Off, 1:Always, 2:Not during load"
    },
    "fs_warning_mode": {
        "default_value": "0",
        "help_text": "0:Off, 1:Warn main thread, 2:Warn other threads"
    },
    "func_break_max_pieces": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "archive",
            "replicated"
        ]
    },
    "func_break_reduction_factor": {
        "default_value": ".5",
        "flags": [
            "gamedll"
        ]
    },
    "func_breakdmg_bullet": {
        "default_value": "0.5",
        "flags": [
            "gamedll"
        ]
    },
    "func_breakdmg_club": {
        "default_value": "1.5",
        "flags": [
            "gamedll"
        ]
    },
    "func_breakdmg_explosive": {
        "default_value": "1.25",
        "flags": [
            "gamedll"
        ]
    },
    "func_nav_blocker_obstacle": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If true, a func_nav_blocker will create a navigation avoidance obstacle."
    },
    "g_Language": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "g_debug_angularsensor": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "g_debug_constraint_sounds": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Enable debug printing about constraint sounds."
    },
    "g_debug_doors": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "g_debug_npc_vehicle_roles": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "g_debug_ragdoll_removal": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "g_debug_transitions": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set to 1 and restart the map to be warned if the map has no trigger_transition volumes. Set to 2 to see a dump of all entities & associated results during a transition."
    },
    "g_debug_vehiclebase": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "g_debug_vehicleexit": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "g_debug_vehiclesound": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "g_physics_use_block_solver": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Use block solving for constraint entities"
    },
    "g_ragdoll_important_maxcount": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "g_ragdoll_maxcount": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "gameevents_showeventlisteners": {
        "default_value": "0",
        "help_text": "Show listening addition/removals"
    },
    "gameevents_showevents": {
        "default_value": "0",
        "help_text": "Dump game events to console. (1 = Show Signaling, 2 = Show Posting also)."
    },
    "gamestats_file_output_directory": {
        "flags": [
            "gamedll"
        ],
        "help_text": "When -gamestatsfileoutputonly is specified, file will be emitted here instead of to modpath\n"
    },
    "gc_secret_key": {
        "flags": [
            "gamedll",
            "protected"
        ],
        "help_text": "Secret key for authenticating with the GC\n"
    },
    "hl2_episodic": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "hl_dissolve_all_dropped_weapons": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "host_force_frametime_to_equal_tick_interval": {
        "default_value": "0"
    },
    "host_framerate": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Set to lock per-frame time elapse."
    },
    "host_limitlocal": {
        "default_value": "0",
        "help_text": "Apply cl_cmdrate and cl_updaterate to loopback connection"
    },
    "host_showcachemiss": {
        "default_value": "0",
        "help_text": "Print a debug message when the client or server cache is missed."
    },
    "host_timescale": {
        "default_value": "1.0",
        "flags": [
            "replicated",
            "cheat"
        ],
        "help_text": "Prescale the clock by this amount."
    },
    "hostfile": {
        "default_value": "host.txt",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "The HOST file to load."
    },
    "hostip": {
        "flags": [
            "release"
        ],
        "help_text": "Host game server ip"
    },
    "hostname": {
        "flags": [
            "release"
        ],
        "help_text": "Hostname for server."
    },
    "hostport": {
        "default_value": "PORT_SERVER",
        "flags": [
            "release"
        ],
        "help_text": "Host game server port"
    },
    "ik_constraints_enabled": {
        "default_value": "1"
    },
    "ik_debug_all_chains_post_update": {
        "default_value": "0"
    },
    "ik_debug_all_chains_pre_update": {
        "default_value": "0"
    },
    "ik_debug_all_chains_pre_update_post_tilt": {
        "default_value": "0"
    },
    "ik_debug_all_chains_unique_color_per_chain": {
        "default_value": "0"
    },
    "ik_debug_constraints": {
        "default_value": "0"
    },
    "ik_debug_drawfixuprotation": {
        "default_value": "0"
    },
    "ik_debug_fabrik_backwards_enabled": {
        "default_value": "1"
    },
    "ik_debug_fabrik_forwards_enabled": {
        "default_value": "1"
    },
    "ik_debug_groundrule": {
        "default_value": "0"
    },
    "ik_debug_groundrule_virtual_ground": {
        "default_value": "0"
    },
    "ik_debug_groundtrace_requests": {
        "default_value": "0"
    },
    "ik_debug_lock_force_lock_rotation_alpha": {
        "default_value": "-1"
    },
    "ik_debug_locks": {
        "default_value": "0"
    },
    "ik_debug_neutral_ref_pose": {
        "default_value": "0"
    },
    "ik_debug_perlin_solver": {
        "default_value": "0"
    },
    "ik_debug_planetilt": {
        "default_value": "0"
    },
    "ik_debug_speedlimit": {
        "default_value": "0"
    },
    "ik_debug_targets": {
        "default_value": "0"
    },
    "ik_debugrule_degreespeed": {
        "default_value": "0.1"
    },
    "ik_debugrule_distance": {
        "default_value": "100"
    },
    "ik_debugrule_forcedegree": {
        "default_value": "87"
    },
    "ik_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Enable IK."
    },
    "ik_enable_locks": {
        "default_value": "1"
    },
    "ik_fabrik_iterations": {
        "default_value": "6"
    },
    "ik_force_lock_value": {
        "default_value": "-1"
    },
    "ik_force_masterblend_amount": {
        "default_value": "-1"
    },
    "ik_force_target_orientation_speedlimit": {
        "default_value": "-1"
    },
    "ik_force_target_position_speedlimit": {
        "default_value": "-1"
    },
    "ik_groundrule_max_normal_degrees_from_up": {
        "default_value": "30"
    },
    "ik_hinge_constraint_enable": {
        "default_value": "1"
    },
    "ik_locks_acquire_threshold": {
        "default_value": "0.9"
    },
    "ik_locks_breaking_enabled": {
        "default_value": "1"
    },
    "ik_locks_forceunlock_expire_time": {
        "default_value": "0.5"
    },
    "ik_locks_release_threshold": {
        "default_value": "0.1"
    },
    "ik_planetilt_enable": {
        "default_value": "1"
    },
    "ik_solve_enabled": {
        "default_value": "1"
    },
    "ik_speedlimits_enabled": {
        "default_value": "1"
    },
    "ik_virtual_groundplanes_tracediff_threshold": {
        "default_value": "1.0"
    },
    "input_button_code_is_scan_code": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Bind keys based on keyboard position instead of key name"
    },
    "input_forceuser": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ],
        "help_text": "Force user input to this split screen player."
    },
    "instant_replay": {
        "default_value": "1",
        "help_text": "Enable instant replay recording."
    },
    "instant_replay_history_limit": {
        "default_value": "120",
        "help_text": "Maximum amount of minutes to save history (0 is unlimited)."
    },
    "instant_replay_history_limit_low": {
        "default_value": "10",
        "help_text": "Maximum amount of minutes to save history on low memory (32 bit) systems (0 is unlimited)."
    },
    "ip": {
        "flags": [
            "release"
        ],
        "help_text": "Overrides IP for multihomed hosts"
    },
    "items_game_use_gc_copy": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive",
            "replicated"
        ],
        "help_text": "If set, items_game.txt will be stomped by the GC."
    },
    "iv_debugbone": {
        "flags": [
            "release"
        ],
        "help_text": "Debug bone name for interpolation spew of CAnimationState."
    },
    "jpeg_quality": {
        "default_value": "90",
        "help_text": "Set jpeg screenshot quality. [1..100]",
        "max_value": 100,
        "min_value": 1
    },
    "labelled_debug_helper_arc_segments": {
        "default_value": "20"
    },
    "labelled_debug_helper_enabled": {
        "default_value": "1"
    },
    "labelled_debug_helper_scale": {
        "default_value": "1"
    },
    "labelled_debug_helper_show_position": {
        "default_value": "0"
    },
    "labelled_debug_helper_show_text": {
        "default_value": "1"
    },
    "light_priority_enabled": {
        "default_value": "1"
    },
    "light_priority_max_lights": {
        "default_value": "0"
    },
    "lightquery_debug_direct_lighting": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "lightquery_debug_indirect_lighting": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "lightquery_debug_indirect_lighting_fast": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "0 = standard sampling, 1 = fast sampling, 2 = ultra-fast sampling"
    },
    "lservercfgfile": {
        "default_value": "listenserver.cfg",
        "flags": [
            "gamedll"
        ]
    },
    "lua_assert_on_error": {
        "default_value": "0"
    },
    "mapcyclefile": {
        "default_value": "mapcycle.txt",
        "flags": [
            "gamedll"
        ],
        "help_text": "Name of the .txt file used to cycle the maps on multiplayer servers "
    },
    "mat_drawTitleSafe": {
        "default_value": "0",
        "help_text": "Enable title safe overlay"
    },
    "mat_fullbright": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "mat_luxels": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "mat_material_frameupdate_limit": {
        "default_value": "2",
        "help_text": "Maximum time in ms to spend initializing shaders for materials each frame."
    },
    "mat_shading_complexity": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Visualize shading complexity"
    },
    "mat_shading_complexity_color": {
        "default_value": "1.0 0.5 0.25",
        "flags": [
            "cheat"
        ]
    },
    "mat_shading_complexity_max_instruction_count": {
        "default_value": "1024",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_debug": {
        "default_value": "0"
    },
    "mat_tonemap_force_accelerate_exposure_down": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_average_lum_min": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ],
        "help_text": "Override. Old default was 3.0"
    },
    "mat_tonemap_force_log_lum_max": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_log_lum_min": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_max": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_min": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_percent_bright_pixels": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ],
        "help_text": "Override. Old value was 1.0"
    },
    "mat_tonemap_force_percent_target": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ],
        "help_text": "Override. Old default was 45."
    },
    "mat_tonemap_force_rate": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_scale": {
        "default_value": "0.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_force_use_alpha": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "mat_tonemap_uncap_exposure": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "match_post_url": {
        "flags": [
            "release"
        ]
    },
    "mem_incremental_compact_rate": {
        "default_value": ".5",
        "flags": [
            "cheat"
        ],
        "help_text": "Rate at which to attempt internal heap compaction"
    },
    "mem_test_each_frame": {
        "default_value": "0",
        "help_text": "Run heap check at end of every frame\n"
    },
    "mem_test_every_n_seconds": {
        "default_value": "0",
        "help_text": "Run heap check at a specified interval\n"
    },
    "mem_test_quiet": {
        "default_value": "0",
        "help_text": "Don't print stats when memtesting"
    },
    "mesh_calculate_curvature_smooth_invert": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "mesh_calculate_curvature_smooth_pass_count": {
        "default_value": "3",
        "flags": [
            "cheat"
        ]
    },
    "mesh_calculate_curvature_smooth_weight": {
        "default_value": "1.0",
        "flags": [
            "cheat"
        ]
    },
    "metamod_version": {
        "default_value": "1.11.0-dev+1095",
        "flags": [
            "sponly",
            "notify"
        ],
        "help_text": "Metamod:Source Version"
    },
    "mm_basedir": {
        "default_value": "addons/metamod",
        "flags": [
            "sponly"
        ],
        "help_text": "Metamod:Source Base Folder"
    },
    "mm_pluginsfile": {
        "default_value": "addons/metamod/metaplugins.ini",
        "flags": [
            "sponly"
        ],
        "help_text": "Metamod:Source Plugins File"
    },
    "motdfile": {
        "default_value": "motd.txt",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "The MOTD file to load."
    },
    "mouse_disableinput": {
        "default_value": "0",
        "help_text": "Set to disable mouse input"
    },
    "mp_allowNPCs": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_allowspectators": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "toggles whether the server allows spectator mode or not"
    },
    "mp_autocrosshair": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_chattime": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "amount of time players can chat after the game is over",
        "max_value": 120,
        "min_value": 1
    },
    "mp_clan_ready_signal": {
        "default_value": "ready",
        "flags": [
            "gamedll"
        ],
        "help_text": "Text that team leader from each team must speak for the match to begin"
    },
    "mp_clan_readyrestart": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If non-zero, game will restart once someone from each team gives the ready signal"
    },
    "mp_defaultteam": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "mp_fadetoblack": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "fade a player's screen to black when he dies"
    },
    "mp_falldamage": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_feetyawrate_max": {
        "default_value": "360",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "How many degrees per second that we can turn our feet or upper body when we're outside the max body yaw."
    },
    "mp_flashlight": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_footsteps": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_forcecamera": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Restricts spectator modes for dead players"
    },
    "mp_forcerespawn": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_fraglimit": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_friendlyfire": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "Allows team members to injure other members of their team"
    },
    "mp_restartgame": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If non-zero, game will restart in the specified number of seconds"
    },
    "mp_teamlist": {
        "default_value": "hgrunt;scientist",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_teamoverride": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "mp_teamplay": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "mp_timelimit": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "game time per map in minutes"
    },
    "mp_tournament": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ]
    },
    "mp_tournament_whitelist": {
        "default_value": "item_whitelist.txt",
        "flags": [
            "gamedll"
        ],
        "help_text": "Specifies the item whitelist file to use."
    },
    "mp_waitingforplayers_cancel": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set to 1 to end the WaitingForPlayers period."
    },
    "mp_waitingforplayers_restart": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set to 1 to start or restart the WaitingForPlayers period."
    },
    "mp_waitingforplayers_time": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "WaitingForPlayers time length in seconds"
    },
    "mp_weaponstay": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "muzzle_flash_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "nav_area_max_size": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Max area size created in nav generation"
    },
    "nav_area_res": {
        "default_value": "25.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Standard nav area minimum size"
    },
    "nav_avoid_obstacles": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_bfs_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_create_area_at_feet": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Anchor nav_begin_area Z to editing player's feet"
    },
    "nav_create_place_on_ground": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If true, nav areas will be placed flush with the ground when created by hand."
    },
    "nav_curve_alt": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_curve_iter": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_curve_lock": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_curve_max_step": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_curve_set": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_curve_step": {
        "default_value": "0.02",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_debug_blocked": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_displacement_test": {
        "default_value": "10000",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Checks for nodes embedded in displacements (useful for in-development maps)"
    },
    "nav_drag_selection_volume_zmax_offset": {
        "default_value": "32",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "The offset of the nav drag volume top from center"
    },
    "nav_drag_selection_volume_zmin_offset": {
        "default_value": "32",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "The offset of the nav drag volume bottom from center"
    },
    "nav_draw_area_bgcolor": {
        "default_value": "0 0 0 30",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "RGBA color to draw as the background color for nav areas while editing."
    },
    "nav_draw_area_vert_order": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_blocked": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_connected_area_radius": {
        "default_value": "1000",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_connections": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_hull_boundary": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_hull_support": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_indices": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_inset_margin": {
        "default_value": "0.2",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_limit": {
        "default_value": "300",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "The maximum number of areas to draw in edit mode"
    },
    "nav_draw_mesh": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_mesh_offset": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Vertical offset for drawing the mesh (useful for flat planes where the mesh is often a fixed offset from the physical ground"
    },
    "nav_draw_should_be_destroyed": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_show_light_intensity": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_split_by_obstacle_mgr": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_draw_vert_hotspots": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_edit": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set to one to interactively edit the Navigation Mesh. Set to zero to leave edit mode."
    },
    "nav_generate_compute_lighting": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If true, compute lighting for this area.  Otherwise, just set to 1/2."
    },
    "nav_generate_fencetops": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Autogenerate nav areas on fence and obstacle tops"
    },
    "nav_generate_fixup_jump_areas": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Convert obsolete jump areas into 2-way connections"
    },
    "nav_generate_incremental_range": {
        "default_value": "2000",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_generate_incremental_tolerance": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Z tolerance for adding new nav areas."
    },
    "nav_generate_no_restart": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "nav_generate_remove_jump_areas": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "nav_genrt_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_genrt_no_splice": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_genrt_no_split": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_genrt_step": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_max_auto_area_size": {
        "default_value": "16384",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Max size in x/y of any auto-generated nav area"
    },
    "nav_max_view_distance": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Maximum range for precomputed nav mesh visibility (0 = default 1500 units)"
    },
    "nav_obstacle_allow_delete": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_obstacle_genrt": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_obstacle_keep_inside_poly": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_obstacle_stats": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_obstacle_validate": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_obstruction_draw": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_debug_compute_with_open_goal": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_debug_jump_segments": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_areas": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_arrow": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_climb_segments": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_connected_areas": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_ground_segments": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_jump_segments": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_ladder_segments": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_draw_tick": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_fixup_climb_up_segments": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_fixup_gap_segments": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_fixup_portal_violation_segments": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_jump_process_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_optimize_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_optimize_portal_positions": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_optimizer_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_record_draw_last_fail": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_path_record_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_debug_draw": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_debug_draw_costs": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_debug_draw_errors": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_debug_draw_total_costs": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_debug_log": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_inadmissable_heuristic_factor": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_pathfind_use_area_center": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_potentially_visible_dot_tolerance": {
        "default_value": "0.98",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_quicksave": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set to one to skip the time consuming phases of the analysis.  Useful for data collection and testing."
    },
    "nav_search_lattice_initial_scale": {
        "default_value": "3.0",
        "flags": [
            "gamedll"
        ]
    },
    "nav_search_lattice_progressive_scale": {
        "default_value": "1.7",
        "flags": [
            "gamedll"
        ]
    },
    "nav_select_allow_blocked": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "When selecting an area under nav_edit, allow area marked as blocked."
    },
    "nav_select_arc": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set to change selection trace to be an arc instead of a line.  Value 1 should give a reasonable arc."
    },
    "nav_select_hull_category": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Restrict area selection to areas that can support a hull of the given category"
    },
    "nav_select_hull_height": {
        "default_value": "-1.0f",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Restrict area selection to areas that can support a hull of given height"
    },
    "nav_select_hull_radius": {
        "default_value": "-1.0f",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Restrict area selection to areas that can support a hull of given radius"
    },
    "nav_show_area_connections": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ],
        "help_text": "Show connections to selected area when true"
    },
    "nav_show_area_info": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ],
        "help_text": "Duration in seconds to show nav area ID and attributes while editing. (-1 = never hide)"
    },
    "nav_show_area_info_font": {
        "default_value": "Consolas",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ]
    },
    "nav_show_area_info_font_size": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ]
    },
    "nav_show_area_info_font_voffset": {
        "default_value": "-11.0f",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ]
    },
    "nav_show_compass": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_show_connectionblockers": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Debug: Show connection blocker models."
    },
    "nav_show_edit_pos": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ]
    },
    "nav_show_node_grid": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_show_node_id": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_show_nodes": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_slope_limit": {
        "default_value": "0.7",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "The ground unit normal's Z component must be greater than this for nav areas to be generated."
    },
    "nav_slope_tolerance": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "The ground unit normal's Z component must be this close to the nav area's Z component to be generated."
    },
    "nav_smooth_boundary": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_calc_z": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_constrain_results": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_constrain_results_relax": {
        "default_value": "0.006f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_constrain_spring": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_constrain_spring_relax": {
        "default_value": "0.01f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_draw_accel": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_draw_boundary": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_draw_calc": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_draw_constraint_spline": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_draw_constraint_spring": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_draw_speed": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_separating_dist_override": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_const_override": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_factor_deriv": {
        "default_value": "0.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_factor_dist": {
        "default_value": "0.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_factor_speed": {
        "default_value": "0.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_forward_dist": {
        "default_value": "50.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_forward_dist_time_limit": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_max_dist": {
        "default_value": "36.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_smooth_spring_tension_max_override": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_solid_props": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Make props solid to nav generation/editing"
    },
    "nav_split_show_aa": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Show the axis-aligned split line."
    },
    "nav_split_show_free": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Show the free split line."
    },
    "nav_test_curve_opt": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_find_nearest": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Calculate the nearest point on the navmesh to the trace point.  Uses selection from nav_select_hull_*."
    },
    "nav_test_find_nearest_clear": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Calculate the nearest point on the navmesh to the trace point.  Uses selection from nav_select_hull_*."
    },
    "nav_test_find_random_connected": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Demonstrates finding random points that are connected in the nav mesh to the start point."
    },
    "nav_test_find_random_connected_dist_max": {
        "default_value": "1000.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_find_random_connected_dist_min": {
        "default_value": "100.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_genrt": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_genrt_place": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_loop": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_loop_radius": {
        "default_value": "100",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_loop_string": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_loop_string_set": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set to 1-3 to place endpoints of test string."
    },
    "nav_test_node": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_node_crouch": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_node_crouch_dir": {
        "default_value": "4",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_path": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Calculate and draw a path from player/camera position to the test position."
    },
    "nav_test_path_boundary_zone": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_path_boundary_zone_ray_test": {
        "default_value": "100.0f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_path_expansion_search": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Extend nav_tes_path by doing an expansion search on that path.  Convar value defines dist."
    },
    "nav_test_path_lock_goal": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Lock the pathfinding goal to the current intersection point."
    },
    "nav_test_path_lock_start": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Lock the pathfinding start to the current intersection point."
    },
    "nav_test_path_max_climb_up": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_path_max_drop_down": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_path_opt": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Enable path optimization for nav_edit_path paths."
    },
    "nav_test_path_opt_transitions": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_search_lattice": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Demonstrates searching hexagonal lattice over nav mesh."
    },
    "nav_test_smooth": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_in_speed": {
        "default_value": "120.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_in_yaw": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_max_accel": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_path_speed": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_separating_dist": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_spring_const": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_smooth_spring_tension_max": {
        "default_value": "-1.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_spline": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_spline_place": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_split_obstacle": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_split_obstacle_dirty": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_split_obstacle_leave": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_test_split_obstacle_update_pos": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nav_volume_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Draw or print debug information about nav volume queries."
    },
    "nb_debug_history": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "If true, each bot keeps a history of debug output in memory"
    },
    "nb_freeze": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Stop all NextBots from moving only"
    },
    "nb_locomotion_acceleration_max": {
        "default_value": "500",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_debug_climb": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_friction_forward": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_friction_sideways": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_gravity": {
        "default_value": "1000",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_lean_forward_accel": {
        "default_value": "100",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_lean_sideways_max_angle": {
        "default_value": "30",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_lean_sideways_rate": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_locomotion_yaw_rate_max": {
        "default_value": "250",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_lod_0_limit": {
        "default_value": "12",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_lod_0_range": {
        "default_value": "1500.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_lod_1_limit": {
        "default_value": "25",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_lod_1_range": {
        "default_value": "2500.0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_lod_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_lod_stats": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_stop": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Stop all NextBots"
    },
    "nb_update_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_update_framelimit": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_update_frequency": {
        "default_value": ".1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "nb_update_maxslide": {
        "default_value": "2",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "net_compressvoice": {
        "default_value": "0",
        "help_text": "Attempt to compress out of band voice payloads (360 only)."
    },
    "net_debug_to_file": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "net_detailed_canpacket_log": {
        "default_value": "0"
    },
    "net_log_processing": {
        "default_value": "0",
        "help_text": "Log network processing"
    },
    "net_max_foreign_packets": {
        "default_value": "1000",
        "help_text": "Maximum amount of foreign packets (no established connection) allowed per frame before we discard"
    },
    "net_maxcleartime": {
        "default_value": "4.0",
        "help_text": "Max # of seconds we can wait for next packets to be sent based on rate setting (0 == no limit)."
    },
    "net_maxroutable": {
        "default_value": "1200",
        "flags": [
            "archive",
            "userinfo"
        ],
        "help_text": "Requested max packet size before packets are 'split'.",
        "max_value": 1200,
        "min_value": 576
    },
    "net_p2p_api_client_to_client": {
        "default_value": "0",
        "help_text": "0: old, 1: new"
    },
    "net_p2p_api_game": {
        "default_value": "0",
        "help_text": "0: old sessions, 1:new session, 2:new socket."
    },
    "net_p2p_listen_dedicated": {
        "default_value": "0",
        "help_text": "Should dedicated server listen for new-style P2P?"
    },
    "net_p2pconnection_linger_time": {
        "default_value": "120",
        "help_text": "How long p2p connection requests should linger before we completely ignore them"
    },
    "net_port_try": {
        "default_value": "150",
        "help_text": "If unable to bind to initial port, how many more to try binding."
    },
    "net_public_adr": {
        "flags": [
            "release"
        ],
        "help_text": "For servers behind NAT/DHCP meant to be exposed to the public internet, this is the public facing ip address string: (\"x.x.x.x\" )"
    },
    "net_qospacketloss_percentage_threshold": {
        "default_value": "5.0",
        "help_text": "Spew a warning if packet loss percentage is above this threshold",
        "max_value": 100,
        "min_value": 0
    },
    "net_queue_trace": {
        "default_value": "0",
        "flags": [
            "accessible_from_threads"
        ]
    },
    "net_restrict_showmsg_socket": {
        "help_text": "If set, only net_showmsg spew for data inbound on this socket name e.g. client, server, etc."
    },
    "net_showdrop": {
        "default_value": "0",
        "help_text": "Show dropped packets in console"
    },
    "net_showeventlisteners": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Show listening addition/removals"
    },
    "net_showevents": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Dump game events to console (1=client only, 2=all)."
    },
    "net_showfragments": {
        "default_value": "0",
        "help_text": "Show netchannel fragments"
    },
    "net_showmsg": {
        "default_value": "0",
        "help_text": "Show incoming message: <0|1|2|name> where 1 == all and 2 == all except net_NOP"
    },
    "net_showoob": {
        "default_value": "0",
        "help_text": "Show connectionless UDP traffic."
    },
    "net_showpeaks": {
        "default_value": "0",
        "help_text": "Show messages for large packets only: <size>"
    },
    "net_showreliable": {
        "default_value": "0",
        "help_text": "Like net_showmsg, but only spew reliable messages"
    },
    "net_showsplits": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Show info about packet splits"
    },
    "net_showudp": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Dump UDP packets summary to console"
    },
    "net_showudp_remoteonly": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Dump non-loopback udp only"
    },
    "net_splitpacket_minimum_ack_rtt_msecs": {
        "default_value": "750",
        "flags": [
            "release"
        ],
        "help_text": "After sending last chunk of split packet payload, wait at least this many msecs after last activity before giving up"
    },
    "net_splitpacket_require_acks_threshold": {
        "default_value": "24",
        "flags": [
            "release"
        ],
        "help_text": "If a splitpacket has more than this many fragments, use the reliable/ack based protocol"
    },
    "net_splitpacket_resend_time_msecs": {
        "default_value": "100",
        "flags": [
            "release"
        ],
        "help_text": "Wait this many msecs before checking whether to send resend requests."
    },
    "net_splitpacket_success_ack_count": {
        "default_value": "3",
        "flags": [
            "release"
        ],
        "help_text": "If we get a completed splitpacket requesting acks, send the final 'success' ack this many times",
        "max_value": 5,
        "min_value": 1
    },
    "net_splitrate": {
        "default_value": "1",
        "flags": [
            "release"
        ],
        "help_text": "Number of fragments for a splitpacket that can be sent per frame"
    },
    "net_splitspacket_warning_threshold": {
        "default_value": "24",
        "flags": [
            "release"
        ],
        "help_text": "If a splitpacket has more than this many fragments, print a warning to console"
    },
    "net_usesocketsforloopback": {
        "default_value": "0",
        "help_text": "Use network sockets layer even for listen server local player's packets (multiplayer only)."
    },
    "nextlevel": {
        "flags": [
            "gamedll",
            "notify"
        ],
        "help_text": "If set to a valid map name, will change to this map during the next changelevel"
    },
    "nian_fight_duration": {
        "default_value": "1500.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "nian_ingot_conversion": {
        "default_value": "40",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "noclip_fixup": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "npc_vphysics": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "old_radiusdamage": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "p2p_lockdown_global_trust_everyone": {
        "default_value": "-1",
        "flags": [
            "archive"
        ],
        "help_text": "Global level peer to peer control to trust everyone. Still requires a peer group handler to trust the user as well. [0 = force off, 1 = force on, -1 = Engine Controlled]"
    },
    "p2p_lockdown_global_trust_friends": {
        "default_value": "-1",
        "flags": [
            "archive"
        ],
        "help_text": "Global level peer to peer control to trust steam friends. Still requires a peer group handler to trust the user as well. [0 = force off, 1 = force on, -1 = Engine Controlled]"
    },
    "p2p_relay_maxhops": {
        "default_value": "4",
        "flags": [
            "archive"
        ]
    },
    "panel_test_title_safe": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Test vgui panel positioning with title safe indentation"
    },
    "particle_test_attach_attachment": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Attachment index for attachment mode"
    },
    "particle_test_attach_mode": {
        "default_value": "follow_attachment",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Possible Values: 'start_at_attachment', 'follow_attachment', 'start_at_origin', 'follow_origin'"
    },
    "particle_test_file": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Name of the particle system to dynamically spawn"
    },
    "particles_multiplier": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Multiply # of rendered particles by this for perf testing"
    },
    "password": {
        "flags": [
            "archive",
            "dont_record",
            "server_cannot_query",
            "unknown_33"
        ],
        "help_text": "Current server access password"
    },
    "phys2_contact_debug_draw_size": {
        "default_value": "2"
    },
    "phys2_debug_broadphase": {
        "default_value": "0"
    },
    "phys_active": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "phys_build_bounds": {
        "default_value": "0"
    },
    "phys_build_mass": {
        "default_value": "0"
    },
    "phys_continuous": {
        "default_value": "1",
        "flags": [
            "replicated"
        ]
    },
    "phys_continuous_kinematic_update": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_drag_multiplier": {
        "default_value": "1",
        "flags": [
            "notify",
            "replicated"
        ],
        "help_text": "Multiply air drag"
    },
    "phys_dynamic_scaling": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "phys_fast_report_contacts": {
        "default_value": "1",
        "help_text": "when 1, fast path for collision reporting is implemented making triggers faster in some cases"
    },
    "phys_hack_npc_shadow_collisions": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "phys_impactforcescale": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ]
    },
    "phys_implicit_integarator": {
        "default_value": "1",
        "flags": [
            "notify",
            "replicated"
        ],
        "help_text": "Use implicit integrator for gyroscopic forces"
    },
    "phys_jiggle_bone_enable": {
        "default_value": "1"
    },
    "phys_log_updaters": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_log_updaters_exclude": {
        "default_value": "weapon pistol rifle survivor common_male",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_log_updaters_include": {
        "default_value": "limbs",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_old_contact_draw": {
        "default_value": "0"
    },
    "phys_optimize": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_position_iterations": {
        "default_value": "2"
    },
    "phys_pushscale": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_ragdoll_force_magnitude": {
        "default_value": "0.3",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_reload_immediately": {
        "default_value": "0",
        "help_text": "Set to 1 to reload resources and reconstruct physics of entities on the fly. May unexpectedly change behavior or crash the game, because game code is generally unaware of underlying resource reloads and may hold references to physics that may become invalid during resource reload. It is inherently harder for physics to deal with resource reloads because of persistent nature of objects being simulated (textures can be easily reloaded on the fly; if an entity holds a handle to a ragdoll body part, it may expect that handle to stay valid while the ragdoll exists)"
    },
    "phys_shoot_speed": {
        "default_value": "250",
        "flags": [
            "gamedll"
        ]
    },
    "phys_shoot_torque": {
        "default_value": "100000000",
        "flags": [
            "gamedll"
        ]
    },
    "phys_show_stats": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_specialized_linear_sweep": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "phys_sphere_cast_version": {
        "default_value": "1"
    },
    "phys_step_threaded": {
        "default_value": "0"
    },
    "phys_stepmotor_damping": {
        "default_value": "0.5"
    },
    "phys_stressbodyweights": {
        "default_value": "5.0",
        "flags": [
            "gamedll"
        ]
    },
    "phys_timescale": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Scale time for physics"
    },
    "phys_traceline_radius": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_tracker": {
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "phys_upimpactforcescale": {
        "default_value": "0.375",
        "flags": [
            "gamedll"
        ]
    },
    "phys_validate": {
        "default_value": "0"
    },
    "phys_velocity_iterations": {
        "default_value": "8"
    },
    "phys_visualize_traces": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "physicsshadowupdate_render": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "pickup_check_period": {
        "default_value": "0.25",
        "flags": [
            "gamedll"
        ]
    },
    "player_debug_off_nav": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "player_debug_print_damage": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "When true, print amount and type of all damage received by player to console."
    },
    "player_incap_use_radius": {
        "default_value": "96",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "player_old_armor": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "player_use_radius": {
        "default_value": "80",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "population_distribution_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "prop_active_gib_limit": {
        "default_value": "999999",
        "flags": [
            "gamedll"
        ]
    },
    "prop_active_gib_max_fade_time": {
        "default_value": "999999",
        "flags": [
            "gamedll"
        ]
    },
    "prop_debug_vr_collision": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Highlights props based on their collision group: COLLISION_GROUP_PROPS(white), COLLISION_GROUP_PROPS_VR_INTERACTIVE_DEBRIS(green), COLLISION_GROUP_PROPS_VR_DEBRIS(red), COLLISION_GROUP_DEBRIS(grey), OTHER(blue)"
    },
    "props_break_max_pieces": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Maximum prop breakable piece count (-1 = model default)"
    },
    "props_break_max_pieces_perframe": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Maximum prop breakable piece count per frame (-1 = model default)"
    },
    "pvs_debugentity": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "Verbose spew for this entity when doing IsInPVS computation."
    },
    "pvs_flowtype": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "Flow through spawn groups for vis (0 == default, 1 == always visible, 2 == never visible."
    },
    "r_AirboatViewDampenDamp": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_AirboatViewDampenFreq": {
        "default_value": "7.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_AirboatViewZHeight": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_JeepFOV": {
        "default_value": "90",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "r_JeepViewDampenDamp": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_JeepViewDampenFreq": {
        "default_value": "7.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_JeepViewZHeight": {
        "default_value": "10.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_VehicleViewDampen": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify",
            "replicated",
            "cheat"
        ]
    },
    "r_allow_morph_batching_on_base": {
        "default_value": "0"
    },
    "r_always_render_all_windows": {
        "default_value": "0",
        "help_text": "Always force all engine & tools to render"
    },
    "r_aspectratio": {
        "default_value": "0"
    },
    "r_bloom_offset": {
        "default_value": "0.8"
    },
    "r_bloom_scale": {
        "default_value": "1.0"
    },
    "r_cacheSequenceData": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "r_directlighting": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to use direct lighting"
    },
    "r_dopixelvisibility": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_draw_animatables": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_draw_particle_children_with_parents": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ],
        "help_text": "Draw particle children with parents (-1=use gameinfo, 0=no, 1=yes)"
    },
    "r_drawblankworld": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Render blank instead of the game world"
    },
    "r_drawdecals": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to render decals"
    },
    "r_drawgameui": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable the rendering of gameui"
    },
    "r_drawpanorama": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable the rendering of panorama UI"
    },
    "r_drawparticles": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable/disable particle rendering"
    },
    "r_drawskybox": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Render the 2d skybox."
    },
    "r_drawvgui": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable the rendering of vgui panels"
    },
    "r_drawviewmodel": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Render view model"
    },
    "r_drawworld": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Render the world."
    },
    "r_experimental_lag_limiter": {
        "default_value": "0"
    },
    "r_extra_render_frames": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "r_fallback_texture_lod_scale": {
        "default_value": "2.0",
        "flags": [
            "cheat"
        ],
        "help_text": "Scale factor for requested texture size (texture streaming) - used for geo that doesn't have a precomputed UV density measure"
    },
    "r_farplane": {
        "default_value": "6000.0",
        "flags": [
            "cheat"
        ],
        "help_text": "Set far plane for rendering"
    },
    "r_force_zprepass": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ],
        "help_text": "0: Force z prepass off. 1: Force on. -1: Don't force"
    },
    "r_freezeparticles": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Pause particle simulation"
    },
    "r_fullscreen_gamma": {
        "default_value": "2.2",
        "flags": [
            "archive",
            "unknown_33"
        ],
        "help_text": "Screen Gamma (only in fullscreen modes)"
    },
    "r_grass_allow_flattening": {
        "default_value": "0"
    },
    "r_grass_alpha_test": {
        "default_value": "0"
    },
    "r_grass_density_mode": {
        "default_value": "0",
        "help_text": "0 = Density corresponds to blade existance, 1 = Density corresponds to blade height, 2 = Both 0 and 1"
    },
    "r_grass_end_fade": {
        "default_value": "3000.0"
    },
    "r_grass_max_brightness_change": {
        "default_value": "75"
    },
    "r_grass_quality": {
        "default_value": "2",
        "help_text": "0 = Off, 1 = Low, 2 = Med, 3 = high, 4 = ultra"
    },
    "r_grass_start_fade": {
        "default_value": "2000.0"
    },
    "r_grass_vertex_lighting": {
        "default_value": "0"
    },
    "r_indirect_specular_force_scale": {
        "default_value": "-1.0",
        "flags": [
            "cheat"
        ]
    },
    "r_indirectlighting": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to use indirect lighting"
    },
    "r_lightBinnerFarPlane": {
        "default_value": "4096.0f",
        "flags": [
            "cheat"
        ]
    },
    "r_light_probe_volume_debug_colors": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "r_max_texture_pool_size": {
        "default_value": "0",
        "help_text": "Upper limit on texture pool size."
    },
    "r_morphing_enabled": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_occluder_overlay": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Show the occluder depth buffer mip level. 0=off, 1=1st mip, 2=2nd mip, etc..."
    },
    "r_occlusion_culling": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable or disable occlusion culling"
    },
    "r_particle_debug_force_simulation": {
        "default_value": "0",
        "help_text": "-1 for all asleep, 1 for all awake"
    },
    "r_particle_min_timestep": {
        "default_value": "0.00",
        "help_text": "A minimum on particle simulation time, particle simulation happening more frequently than this will lerp."
    },
    "r_particle_render_test": {
        "default_value": "0",
        "help_text": "render particles 100 times and show perf"
    },
    "r_particle_timescale": {
        "default_value": "1.0"
    },
    "r_pixelvisibility_partial": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_pixelvisibility_spew": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "r_point_light_shadows_enabled": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_render_world_node_bounds": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Render world node bounds"
    },
    "r_rendersun": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Render sun lighting"
    },
    "r_reset_character_decals": {
        "default_value": "0"
    },
    "r_screen_size_expansion": {
        "default_value": "0"
    },
    "r_shadows": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_show_hipoly_draw_calls": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Transparent wireframe overlay for draw calls with triangle count higher than specified number"
    },
    "r_show_occluders": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Show occluder"
    },
    "r_show_skymap": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Draw the sky map"
    },
    "r_show_ssao": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Draw the SSAO occlusion buffer"
    },
    "r_show_zprepass_depth": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Draw the depth from the depth pre-pass"
    },
    "r_show_zprepass_normals": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Draw the normals from the depth pre-pass"
    },
    "r_showdebugoverlays": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to render debug overlays"
    },
    "r_showdebugrendertarget": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Set the debug render target to show, 0 == disable"
    },
    "r_showsceneobjectbounds": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Show scenesystem object bounding boxes"
    },
    "r_showsunshadowdebugrendertargets": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to render sun shadow render targets"
    },
    "r_showsunshadowdebugsplitvis": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to render sun shadow split visibility debugger"
    },
    "r_size_cull_threshold_shadow": {
        "default_value": "0.2",
        "flags": [
            "cheat"
        ],
        "help_text": "Threshold of sun shadow map size percentage below which objects get culled"
    },
    "r_skinning_enabled": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "r_skip_precache_validation_check": {
        "default_value": "1"
    },
    "r_ssao": {
        "default_value": "1",
        "help_text": "Set to use screen-space ambient occlusion"
    },
    "r_ssao_bias": {
        "default_value": "0.5"
    },
    "r_ssao_blur": {
        "default_value": "1"
    },
    "r_ssao_radius": {
        "default_value": "30"
    },
    "r_ssao_strength": {
        "default_value": "1.2"
    },
    "r_ssr": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Enable or disable screenspace reflections"
    },
    "r_stereo_convergence": {
        "default_value": "0.03",
        "help_text": "Sets the focal plane that is aligned with the monitor's surface"
    },
    "r_stereo_eye_separation": {
        "default_value": "5.0",
        "help_text": "Wider eye separation results in greater depth perception"
    },
    "r_stereo_mode_anaglyph": {
        "default_value": "0",
        "help_text": "Requires -stereo on the command line"
    },
    "r_stereo_mode_crossed": {
        "default_value": "0",
        "help_text": "Requires -stereo on the command line"
    },
    "r_stereo_mode_parallel": {
        "default_value": "0",
        "help_text": "Requires -stereo on the command line"
    },
    "r_texture_lod_scale": {
        "default_value": "1.0",
        "flags": [
            "cheat"
        ],
        "help_text": "Scale factor for requested texture size (texture streaming)"
    },
    "r_texture_pool_size": {
        "default_value": "1600",
        "help_text": "Total size of the texture pool in MB"
    },
    "r_texture_stream_mip_bias": {
        "default_value": "0",
        "help_text": "Biases the mip level the texture streaming system choses to stream for each texture."
    },
    "r_texturefilteringquality": {
        "default_value": "1",
        "flags": [
            "archive",
            "unknown_33"
        ],
        "help_text": "0: Bilinear, 1: Trilinear, 2: Aniso 2x, 3: Aniso 4x, 4: Aniso 8x, 5: Aniso 16x"
    },
    "r_threaded_particles": {
        "default_value": "1"
    },
    "r_translucent": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable rendering of translucent geometry"
    },
    "r_vconsole_foregroundforcerender": {
        "default_value": "1",
        "help_text": "When VConsole is in the foreground, force all engine & tools to render"
    },
    "r_vehicleBrakeRate": {
        "default_value": "1.5",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "r_wait_on_present": {
        "default_value": "0"
    },
    "r_wireframe": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "0=Off, 1=Surface Wireframe, 2=Transparent Wireframe"
    },
    "r_world_frame_load_threshold_ms": {
        "default_value": "10.0"
    },
    "r_world_wind_dir": {
        "default_value": "0.707 0.707 0.0"
    },
    "r_world_wind_frequency_grass": {
        "default_value": "0.03"
    },
    "r_world_wind_frequency_trees": {
        "default_value": "0.003"
    },
    "r_world_wind_offset_speed": {
        "default_value": "0.25 0.3 0.2"
    },
    "r_world_wind_smooth_time": {
        "default_value": "2.0"
    },
    "r_world_wind_strength": {
        "default_value": "40.0"
    },
    "r_worldlod": {
        "default_value": "1",
        "flags": [
            "cheat"
        ],
        "help_text": "Set to enable world LOD"
    },
    "r_zprepass_normals": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "0: Use normals reconstructed from depth. 1: Output correct normals in z prepass."
    },
    "ragdoll_prop_settle": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Enable more aggressive ragdoll settling"
    },
    "ragdoll_prop_sleepaftertime": {
        "default_value": "4",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "After this many seconds of being basically stationary, the ragdoll will go to sleep."
    },
    "ragdoll_sleepaftertime": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "After this many seconds of being basically stationary, the ragdoll will go to sleep."
    },
    "rate": {
        "default_value": "80000",
        "flags": [
            "archive",
            "userinfo"
        ],
        "help_text": "Min bytes/sec the host can receive data"
    },
    "rcon_address": {
        "flags": [
            "dont_record",
            "server_cannot_query"
        ],
        "help_text": "Address of remote server if sending unconnected rcon commands (format x.x.x.x:p) "
    },
    "rcon_password": {
        "flags": [
            "dont_record",
            "release",
            "server_cannot_query"
        ],
        "help_text": "remote console password."
    },
    "rr_debugclassname": {
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "If set, rr_debugclassname will print only response tests where 'classname' corresponds to this variable. Use to filter for a specific character."
    },
    "rr_debugresponseconcept": {
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "If set, rr_debugresponseconcept will print only responses testing for the specified concept"
    },
    "rr_debugresponses": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Show verbose matching output (1 for simple, 2 for rule scoring, 3 for noisy). If set to 4, it will only show response success/failure for npc_selected NPCs."
    },
    "rr_debugrule": {
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "If set to the name of the rule, that rule's score will be shown whenever a concept is passed into the response rules system."
    },
    "rr_discrepancycheck": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Set 0 to disable the [RESPONSELIB] warning messages."
    },
    "rr_dumpresponses": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Dump all response_rules.txt and rules (requires restart)"
    },
    "rr_followup_maxdist": {
        "default_value": "1800",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "'then ANY' or 'then ALL' response followups will be dispatched only to characters within this distance."
    },
    "rr_remarkables_enabled": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If 1, polling for info_remarkables and issuances of TLK_REMARK is enabled."
    },
    "rr_thenany_score_slop": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "archive",
            "cheat"
        ],
        "help_text": "When computing respondents for a 'THEN ANY' rule, all rule-matching scores within this much of the best score will be considered."
    },
    "rubikon_joint_deepdebugging": {
        "default_value": "0"
    },
    "save_async": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "save_history_count": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Keep this many old copies in history of autosaves and quicksaves."
    },
    "save_screenshot": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "0 = none, 1 = non-autosave, 2 = always"
    },
    "save_spew": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "sc_allow_dynamic_constant_batching": {
        "default_value": "1"
    },
    "sc_allow_shadow_only_draws": {
        "default_value": "1"
    },
    "sc_animatable_disable_materials": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_animatable_fastpath_always_bind_materials": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_animatable_fastpath_enable_sort": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "sc_aux_cameras_enabled": {
        "default_value": "1"
    },
    "sc_aux_cameras_single_submit": {
        "default_value": "0"
    },
    "sc_batch_cb_updates_for_view": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_batch_layer_cb_updates": {
        "default_value": "1"
    },
    "sc_check_world": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disableThreading": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disable_dynamic_sky_lighting": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disable_procedural_layer_rendering": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disable_shadow_fastpath": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disable_shadow_materials": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disable_spotlight_shadows": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_disable_world_materials": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_double_submit": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_dump_lists": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_dupe_simple_meshes_count": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "sc_dynamic_job_scheduling": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "sc_extended_stats": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_fast_object_reject": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_force_camera": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_force_lod_level": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "sc_force_materials_batchable": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_force_submit_count": {
        "default_value": "0"
    },
    "sc_keep_all_layers": {
        "default_value": "0"
    },
    "sc_lod_distance_scale_override": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "sc_log_stats": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_log_submits": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Log out display list submits from scenesystem"
    },
    "sc_max_framebuffer_copies_per_layer": {
        "default_value": "1"
    },
    "sc_multithread_sorted_layers": {
        "default_value": "1"
    },
    "sc_new_morph_atlasing": {
        "default_value": "1"
    },
    "sc_only_render_opaque": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_only_render_shadowcasters": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_optimize_partitions_every_frame": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "sc_override_shadow_fade_max_dist": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "sc_override_shadow_fade_min_dist": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ]
    },
    "sc_partitions_per_job": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "sc_queue_reflection_views_to_layers": {
        "default_value": "1"
    },
    "sc_reject_all_objects": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_show_rejected_objects": {
        "default_value": "0"
    },
    "sc_show_rejected_objects_range": {
        "default_value": "-1"
    },
    "sc_skip_identical_rt_binds": {
        "default_value": "0"
    },
    "sc_skip_traversal": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sc_spew_cmt_usage": {
        "default_value": "0"
    },
    "sc_throw_away_all_layers": {
        "default_value": "0"
    },
    "sc_use_clear_subrect": {
        "default_value": "0"
    },
    "scene_clientflex": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Do client side flex animation."
    },
    "scene_clientplayback": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Play all vcds on the clients."
    },
    "scene_forcecombined": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "When playing back, force use of combined .wav files even in english."
    },
    "scene_maxcaptionradius": {
        "default_value": "1200",
        "flags": [
            "gamedll"
        ],
        "help_text": "Only show closed captions if recipient is within this many units of speaking actor (0==disabled)."
    },
    "scene_print": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "When playing back a scene, print timing and event info to console."
    },
    "scene_showlook": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive"
        ],
        "help_text": "When playing back, show the directions of look events."
    },
    "scene_showmoveto": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive"
        ],
        "help_text": "When moving, show the end location."
    },
    "scene_showunlock": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "archive"
        ],
        "help_text": "Show when a vcd is playing but normal AI is running."
    },
    "screenmessage_notifytime": {
        "default_value": "8",
        "flags": [
            "gamedll"
        ],
        "help_text": "How long to display screen message text"
    },
    "screenmessage_show": {
        "default_value": "-1",
        "flags": [
            "cheat"
        ],
        "help_text": "Enable display of console messages on screen. 1 = Enabled, 0 = Disabled, -1 = Enabled if vgui is not present"
    },
    "screenshot_prefix": {
        "default_value": "shot",
        "help_text": "Set the screenshot auto naming prefix."
    },
    "screenshot_subdir": {
        "default_value": "screenshots",
        "help_text": "Set the screenshot directory."
    },
    "script_attach_debugger_at_startup": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "script_break_in_native_debugger_on_error": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "servercfgfile": {
        "default_value": "server.cfg",
        "flags": [
            "gamedll"
        ]
    },
    "shader_roughness_cone": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "shader_roughness_ellipse": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "shatterglass_cleanup": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_cleanup_max": {
        "default_value": "150",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_distort": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_edge_uv_scale": {
        "default_value": "0.05",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_mass_scale": {
        "default_value": "0.05",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_shard_lifetime": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_subdiv_size": {
        "default_value": "1.5",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "shatterglass_voronoi_size": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "showtriggers": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shows trigger brushes"
    },
    "sk_autoaim_mode": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive",
            "replicated"
        ]
    },
    "sk_crowbar_lead_time": {
        "default_value": "0.9",
        "flags": [
            "gamedll"
        ]
    },
    "sk_player_arm": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "sk_player_chest": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "sk_player_head": {
        "default_value": "2",
        "flags": [
            "gamedll"
        ]
    },
    "sk_player_leg": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "sk_player_stomach": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "skel_constraints_enable": {
        "default_value": "1",
        "flags": [
            "replicated",
            "cheat"
        ]
    },
    "skel_debug": {
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "skeleton_instance_smear_boneflags": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Smear boneflags across the model.  Costs computation, but tests to make sure your bone flags are consistent."
    },
    "skill": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive",
            "splitscreen",
            "archive_xbox"
        ],
        "help_text": "Game skill level (1-3).",
        "max_value": 3,
        "min_value": 1
    },
    "skill2": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive",
            "splitscreen_added",
            "archive_xbox"
        ],
        "help_text": "Game skill level (1-3).",
        "max_value": 3,
        "min_value": 1
    },
    "skill3": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive",
            "splitscreen_added",
            "archive_xbox"
        ],
        "help_text": "Game skill level (1-3).",
        "max_value": 3,
        "min_value": 1
    },
    "skill4": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive",
            "splitscreen_added",
            "archive_xbox"
        ],
        "help_text": "Game skill level (1-3).",
        "max_value": 3,
        "min_value": 1
    },
    "smoothstairs": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Smooth player eye z coordinate when traversing stairs."
    },
    "snd_async_spew_blocking": {
        "default_value": "0",
        "help_text": "Spew message to console any time async sound loading blocks on file i/o."
    },
    "snd_async_stream_fail": {
        "default_value": "0",
        "help_text": "Spew stream pool failures."
    },
    "snd_async_stream_spew": {
        "default_value": "0",
        "help_text": "Spew streaming info ( 0=Off, 1=streams, 2=buffers"
    },
    "snd_autodetect_latency": {
        "default_value": "0",
        "flags": [
            "archive",
            "unknown_33"
        ],
        "help_text": "Enable automatic buffer latency detection (requires driver support)"
    },
    "snd_compare_KV_convert": {
        "default_value": "0"
    },
    "snd_delay_sound_shift": {
        "default_value": "0.015"
    },
    "snd_disable_mixer_duck": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_disable_mixer_solo": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_duckerattacktime": {
        "default_value": "0.5",
        "flags": [
            "archive"
        ]
    },
    "snd_duckerreleasetime": {
        "default_value": "2.5",
        "flags": [
            "archive"
        ]
    },
    "snd_duckerthreshold": {
        "default_value": "0.15",
        "flags": [
            "archive"
        ]
    },
    "snd_ducktovolume": {
        "default_value": "0.55",
        "flags": [
            "archive"
        ]
    },
    "snd_envelope_rate": {
        "default_value": "0.9"
    },
    "snd_filter": {
        "flags": [
            "cheat"
        ]
    },
    "snd_foliage_db_loss": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "foliage dB loss per 1200 units"
    },
    "snd_gain": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "snd_gain_max": {
        "default_value": "1",
        "flags": [
            "cheat"
        ]
    },
    "snd_gain_min": {
        "default_value": "0.01",
        "flags": [
            "cheat"
        ]
    },
    "snd_gamevoicevolume": {
        "default_value": "1.0",
        "flags": [
            "archive",
            "userinfo",
            "archive_xbox"
        ],
        "help_text": "Game v.o. volume",
        "max_value": 1,
        "min_value": 0
    },
    "snd_gamevolume": {
        "default_value": "1.0",
        "flags": [
            "archive",
            "userinfo",
            "archive_xbox",
            "unknown_33"
        ],
        "help_text": "Game volume",
        "max_value": 1,
        "min_value": 0
    },
    "snd_list": {
        "flags": [
            "cheat"
        ]
    },
    "snd_max_same_sounds": {
        "default_value": "4",
        "flags": [
            "cheat"
        ]
    },
    "snd_max_same_weapon_sounds": {
        "default_value": "3",
        "flags": [
            "cheat"
        ]
    },
    "snd_mergemethod": {
        "default_value": "1",
        "help_text": "Sound merge method (0 == sum and clip, 1 == max, 2 == avg)."
    },
    "snd_mix_minframetime": {
        "default_value": "0.010"
    },
    "snd_mixahead": {
        "default_value": "0.001",
        "flags": [
            "archive",
            "unknown_33"
        ]
    },
    "snd_mixer_master_dsp": {
        "default_value": "1.0",
        "flags": [
            "cheat"
        ]
    },
    "snd_mixer_master_level": {
        "default_value": "1.0",
        "flags": [
            "cheat"
        ]
    },
    "snd_moviefix": {
        "default_value": "1",
        "help_text": "Defer sound recording until next tick when laying off movies."
    },
    "snd_musicvolume": {
        "default_value": "1.0",
        "flags": [
            "archive",
            "userinfo",
            "unknown_33"
        ],
        "help_text": "Music volume",
        "max_value": 1,
        "min_value": 0
    },
    "snd_mute_losefocus": {
        "default_value": "1",
        "flags": [
            "archive",
            "unknown_33"
        ]
    },
    "snd_new_visualize": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays soundevent name played at it's 3d position"
    },
    "snd_occlusion_debug": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_op_test_convar": {
        "default_value": "720",
        "flags": [
            "cheat"
        ]
    },
    "snd_refdb": {
        "default_value": "60",
        "flags": [
            "cheat"
        ],
        "help_text": "Reference dB at snd_refdist"
    },
    "snd_refdist": {
        "default_value": "36",
        "flags": [
            "cheat"
        ],
        "help_text": "Reference distance for snd_refdb"
    },
    "snd_report_stop_sound": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "If set to 1, report all sounds stopped with S_StopSound().\n"
    },
    "snd_report_verbose_error": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "If set to 1, report more error found when playing sounds.\n"
    },
    "snd_sequencer_show_events": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sequencer_show_quantize_queue": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_showclassname": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_showstart": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_debug_trigger_opvar": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "snd_sos_default_update_stack": {
        "default_value": "core_update_default"
    },
    "snd_sos_list_operator_updates": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_max_event_base_depth": {
        "default_value": "4"
    },
    "snd_sos_opvar_debug": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_print_field_references": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_print_full_field_info": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_block_debug": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Spew data about the list of block entries."
    },
    "snd_sos_show_client_rcv": {
        "default_value": "0"
    },
    "snd_sos_show_entry_match_free": {
        "default_value": "0"
    },
    "snd_sos_show_groups_debug": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Spew data about the list of block entries."
    },
    "snd_sos_show_groups_match_free": {
        "default_value": "0"
    },
    "snd_sos_show_operator_event_and_stack": {
        "default_value": "1.0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_event_filter": {
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_field_filter": {
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_init": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_not_executing": {
        "default_value": "1.0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_operator_filter": {
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_parse": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_pause_entry": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_prestart": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_shutdown": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_start": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_stop_entry": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_operator_updates": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_opvar_updates": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_opvar_updates_filter": {
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_queuetotrack": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_server_xmit": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "snd_sos_show_soundevent_param_overwrite": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_show_track_list": {
        "default_value": "0"
    },
    "snd_sos_soundevent_filter": {
        "flags": [
            "cheat"
        ]
    },
    "snd_sos_use_case_sensitive_soundevents": {
        "default_value": "0"
    },
    "snd_soundmixer": {
        "default_value": "Default_Mix"
    },
    "snd_soundmixer_version": {
        "default_value": "2"
    },
    "snd_store_filepaths": {
        "default_value": "0"
    },
    "snd_toolvolume": {
        "default_value": "1.0",
        "flags": [
            "archive"
        ],
        "help_text": "Volume of sounds in tools (e.g. Hammer, SFM)",
        "max_value": 1,
        "min_value": 0
    },
    "snd_visualize": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "Show sounds location in world"
    },
    "snd_vmix_show_input_updates": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "If set to 1, show all incoming updates to vmix inputs.\n"
    },
    "snd_voipvolume": {
        "default_value": "1.0",
        "flags": [
            "archive",
            "userinfo",
            "archive_xbox",
            "unknown_33"
        ],
        "help_text": "Voice volume",
        "max_value": 2,
        "min_value": 0
    },
    "sos_debug_emit": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "soundpatch_captionlength": {
        "default_value": "2.0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "How long looping soundpatch captions should display for."
    },
    "soundscape_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "When on, draws lines to all env_soundscape entities. Green lines show the active soundscape, red lines show soundscapes that aren't in range, and white lines show soundscapes that are in range, but not the active soundscape."
    },
    "spawngroup_ignore_timeouts": {
        "default_value": "0"
    },
    "spec_freeze_time": {
        "default_value": "4.0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Time spend frozen in observer freeze cam."
    },
    "spec_freeze_traveltime": {
        "default_value": "0.4",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Time taken to zoom in to frame a target in observer freeze cam.",
        "min_value": 0
    },
    "ss_voice_hearpartner": {
        "default_value": "0",
        "help_text": "Route voice between splitscreen players on same system."
    },
    "stats_display": {
        "default_value": "0",
        "help_text": "Displays perf statistics information"
    },
    "steamworks_sessionid_server": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "hidden",
            "replicated"
        ],
        "help_text": "The server session ID for the new steamworks gamestats."
    },
    "step_spline": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "suitvolume": {
        "default_value": "0.25",
        "flags": [
            "gamedll",
            "archive"
        ]
    },
    "sv_allchat": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ],
        "help_text": "Players can receive all other players' text chat, no death restrictions"
    },
    "sv_allow_lobby_connect_only": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "If set, players may only join this server from matchmaking lobby, may not connect directly."
    },
    "sv_allow_wait_command": {
        "default_value": "1",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "Allow or disallow the wait command on clients connected to this server."
    },
    "sv_alltalk": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "notify",
            "release"
        ],
        "help_text": "Players can hear all other players' voice communication, no team restrictions"
    },
    "sv_alternateticks": {
        "default_value": "0",
        "flags": [
            "sponly",
            "release"
        ],
        "help_text": "If set, server only simulates entities on even numbered ticks.\n"
    },
    "sv_always_full_flush": {
        "default_value": "0",
        "flags": [
            "cheat"
        ]
    },
    "sv_anim_queue_changes": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "sv_banid_dev_enabled": {
        "default_value": "0"
    },
    "sv_banid_enabled": {
        "default_value": "1",
        "flags": [
            "release"
        ],
        "help_text": "Whether server supports banid command"
    },
    "sv_bonus_challenge": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Set to values other than 0 to select a bonus map challenge type."
    },
    "sv_can_quit_from_script": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "sv_cheats": {
        "default_value": "0",
        "flags": [
            "notify",
            "replicated",
            "release"
        ],
        "help_text": "Allow cheats on server"
    },
    "sv_client_cmdrate_difference": {
        "default_value": "20",
        "flags": [
            "replicated"
        ],
        "help_text": "cl_cmdrate is moved to within sv_client_cmdrate_difference units of cl_updaterate before it is clamped between sv_mincmdrate and sv_maxcmdrate."
    },
    "sv_client_max_interp_ratio": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected). If sv_client_min_interp_ratio is -1, then this cvar has no effect."
    },
    "sv_client_min_interp_ratio": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected).\n              -1 = let clients set cl_interp_ratio to anything\n any other value = set minimum value for cl_interp_ratio"
    },
    "sv_client_predict": {
        "default_value": "-1",
        "flags": [
            "replicated"
        ],
        "help_text": "This can be used to force the value of cl_predict for connected clients (only while they are connected).\n   -1 = let clients set cl_predict to anything\n    0 = force cl_predict to 0\n    1 = force cl_predict to 1"
    },
    "sv_clockcorrection_msecs": {
        "default_value": "60",
        "flags": [
            "gamedll"
        ],
        "help_text": "The server tries to keep each player's m_nTickBase withing this many msecs of the server absolute tickcount"
    },
    "sv_cluster": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Data center cluster this server lives in."
    },
    "sv_consistency": {
        "default_value": "0",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "Whether the server enforces file consistency for critical files"
    },
    "sv_contact": {
        "flags": [
            "notify",
            "release"
        ],
        "help_text": "Contact email for server sysop"
    },
    "sv_debug_player_use": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Visualizes +use logic. Green cross=trace success, Red cross=trace too far, Green box=radius success"
    },
    "sv_dota_auto_save_interval": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ]
    },
    "sv_dota_auto_save_min_players": {
        "default_value": "10",
        "flags": [
            "gamedll"
        ],
        "help_text": "minimum number of players in the game to allow saves"
    },
    "sv_dota_auto_save_test_interval": {
        "default_value": "120",
        "flags": [
            "gamedll"
        ]
    },
    "sv_dota_auto_save_test_interval_futz": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ]
    },
    "sv_dota_crash_sentinel_filename": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Filename of crash detection sentinel"
    },
    "sv_dota_custom_game_cache_download_stuck_mb": {
        "default_value": "1.0",
        "flags": [
            "gamedll"
        ],
        "help_text": "We must download N megabytes within sv_dota_custom_game_cache_download_stuck_timeout seconds, or else we'll assume the download is stuck and give up"
    },
    "sv_dota_custom_game_cache_download_stuck_timeout": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "Every N seconds, we must make download progress of at least sv_dota_custom_game_cache_download_stuck_mb megabytes, or else we'll assume the download is stuck and give up"
    },
    "sv_dota_custom_game_cache_download_timeout_total": {
        "default_value": "300",
        "flags": [
            "gamedll"
        ],
        "help_text": "If we cannot finish downloading after N seconds, give up"
    },
    "sv_dota_custom_game_cache_lock_file_timeout": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "If we cannot acquire lock on shared cache in N seconds, give up and fail UGC install"
    },
    "sv_dota_custom_game_cache_shared_folder": {
        "default_value": "custom_game_cache",
        "flags": [
            "gamedll"
        ],
        "help_text": "Shared cache for downloaded custom game data.  (Dedicated server only)"
    },
    "sv_dota_custom_game_cache_work_folder": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Directory for instance-specific temp data.  If this is empty (the default), it will be set using tmpnam()"
    },
    "sv_dota_league_auto_save_interval": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ]
    },
    "sv_dota_save_games": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Enable save game code"
    },
    "sv_dota_speech_announcer_networking": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set to 0 to prevent announcer speech from being matched on the client; match it on the server instead, like the old way."
    },
    "sv_downloadurl": {
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "Location from which clients can download missing files"
    },
    "sv_enable_delta_packing": {
        "default_value": "1",
        "help_text": "When enabled, this allows for entity packing to use the property changes for building up the data. This is many times faster, but can be disabled for error checking."
    },
    "sv_ent_showonlyattachment": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "sv_ent_showonlyhitbox": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "sv_extra_client_connect_time": {
        "default_value": "15.0",
        "help_text": "Seconds after client connect during which extra frames are buffered to prevent non-delta'd update"
    },
    "sv_filterban": {
        "default_value": "1",
        "help_text": "Set packet filtering by IP mode"
    },
    "sv_footstepinterval": {
        "default_value": "0.22",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "sv_forcepreload": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Force server side preloading."
    },
    "sv_gravity": {
        "default_value": "800",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "World gravity."
    },
    "sv_hibernate_postgame_delay": {
        "default_value": "5",
        "help_text": "# of seconds to wait after final client leaves before hibernating."
    },
    "sv_hibernate_when_empty": {
        "default_value": "1",
        "help_text": "Puts the server into extremely low CPU usage mode when no clients connected"
    },
    "sv_hitbox_debug": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "sv_infinite_ammo": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Player's active weapon will never run out of ammo"
    },
    "sv_infinite_clips": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Player's backpack will never run out of clips"
    },
    "sv_ladder_slack_z_mult": {
        "default_value": "0.026",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Difference in Z increases toward the middle of the slack ladder.\n"
    },
    "sv_lagcompensationforcerestore": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Don't test validity of a lag comp restore, just do it."
    },
    "sv_lan": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Server is a lan server ( no heartbeat, no authentication, no non-class C addresses )"
    },
    "sv_lightquery_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "sv_log_onefile": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Log server information to only one file."
    },
    "sv_logbans": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Log server bans in the server logs."
    },
    "sv_logblocks": {
        "default_value": "0",
        "help_text": "If true when log when a query is blocked (can cause very large log files)"
    },
    "sv_logdownloadlist": {
        "default_value": "0"
    },
    "sv_logecho": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Echo log information to the console."
    },
    "sv_logfile": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Log server information in the log file."
    },
    "sv_logflush": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "Flush the log file to disk on each write (slow)."
    },
    "sv_logsdir": {
        "default_value": "logs",
        "flags": [
            "archive"
        ],
        "help_text": "Folder in the game directory where server logs will be stored."
    },
    "sv_massreport": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "sv_max_queries_sec": {
        "default_value": "3.0",
        "help_text": "Maximum queries per second to respond to from a single IP address."
    },
    "sv_max_queries_sec_global": {
        "default_value": "60",
        "help_text": "Maximum queries per second to respond to from anywhere."
    },
    "sv_max_queries_window": {
        "default_value": "30",
        "help_text": "Window over which to average queries per second averages."
    },
    "sv_maxclientframes": {
        "default_value": "128"
    },
    "sv_maxcmdrate": {
        "default_value": "40",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "(If sv_mincmdrate is > 0), this sets the maximum value for cl_cmdrate."
    },
    "sv_maxrate": {
        "default_value": "0",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "Max bandwidth rate allowed on server, 0 == unlimited",
        "max_value": 1000000,
        "min_value": 0
    },
    "sv_maxreplay": {
        "default_value": "0",
        "help_text": "Maximum replay time in seconds",
        "max_value": 15,
        "min_value": 0
    },
    "sv_maxroutable": {
        "default_value": "1200",
        "help_text": "Server upper bound on net_maxroutable that a client can use.",
        "max_value": 1200,
        "min_value": 576
    },
    "sv_maxupdaterate": {
        "default_value": "60",
        "flags": [
            "replicated"
        ],
        "help_text": "Maximum updates per second that the server will allow"
    },
    "sv_memlimit": {
        "default_value": "0",
        "flags": [
            "cheat"
        ],
        "help_text": "If set, whenever a game ends, if the total memory used by the server is greater than this # of megabytes, the server will exit."
    },
    "sv_mincmdrate": {
        "default_value": "0",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "This sets the minimum value for cl_cmdrate. 0 == unlimited."
    },
    "sv_minrate": {
        "default_value": "5000",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "Min bandwidth rate allowed on server, 0 == unlimited",
        "max_value": 1000000,
        "min_value": 0
    },
    "sv_minupdaterate": {
        "default_value": "10",
        "flags": [
            "replicated"
        ],
        "help_text": "Minimum updates per second that the server will allow"
    },
    "sv_mover_maxslope": {
        "default_value": "0.7",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "The maximum slope the player can overcome [-]"
    },
    "sv_mover_pogodampingratio": {
        "default_value": "2.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "The capsule pogo stick damping ratio [-]"
    },
    "sv_mover_pogoextension": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "The capsule pogo stick extension to keep the player better grounded [%]"
    },
    "sv_mover_pogofrequency": {
        "default_value": "8.0",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "The capsule pogo stick frequency [hz]."
    },
    "sv_mover_usecapsule": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify",
            "replicated"
        ],
        "help_text": "Should the mover proxy be a capsule shape?"
    },
    "sv_networkvar_perfieldtracking": {
        "default_value": "1",
        "flags": [
            "release"
        ],
        "help_text": "Track individual field offset changes, rather than a single dirty flag for the whole entity."
    },
    "sv_networkvar_validate": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Validate each StateChanged against known offsets."
    },
    "sv_noclipaccelerate": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "archive",
            "notify",
            "replicated"
        ]
    },
    "sv_noclipduringpause": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "If cheats are enabled, then you can noclip with the game paused (for doing screenshots, etc.)."
    },
    "sv_noclipfriction": {
        "default_value": "4",
        "flags": [
            "gamedll",
            "archive",
            "notify",
            "replicated"
        ],
        "help_text": "Friction during noclip move."
    },
    "sv_noclipspeed": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "archive",
            "notify",
            "replicated"
        ]
    },
    "sv_parallel_packentities": {
        "default_value": "1",
        "help_text": "Set to 1 to use threading snapshot sending on listen servers, 2 for dedicated servers."
    },
    "sv_parallel_sendsnapshot": {
        "default_value": "1",
        "help_text": "Set to 1 to use threading snapshot sending on listen servers, 2 for dedicated servers."
    },
    "sv_password": {
        "flags": [
            "protected",
            "notify",
            "dont_record",
            "release"
        ],
        "help_text": "Server password for entry into multiplayer games"
    },
    "sv_pausable": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "Is the server pausable."
    },
    "sv_pause_on_console_open": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "1 = Pause the game when pressing ~ to open the console. CTRL+~ opens the console without pause."
    },
    "sv_phys_animated_hierarchy": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "sv_phys_debug_callback_entities": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Print all entities that get touch callbacks. Each entity is printed only once."
    },
    "sv_phys_sleep_enable": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Enable sleeping for dynamic physics bodies."
    },
    "sv_phys_stop_at_collision": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "sv_phys_visualize_awake": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "sv_player_stuck_tolerance": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "sv_prop_door_max_close_attempts": {
        "default_value": "8",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Number of times blocked doors will try to close before becoming non-solid and forcing a close."
    },
    "sv_pure_kick_clients": {
        "default_value": "1",
        "flags": [
            "release"
        ],
        "help_text": "If set to 1, the server will kick clients with mismatching files. Otherwise, it will issue a warning to the client."
    },
    "sv_pure_trace": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "If set to 1, the server will print a message whenever a client is verifying a CRC for a file."
    },
    "sv_pvs_entity": {
        "default_value": "-1",
        "flags": [
            "gamedll"
        ],
        "help_text": "If set, only allows this ent index to network (other than players and things that force sending)."
    },
    "sv_pvs_random": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If set, objects blink in/out of pvs randomly."
    },
    "sv_radial_vis": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Use Radial vis for networking PVS checks."
    },
    "sv_rcon_banpenalty": {
        "default_value": "0",
        "help_text": "Number of minutes to ban users who fail rcon authentication",
        "min_value": 0
    },
    "sv_rcon_log": {
        "default_value": "1",
        "help_text": "Enable/disable rcon logging."
    },
    "sv_rcon_maxfailures": {
        "default_value": "10",
        "help_text": "Max number of times a user can fail rcon authentication before being banned",
        "max_value": 20,
        "min_value": 1
    },
    "sv_rcon_minfailures": {
        "default_value": "5",
        "help_text": "Number of times a user can fail rcon authentication in sv_rcon_minfailuretime before being banned",
        "max_value": 20,
        "min_value": 1
    },
    "sv_rcon_minfailuretime": {
        "default_value": "30",
        "help_text": "Number of seconds to track failed rcon authentications",
        "min_value": 1
    },
    "sv_regeneration_force_on": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Cheat to test regenerative health systems"
    },
    "sv_regeneration_wait_time": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "sv_region": {
        "default_value": "-1",
        "flags": [
            "release"
        ],
        "help_text": "The region of the world to report this server in."
    },
    "sv_remapper_loopsoundfix": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "sv_remapper_range_multiplier": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "sv_replaysdir": {
        "default_value": "replays",
        "help_text": "Directory to store replays in"
    },
    "sv_reservation_grace": {
        "default_value": "5",
        "help_text": "Time in seconds given for a lobby reservation.",
        "max_value": 30,
        "min_value": 3
    },
    "sv_reservation_timeout": {
        "default_value": "120",
        "flags": [
            "release"
        ],
        "help_text": "Time in seconds before lobby reservation expires.",
        "max_value": 180,
        "min_value": 5
    },
    "sv_script_profile": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "sv_script_think_interval": {
        "default_value": "0.1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "sv_search_key": {
        "flags": [
            "release"
        ]
    },
    "sv_sequence_debug": {
        "default_value": "-1",
        "flags": [
            "gamedll"
        ]
    },
    "sv_sequence_debug2": {
        "default_value": "-1",
        "flags": [
            "gamedll"
        ]
    },
    "sv_sequence_debug_verbose": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "sv_session_persister_mode": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "0 = OFF, 1 = ON, 2 = w/SPAWN MANAGER, 3 = w/PLAYER & WEAPONS"
    },
    "sv_shared_team_pvs": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "PVS is shared between teams"
    },
    "sv_show_whitelist_msg": {
        "default_value": "0",
        "flags": [
            "hidden"
        ]
    },
    "sv_showfootsteps": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Shows client (red) and server (green) footsteps (1=client-only, 2=server-only, 3=both)"
    },
    "sv_showladders": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Show bbox and dismount points for all ladders (must be set before level load.)\n"
    },
    "sv_showlagcompensation": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Show lag compensated hitboxes whenever a player is lag compensated."
    },
    "sv_skyname": {
        "default_value": "sky_urb01",
        "flags": [
            "gamedll",
            "archive",
            "replicated"
        ],
        "help_text": "Current name of the skybox texture"
    },
    "sv_snapshot_unlimited": {
        "default_value": "0",
        "flags": [
            "replicated",
            "release"
        ],
        "help_text": "For debugging, don't throw away old snapshots so that if you break in debugger (on remote client or server) it won't require an uncompressed update to resume.  You may run out of memory of course..."
    },
    "sv_soundemitter_trace": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Show all EmitSound calls including their symbolic name and the actual wave file they resolved to. (-1 = for nobody, 0 = for everybody, n = for one entity)\n"
    },
    "sv_specaccelerate": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "archive",
            "notify",
            "replicated"
        ]
    },
    "sv_specnoclip": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive",
            "notify",
            "replicated"
        ]
    },
    "sv_specspeed": {
        "default_value": "3",
        "flags": [
            "gamedll",
            "archive",
            "notify",
            "replicated"
        ]
    },
    "sv_stats": {
        "default_value": "1",
        "help_text": "Collect CPU usage stats"
    },
    "sv_steamgroup": {
        "flags": [
            "notify",
            "release"
        ],
        "help_text": "The ID of the steam group that this server belongs to. You can find your group's ID on the admin profile page in the steam community."
    },
    "sv_steamgroup_exclusive": {
        "default_value": "0",
        "flags": [
            "release"
        ],
        "help_text": "If set, only members of Steam group will be able to join the server when it's empty, public people will be able to join the server only if it has players."
    },
    "sv_strict_notarget": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If set, notarget will cause entities to never think they are in the pvs"
    },
    "sv_sync_anims_spawn": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "sv_sync_client_updates": {
        "default_value": "0",
        "help_text": "(Only used when hosting xbox games). Send clients updates at the same time. This saves CPU because the server will encode and calc deltas on less frames."
    },
    "sv_tags": {
        "flags": [
            "notify",
            "release"
        ],
        "help_text": "Server tags. Used to provide extra information to clients when they're browsing for servers. Separate tags with a comma."
    },
    "sv_temp_baseline_string_table_buffer_size": {
        "default_value": "524288",
        "help_text": "Buffer size for writing string table baselnes"
    },
    "sv_timeout": {
        "default_value": "20",
        "help_text": "After this many seconds without a message from fully connected client, the client is dropped"
    },
    "sv_timeout_when_fully_connected": {
        "default_value": "15",
        "flags": [
            "gamedll"
        ],
        "help_text": "Once fully connected, player will be kicked if he doesn't send a network message within this interval."
    },
    "sv_timeout_when_fully_connected_customgame": {
        "default_value": "30",
        "flags": [
            "gamedll"
        ],
        "help_text": "Once fully connected in a custom game game, player will be kicked if they don't send a network message within this interval."
    },
    "sv_timeout_when_fully_connected_tournament": {
        "default_value": "5",
        "flags": [
            "gamedll"
        ],
        "help_text": "Once fully connected in a tournament game, player will be kicked if he doesn't send a network message within this interval."
    },
    "sv_tracereffects_limit_general": {
        "default_value": "15",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Limits the number of visible tracers per frame"
    },
    "sv_turbophysics": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Turns on turbo physics"
    },
    "sv_unlockedchapters": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Highest unlocked game chapter."
    },
    "sv_update_master_server": {
        "default_value": "1",
        "flags": [
            "release"
        ],
        "help_text": "Should we update the master server."
    },
    "sv_use_snp": {
        "default_value": "0",
        "flags": [
            "dont_record",
            "release"
        ],
        "help_text": "-1:no, 0:let client decide, +1:yes"
    },
    "sv_usenetworkvars": {
        "default_value": "1",
        "help_text": "Use networkvar system."
    },
    "sv_usercmd_queue_spew_threshold": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "Spew warning if command queue has grown above this many backlogged commands."
    },
    "sv_vehicle_autoaim_scale": {
        "default_value": "8",
        "flags": [
            "gamedll"
        ]
    },
    "sv_visiblemaxplayers": {
        "default_value": "-1",
        "flags": [
            "release"
        ],
        "help_text": "Overrides the max players reported to prospective clients"
    },
    "sv_voicecodec": {
        "default_value": "vaudio_speex",
        "help_text": "Specifies which voice codec DLL to use in a game. Set to the name of the DLL without the extension."
    },
    "sv_voiceenable": {
        "default_value": "1",
        "flags": [
            "archive",
            "notify",
            "release"
        ]
    },
    "sv_watchtransmit": {
        "default_value": "-2",
        "flags": [
            "gamedll",
            "release"
        ],
        "help_text": "Watch NetworkStateChanged info for this entity index."
    },
    "sys_minidumpexpandedspew": {
        "default_value": "1"
    },
    "sys_minidumpspewlines": {
        "default_value": "2000",
        "flags": [
            "release"
        ],
        "help_text": "Lines of crash dump console spew to keep."
    },
    "target_scan_use_query_cache": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ]
    },
    "tauntfrequency": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "notify"
        ]
    },
    "template_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "test_restoreonnewmodel": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "testscript_debug": {
        "default_value": "0",
        "help_text": "Debug test scripts."
    },
    "tf_escort_score_rate": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Score for escorting the train, in points per second"
    },
    "tf_server_client_connect_timeout_s": {
        "default_value": "2.0",
        "flags": [
            "gamedll"
        ]
    },
    "tf_server_client_read_timeout_s": {
        "default_value": "2.0",
        "flags": [
            "gamedll"
        ]
    },
    "tf_server_client_write_timeout_s": {
        "default_value": "2.0",
        "flags": [
            "gamedll"
        ]
    },
    "tf_server_idle_timeout_s": {
        "default_value": "30.0",
        "flags": [
            "gamedll"
        ]
    },
    "tf_server_num_servers": {
        "default_value": "3",
        "flags": [
            "gamedll"
        ]
    },
    "think_limit": {
        "default_value": "10",
        "flags": [
            "gamedll",
            "replicated",
            "release"
        ],
        "help_text": "Maximum think time in milliseconds, warning is printed if this is exceeded."
    },
    "timedemo_end": {
        "default_value": "-1",
        "help_text": "Ends timedemo on given tick."
    },
    "timedemo_start": {
        "default_value": "-1",
        "help_text": "Starts timedemo on given tick."
    },
    "tv_allow_camera_man": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Auto director allows spectators to become camera man"
    },
    "tv_allow_static_shots": {
        "default_value": "1",
        "flags": [
            "gamedll"
        ],
        "help_text": "Auto director uses fixed level cameras for shots"
    },
    "tv_autorecord": {
        "default_value": "0",
        "help_text": "Automatically records all games as SourceTV demos."
    },
    "tv_autoretry": {
        "default_value": "1",
        "help_text": "Relay proxies retry connection after network timeout"
    },
    "tv_chatgroupsize": {
        "default_value": "0",
        "help_text": "Set the default chat group size"
    },
    "tv_chattimelimit": {
        "default_value": "0.2",
        "help_text": "Limits spectators to chat only every n seconds"
    },
    "tv_debug": {
        "default_value": "0",
        "help_text": "SourceTV debug info."
    },
    "tv_delay": {
        "default_value": "120",
        "flags": [
            "gamedll"
        ],
        "help_text": "SourceTV broadcast delay in seconds",
        "max_value": 360,
        "min_value": 0
    },
    "tv_deltacache": {
        "default_value": "2",
        "help_text": "Enable delta entity bit stream cache"
    },
    "tv_demo_starttick": {
        "default_value": "0"
    },
    "tv_dispatchmode": {
        "default_value": "1",
        "help_text": "Dispatch clients to relay proxies: 0=never, 1=if appropriate, 2=always"
    },
    "tv_dota_auto_record": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If enabled, a demo will automatically be recorded for every game"
    },
    "tv_dota_auto_record_stressbots": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "If enabled, a demo will automatically be recorded for stressbot games"
    },
    "tv_enable": {
        "default_value": "0",
        "flags": [
            "notify"
        ],
        "help_text": "Activates SourceTV on server."
    },
    "tv_enable_delta_frames": {
        "default_value": "1",
        "help_text": "Indicates whether or not the tv should use delta frames for storage of intermediate frames. This takes more CPU but significantly less memory."
    },
    "tv_extended_logging": {
        "default_value": "0"
    },
    "tv_grouprelaydatareliable": {
        "default_value": "0",
        "help_text": "When enabled, this will collect all information for relay sending into a single datagram to ensure that the data stays together through a potentially large number of relays"
    },
    "tv_grouprelaydataunreliable": {
        "default_value": "0",
        "help_text": "When enabled, this will collect all information for relay sending into a single datagram to ensure that the data stays together through a potentially large number of relays"
    },
    "tv_grouprelaydatavoice": {
        "default_value": "0",
        "help_text": "Similar to tv_grouprelaydata, but controls whether or not the voice channels should be routed into the grouped data for the relays"
    },
    "tv_instant_replay_full_frame": {
        "default_value": "1",
        "help_text": "Send embedded full frames"
    },
    "tv_instant_replay_full_frame_build_threaded": {
        "default_value": "0",
        "help_text": "Build the full frames on a seperate job thread"
    },
    "tv_instant_replay_full_frame_time": {
        "default_value": "30",
        "help_text": "Seconds between full frame embeddeds"
    },
    "tv_log_director_events": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ],
        "help_text": "Log game events being considered by the director"
    },
    "tv_maxclients": {
        "default_value": "128",
        "help_text": "Maximum client number on SourceTV server.",
        "max_value": 255,
        "min_value": 0
    },
    "tv_maxrate": {
        "default_value": "0",
        "help_text": "Max SourceTV spectator bandwidth rate allowed, 0 == unlimited"
    },
    "tv_name": {
        "default_value": "SourceTV",
        "help_text": "SourceTV host name"
    },
    "tv_nochat": {
        "default_value": "0",
        "flags": [
            "archive",
            "userinfo"
        ],
        "help_text": "Don't receive chat messages from other SourceTV spectators"
    },
    "tv_overridemaster": {
        "default_value": "0",
        "help_text": "Overrides the SourceTV master root address."
    },
    "tv_password": {
        "flags": [
            "protected",
            "notify",
            "dont_record"
        ],
        "help_text": "SourceTV password for all clients"
    },
    "tv_port": {
        "default_value": "PORT_HLTV",
        "flags": [
            "release"
        ],
        "help_text": "Host SourceTV port"
    },
    "tv_rate_multiplier": {
        "default_value": "2",
        "help_text": "Multiply requested rate by this value to adjust Dota TV send rate"
    },
    "tv_relay_quit_after_game": {
        "default_value": "1",
        "help_text": "Quit after a game has been relayed, do not hibernate"
    },
    "tv_relay_rate": {
        "default_value": "500000",
        "help_text": "default rate for relays"
    },
    "tv_relay_secret_code": {
        "default_value": "1",
        "flags": [
            "protected"
        ],
        "help_text": "When enabled, this will use a uniquely generated server code to authenticate relay to relay connections. This code is coordinated via the GC or some external means rather than by clients directly"
    },
    "tv_relaypassword": {
        "flags": [
            "protected",
            "notify",
            "dont_record"
        ],
        "help_text": "SourceTV password for relay proxies"
    },
    "tv_relayvoice": {
        "default_value": "1",
        "help_text": "Relay voice data: 0=off, 1=on"
    },
    "tv_secret_code": {
        "default_value": "1",
        "flags": [
            "protected"
        ],
        "help_text": "When enabled, this will use a uniquely generated server code to authenticate relay connections. This code is coordinated via the GC or some external means rather than by clients directly"
    },
    "tv_show_allchat": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "release"
        ]
    },
    "tv_snapshotrate": {
        "default_value": "20",
        "help_text": "Snapshots broadcasted per second"
    },
    "tv_timeout": {
        "default_value": "20",
        "help_text": "SourceTV connection timeout in seconds."
    },
    "tv_title": {
        "default_value": "SourceTV",
        "help_text": "Set title for SourceTV spectator UI"
    },
    "tv_transmitall": {
        "default_value": "0",
        "flags": [
            "replicated"
        ],
        "help_text": "Transmit all entities (not only director view)"
    },
    "tv_window_size": {
        "default_value": "16.0",
        "help_text": "Specifies the number of seconds worth of frames that the tv replay system should keep in memory. Increasing this greatly increases the amount of memory consumed by the TV system"
    },
    "use_new_damage_system": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "vgui_drawfocus": {
        "default_value": "0",
        "help_text": "Report which panel is under the mouse."
    },
    "vgui_drawkeyfocus": {
        "default_value": "0",
        "help_text": "Report which panel has keyboard focus."
    },
    "viewmodel_offset_x": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "clientdll",
            "archive",
            "replicated"
        ]
    },
    "viewmodel_offset_y": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "clientdll",
            "archive",
            "replicated"
        ]
    },
    "viewmodel_offset_z": {
        "default_value": "0.0",
        "flags": [
            "gamedll",
            "clientdll",
            "archive",
            "replicated"
        ]
    },
    "violence_ablood": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Draw alien blood"
    },
    "violence_agibs": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Show alien gib entities"
    },
    "violence_hblood": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Draw human blood"
    },
    "violence_hgibs": {
        "default_value": "1",
        "flags": [
            "archive"
        ],
        "help_text": "Show human gib entities"
    },
    "vis_enable": {
        "default_value": "1",
        "help_text": "Toggle static visibility"
    },
    "vis_force": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "vismon_poll_frequency": {
        "default_value": ".5",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "vismon_trace_limit": {
        "default_value": "12",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "vm_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vm_fade": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "voice_always_sample_mic": {
        "default_value": "0",
        "flags": [
            "archive"
        ],
        "help_text": "For systems experiencing a hang/stall when using voice chat."
    },
    "voice_debugfeedbackfrom": {
        "default_value": "0"
    },
    "voice_fadeouttime": {
        "default_value": "0.005"
    },
    "voice_initial_buffer_ms": {
        "default_value": "200"
    },
    "voice_loopback": {
        "default_value": "0",
        "flags": [
            "userinfo"
        ]
    },
    "voice_min_buffer_ms": {
        "default_value": "100"
    },
    "voice_minimum_gain": {
        "default_value": "3.0"
    },
    "voice_player_speaking_delay_threshold": {
        "default_value": "0.5f",
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "voice_scale": {
        "default_value": "1",
        "flags": [
            "archive"
        ]
    },
    "voice_sequence_maximum_wait_time": {
        "default_value": "0.5",
        "help_text": "When receiving packets out of sequence, wait this many seconds for missing sequences to arrive"
    },
    "voice_serverdebug": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "voice_stall_ms": {
        "default_value": "250"
    },
    "voice_steal": {
        "default_value": "2"
    },
    "voice_threshold": {
        "default_value": "4000",
        "flags": [
            "clientdll",
            "archive"
        ]
    },
    "voice_threshold_delay": {
        "default_value": "0.5"
    },
    "voice_xsend_debug": {
        "default_value": "0"
    },
    "volume": {
        "default_value": "1.0",
        "flags": [
            "archive"
        ],
        "help_text": "Sound volume",
        "max_value": 1,
        "min_value": 0
    },
    "vphys2_angular_damping": {
        "default_value": "0.05"
    },
    "vphys2_angular_damping_in_water": {
        "default_value": "0.5"
    },
    "vphys2_artificial_acceleration": {
        "default_value": "0"
    },
    "vphys2_buoyancy_damping": {
        "default_value": "0.5"
    },
    "vphys2_buoyancy_version": {
        "default_value": "0"
    },
    "vphys2_default_max_velocity": {
        "default_value": "2000",
        "flags": [
            "cheat"
        ],
        "help_text": "max object velocity, in/s"
    },
    "vphys2_enable_buoyancy": {
        "default_value": "1"
    },
    "vphys2_enable_variable_timestep": {
        "default_value": "1"
    },
    "vphys2_expensive_sync_warning": {
        "default_value": "320000"
    },
    "vphys2_linear_damping": {
        "default_value": "0.0"
    },
    "vphys2_linear_damping_in_water": {
        "default_value": "0.5"
    },
    "vphys2_mesh_contact_clusters": {
        "default_value": "0"
    },
    "vphys2_ragdoll_joint_or": {
        "default_value": "1.2"
    },
    "vphys2_solver_batch_size": {
        "default_value": "16"
    },
    "vphys2_water_density_multiplier": {
        "default_value": "1"
    },
    "vphysics_force_apply_magnitude": {
        "default_value": "1.0"
    },
    "vprof_counters": {
        "default_value": "0"
    },
    "vprof_counters_show_minmax": {
        "default_value": "0"
    },
    "vprof_scope_entity_gamephys": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "vprof_scope_entity_thinks": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vprof_think_limit": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "vr_allow_zero_tracking": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_always_teleport_player": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_anchor_allow_non_up_floor": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Allows anchor teleportation onto walls and ceiling. NOTE: WIP, mostly broken!"
    },
    "vr_debug_velocity": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_depth_submit": {
        "default_value": "0"
    },
    "vr_dump_lights": {
        "default_value": "0"
    },
    "vr_enable_lights": {
        "default_value": "1"
    },
    "vr_hand_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_hand_disable_item_pickup_events": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_hand_knuckles_use_grip": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_hand_left_attachment_rotation": {
        "default_value": "0 0 0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Rotation offset from the base Attachment point (for testing)"
    },
    "vr_hand_model": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_hand_right_attachment_offset": {
        "default_value": "0 0 0",
        "flags": [
            "gamedll",
            "replicated"
        ],
        "help_text": "Rotation offset from the base Attachment point (for testing)"
    },
    "vr_hide_viewmodel": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "vr_hmd_positions_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ],
        "help_text": "Makes local player HMD avatar visible slightly in front of its actual position."
    },
    "vr_hmd_tracking_passthrough": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_interaction_anglediff": {
        "default_value": "35",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_interaction_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_interaction_deltaspeed": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_interaction_dist_break": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_interaction_dist_search": {
        "default_value": "8",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_interaction_dist_start": {
        "default_value": "5",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_middle_finger_grip": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_msaa_submit": {
        "default_value": "0"
    },
    "vr_panel_view_focus_max_distance": {
        "default_value": "200",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_proto_overlay": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_spawn_at_player_start": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Whether to spawn the player or the anchor at the info_player_start. (0 = Honor the info_player_start spawnflags, 1 = spawn at the info_player_start position)"
    },
    "vr_throw_ang_scale": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_throw_velocity_scale": {
        "default_value": "1.6",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_track_lost_hand_bug_debug": {
        "default_value": "0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_tracked_object_client_can_be_authoritative_for_transform": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "vr_tracked_object_positions_debug": {
        "default_value": "-1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "vr_tracked_object_post_projection": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "vr_tracked_objects_solid": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated",
            "cheat"
        ]
    },
    "vr_unlit_shadow_color": {
        "default_value": "125 130 135"
    },
    "vr_use_absolute_tracking": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "vr_world_scale": {
        "default_value": "1.0",
        "flags": [
            "gamedll",
            "replicated"
        ]
    },
    "weapon_showproficiency": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "xbox_autothrottle": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "archive"
        ]
    },
    "xbox_steering_deadzone": {
        "default_value": "0.0",
        "flags": [
            "gamedll"
        ]
    },
    "xbox_throttlebias": {
        "default_value": "100",
        "flags": [
            "gamedll",
            "archive"
        ]
    },
    "xbox_throttlespoof": {
        "default_value": "200",
        "flags": [
            "gamedll",
            "archive"
        ]
    },
    "xc_crouch_debounce": {
        "default_value": "0",
        "flags": [
            "gamedll"
        ]
    },
    "z_door_reopen_interval": {
        "default_value": "0.5",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Closed doors can be re-opened after this amount of time"
    },
    "z_door_retry_interval": {
        "default_value": "1",
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Interval at which blocked doors will try to reopen"
    }
}