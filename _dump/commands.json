{
    "+bugvoice": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Start recording bug voice attachment."
    },
    "-bugvoice": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Finish recording bug voice attachment."
    },
    "CreatePredictionError": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Create a prediction error"
    },
    "Test_CreateEntity": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_EHandle": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_ExitProcess": {
        "flags": [
            "cheat"
        ],
        "help_text": "Test_ExitProcess <exit code> - immediately kill the process."
    },
    "Test_InitRandomEntitySpawner": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_Loop": {
        "help_text": "Test_Loop <loop name> - loop back to the specified loop start point unconditionally."
    },
    "Test_LoopCount": {
        "help_text": "Test_LoopCount <loop name> <count> - loop back to the specified loop start point the specified # of times."
    },
    "Test_LoopForNumSeconds": {
        "help_text": "Test_LoopForNumSeconds <loop name> <time> - loop back to the specified start point for the specified # of seconds."
    },
    "Test_RandomChance": {
        "help_text": "Test_RandomChance <percent chance, 0-100> <token1> <token2...> - Roll the dice and maybe run the command following the percentage chance."
    },
    "Test_RandomPlayerPosition": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_RandomizeInPVS": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_RemoveAllRandomEntities": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_SpawnRandomEntities": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "Test_StartLoop": {
        "help_text": "Test_StartLoop <loop name> - Denote the start of a loop. Really just defines a named point you can jump to."
    },
    "Test_StartScript": {
        "help_text": "Start a test script running.."
    },
    "UpdateBinarySizes": {
        "help_text": "Dumps the binary sizes to use for the game in loadaddress.vpc"
    },
    "_record": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Record a demo incrementally."
    },
    "_resetgamestats": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Erases current game stats and writes out a blank stats file"
    },
    "add_dire_player": {
        "help_text": "add_dire_player <steamid64> <name> [hero enttiy name]"
    },
    "add_radiant_player": {
        "help_text": "add_radiant_player <steamid64> <name> [hero entity name]"
    },
    "add_spectator_player": {
        "help_text": "add_spectator_player <steamid64> [name]"
    },
    "addip": {
        "help_text": "Add an IP address to the ban list."
    },
    "addons": {
        "help_text": "list current addon info."
    },
    "ai_test_los": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Test AI LOS from the player's POV"
    },
    "ainet_generate_report": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Generate a report to the console."
    },
    "ainet_generate_report_only": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Generate a report to the console."
    },
    "alias": {
        "help_text": "Alias a command."
    },
    "animevents_dump": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "List all the currently registered anim events.\n"
    },
    "async_resume": {},
    "async_suspend": {},
    "async_track_all": {
        "help_text": "Enable all registered asynchronous tracking convars at once"
    },
    "auto_bug": {
        "flags": [
            "dont_record"
        ],
        "help_text": "auto_bug : create non-interactive bug report."
    },
    "banid": {
        "help_text": "Add a user ID to the ban list."
    },
    "banip": {
        "help_text": "Add an IP address to the ban list."
    },
    "benchframe": {
        "help_text": "Takes a snapshot of a particular frame in a time demo."
    },
    "bind": {
        "flags": [
            "release"
        ],
        "help_text": "Bind a key."
    },
    "binddefaults": {
        "flags": [
            "release"
        ],
        "help_text": "Bind all keys to their default values."
    },
    "bindss": {
        "flags": [
            "release"
        ],
        "help_text": "Bind a key for a particular splitscreen player."
    },
    "bindtoggle": {
        "help_text": "Performs a bind <key> \"increment var <cvar> 0 1 1\"."
    },
    "blackbox_dump": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Dump the contents of the blackbox"
    },
    "blackbox_record": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Record an entry into the blackbox"
    },
    "blink": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Blink specified convar value between two values at the specified duration."
    },
    "box": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Draw a bbox\n\tArguments:  minx miny miny maxx maxy maxz <lifetime = 10.0> <r g b a>\n"
    },
    "bug": {
        "flags": [
            "dont_record"
        ],
        "help_text": "bug [auto_fill_tokens] [-title <text>] [-noscreenshot] : Activate the bug reporter."
    },
    "bug_swap": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Automatically swaps the current weapon for the bug bait and back again."
    },
    "bugvoice_clear": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Clear voice attachment data."
    },
    "bugvoice_save": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Write buffered voice attachment data to file."
    },
    "cast_hull": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Tests hull collision detection"
    },
    "cast_ray": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Tests collision detection"
    },
    "changelevel": {
        "help_text": "changelevel <mapname> :Multiplayer change level."
    },
    "changelevel2": {
        "help_text": "changelevel2 <mapname> :Singe player change level."
    },
    "check_dpi": {
        "help_text": "Show the currently detected DPI."
    },
    "cl_consistencycheck": {
        "flags": [
            "hidden",
            "server_can_execute"
        ],
        "help_text": "Triggers the client to perform a consistency check"
    },
    "cl_fullupdate": {
        "flags": [
            "cheat"
        ],
        "help_text": "Force uncompressed update"
    },
    "cl_precacheinfo": {
        "help_text": "Show precache info (client)."
    },
    "cl_print_consistency_list": {
        "flags": [
            "release"
        ],
        "help_text": "Display's the contents and flags of the current consistency list"
    },
    "cl_spewserializers": {
        "flags": [
            "cheat"
        ],
        "help_text": "Spew serializers"
    },
    "clear": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Clear console output."
    },
    "clearall": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Clear console output from all views."
    },
    "cmd": {
        "help_text": "Forward command to server."
    },
    "collect_entity_model_name": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Collect model names of the entities you're pointing at"
    },
    "commentary_cvarsnotchanging": {
        "flags": [
            "gamedll"
        ]
    },
    "commentary_finishnode": {
        "flags": [
            "gamedll"
        ]
    },
    "condump": {
        "help_text": "dump the text currently in the console to condumpXX.log"
    },
    "connect": {
        "help_text": "Connect to a remote server."
    },
    "connect_hltv": {
        "help_text": "Connect to a remote HLTV server."
    },
    "consoletool": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Open a VConsole subtool."
    },
    "cpuinfo": {
        "help_text": "Print CPU configuration information"
    },
    "crash": {
        "flags": [
            "cheat"
        ],
        "help_text": "Crash the client. Optional parameter -- type of crash:\n 0: read from NULL\n 1: write to NULL\n 2: DmCrashDump() (xbox360 only)\n 3: Same but with full heap\n 4: force an Assert"
    },
    "crash_error": {
        "flags": [
            "cheat"
        ],
        "help_text": "Cause the engine to crash by spewing an error (Debug!!)"
    },
    "crash_job": {
        "flags": [
            "cheat"
        ],
        "help_text": "Cause the engine to crash in a job thread (Debug!!)"
    },
    "crash_thread": {
        "flags": [
            "cheat"
        ],
        "help_text": "Cause the engine to crash in a brand new non-main thread (Debug!!)"
    },
    "create_flashlight": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "creditsdone": {
        "flags": [
            "gamedll"
        ]
    },
    "customgamesetup_auto_assign_players": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Automatically assign all curently unassigned player to teams."
    },
    "customgamesetup_enable_auto_launch": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Enable or disable automatically launching the game when all players are assigned to a team."
    },
    "customgamesetup_lock_team_selection": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Lock or unlock the team selection, when locked players cannot change teams."
    },
    "customgamesetup_select_team": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Player selecting a team during custom game setup."
    },
    "customgamesetup_set_auto_launch_delay": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Set the amount of time in seconds that will be set as the remaining time when all players are assigned to a team."
    },
    "customgamesetup_set_remaining_time": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Set the number of seconds remaining before the game starts."
    },
    "customgamesetup_shuffle_players": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Shuffle the team assignments of all players currently assigned to a team."
    },
    "cvarlist": {
        "help_text": "Show the list of convars/concommands."
    },
    "d2lobby_debug": {},
    "dbghist_addline": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Add a line to the debug history. Format: <category id> <line>"
    },
    "dbghist_dump": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dump the debug history to the console. Format: <category id>\n    Categories:\n     0: Entity I/O\n     1: AI Decisions\n     2: Scene Print\n     3: Alyx Blind\n     4: Log of damage done to player"
    },
    "debugoverlay_toggle": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles visibility of the debug overlay system."
    },
    "demo_goto": {
        "help_text": "Skips to location in demo."
    },
    "demo_gotomark": {
        "help_text": "Skips the current demo playback to the marked tick"
    },
    "demo_gototick": {
        "help_text": "Skips to a tick in demo."
    },
    "demo_info": {
        "help_text": "Print information about currently playing demo."
    },
    "demo_marktick": {
        "help_text": "Marks the current demo playback tick for later use"
    },
    "demo_pause": {
        "help_text": "Pauses demo playback."
    },
    "demo_resume": {
        "help_text": "Resumes demo playback."
    },
    "demo_timescale": {
        "help_text": "Sets demo replay speed."
    },
    "demo_togglepause": {
        "help_text": "Toggles demo playback."
    },
    "demolist": {
        "help_text": "Print demo sequence list."
    },
    "demos": {
        "help_text": "Demo demo file sequence."
    },
    "dev_simulate_gcdown": {
        "flags": [
            "gamedll"
        ],
        "help_text": "<state> Turn on/off simulated GC communications failure (GC is down in a way that we know it is down)"
    },
    "differences": {
        "help_text": "Show all convars which are not at their default values (optional restricted to specific flags)."
    },
    "disconnect": {
        "help_text": "Disconnect from server"
    },
    "dota_ability_dump_refcounts": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dumps the modifier refcounts of all hero abilities"
    },
    "dota_animation_run": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_bot_avg_fps": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Reports the average fps for this dota game"
    },
    "dota_bot_debug_clear": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Disables all bot debugging."
    },
    "dota_bot_debug_clear_all": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Disables all bot debugging."
    },
    "dota_bot_debug_grid_cycle": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Cycles through grid modes."
    },
    "dota_bot_debug_minimap_cycle": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Cycles through different minimap debug modes."
    },
    "dota_bot_disconnect_player": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Disconnects the player owner of all bots"
    },
    "dota_bot_dump_state": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Dumps the entire bot state to the client"
    },
    "dota_bot_give_gold": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Gives all bots the specified amount of gold."
    },
    "dota_bot_give_item": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Creates an item for all bots."
    },
    "dota_bot_give_level": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Gives all bots the specified number of levels."
    },
    "dota_bot_populate": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Populates the remaining slots with bots"
    },
    "dota_bot_potential_debug": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays potential locations for this bot."
    },
    "dota_bot_reload_scripts": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Reloads all the bot scripts"
    },
    "dota_bot_select_debug": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays general bot debugging information."
    },
    "dota_bot_select_debug_attack": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays debugging info on potential attack targets."
    },
    "dota_bot_set_difficulty": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Sets all bots to a particular difficulty (0 = easy, 1 = medium, 2 = hard, 3 = unfair."
    },
    "dota_call_gg": {
        "flags": [
            "gamedll",
            "hidden",
            "server_can_execute"
        ]
    },
    "dota_cancel_GG": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Cancel GG call"
    },
    "dota_combatlog_size_server": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_combatlog_summary": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_combatlog_update": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Send combat log to a client"
    },
    "dota_commander_report": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Prints a snapshot of the commander's state"
    },
    "dota_create_bot_wearing_item": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Creates a bot wearing a given item def index."
    },
    "dota_create_bot_wearing_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Creates a bot wearing a given set of items from a bundle object."
    },
    "dota_create_fake_clients": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Populates the remaining slots with fake clients"
    },
    "dota_create_item": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Creates an item for the selected unit"
    },
    "dota_create_neutral_hero": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Creates an unit"
    },
    "dota_create_unit": {
        "flags": [
            "gamedll",
            "vconsole_fuzzy_matching",
            "server_can_execute"
        ],
        "help_text": "Creates an unit"
    },
    "dota_daynightcycle_toggle": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggle the day-night cycle."
    },
    "dota_dev": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "DotA dev commands"
    },
    "dota_dump_all_player_stats": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_dump_buff_message_count": {
        "flags": [
            "gamedll"
        ],
        "help_text": "dota_dump_buff_message_count"
    },
    "dota_dump_connection_stats": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dump current connection stats"
    },
    "dota_dump_creep_stats": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays stats on creep denies/lasthits/kills."
    },
    "dota_dump_hero_history": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dump items and abilities that a hero has bought/leveled"
    },
    "dota_dump_server_asset_modifiers": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Dump asset modifiers on the server."
    },
    "dota_dump_server_inventory": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_gamestate": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Print current game state"
    },
    "dota_gridnav_perf_test": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_hud_wager_spoof": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Spoof a wager for a specific player"
    },
    "dota_kill_all_bots": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Destroys all bots"
    },
    "dota_kill_buildings": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Kill buildings."
    },
    "dota_kill_creeps": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Kill creeps."
    },
    "dota_leaver_status": {
        "flags": [
            "gamedll"
        ],
        "help_text": "List leaver status of players"
    },
    "dota_modifier_dump": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Dump all modifiers on all entities."
    },
    "dota_modifier_test": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Creates a test modifier on unit: dota_modifier_test <entityindex> <modifiername> <duration>"
    },
    "dota_ogs_report_vprof_force_now": {
        "flags": [
            "gamedll"
        ],
        "help_text": "testing only"
    },
    "dota_pick_hero": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Pick a hero for <player-id> <hero>"
    },
    "dota_ping": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Print out latency information"
    },
    "dota_player_status": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Gives a status update on all players."
    },
    "dota_preview_hero": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Pick hero for previewing"
    },
    "dota_record_hero": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Pick hero for recording"
    },
    "dota_record_hero_next": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Switch to next hero"
    },
    "dota_record_hero_prev": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Switch to prev hero"
    },
    "dota_ref_winner_dire": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Causes the dire team to win"
    },
    "dota_ref_winner_radiant": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Causes the radiant team to win"
    },
    "dota_respawn_roshan": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Respawn Roshan"
    },
    "dota_script_function_help": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Get help on registered script API functions and tables."
    },
    "dota_server_lobby_debug": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Prints server lobby object"
    },
    "dota_spawn_creeps": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Force spawn of all lane creeps."
    },
    "dota_spawn_creeps_mid": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Force spawn of all mid lane creeps."
    },
    "dota_spawn_neutrals": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Force spawn of all neutrals."
    },
    "dota_spawn_rune": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Spawns a rune"
    },
    "dota_start_auto_save_test": {
        "flags": [
            "gamedll",
            "hidden",
            "server_can_execute"
        ],
        "help_text": "Start an auto save game test"
    },
    "dota_state_disconnect": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Transition to disconnect state on a listen server"
    },
    "dota_test_challenge": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_test_custom_game_save": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Test custom game saving, only available from dota_launch_custom_game"
    },
    "dota_test_npc": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Creates a testing npc"
    },
    "dota_test_quest": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_test_teamshowcase": {
        "flags": [
            "gamedll"
        ]
    },
    "dota_treerespawn": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Respawns all trees on the map."
    },
    "dota_upload_replay": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Upload a replay file"
    },
    "drawcross": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Draws a cross at the given location\n\tArguments: x y z"
    },
    "drawline": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Draws line between two 3D Points.\n\tGreen if no collision\n\tRed is collides with something\n\tArguments: x1 y1 z1 x2 y2 z2"
    },
    "dump_commands": {
        "help_text": "dump_commands <path>"
    },
    "dump_convars": {
        "help_text": "dump_convars <path>"
    },
    "dump_globals": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dump all global entities/states"
    },
    "dump_localization_files": {
        "help_text": "List all loaded localization files."
    },
    "dump_modifier_list": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dumps all modifiers that exist in the game"
    },
    "dump_visible_buffs": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Print out non-hidden buffs."
    },
    "dumpparticlelist": {
        "help_text": "Print out information on existing particle systems"
    },
    "dumpparticleperf": {
        "help_text": "Write a spreadheeet describing particle performance to particle_profile.csv"
    },
    "dumpsavedir": {
        "flags": [
            "gamedll"
        ],
        "help_text": "List the contents of the save directory in memory"
    },
    "dumpstringtable": {
        "help_text": "Usage:  dumpstringtable tablename <sv | cl> <verbose>      Print string tables to console, verbose to dump data."
    },
    "echoln": {
        "help_text": "Echo the command arguments on the console"
    },
    "enable_bot_script_dump": {},
    "endmovie": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Stop recording movie frames."
    },
    "ent_absbox": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_animgraph_record": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles recording of animgraph replay of the given entity(s)\n\tArguments:\t\t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_animgraph_setvar": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Sets a variable on the animgraph of the given entity(s)\n\tArguments:   <varname>=<value>\t\t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_attachments": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the attachment points on an entity.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_autoaim": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the entity's autoaim radius.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
    },
    "ent_bbox": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the movement bounding box for the given entity(ies) in orange.  Some entites will also display entity specific overlays.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_call": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "ent_call <funcname> <option:entname> calls function on current look target or filtername, checks on ent, then root, then mode, then map scope"
    },
    "ent_cancelpendingentfires": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Cancels all ent_fire created outputs that are currently waiting for their delay to expire."
    },
    "ent_characterize": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Spew PVS debug info for entity"
    },
    "ent_clear_debug_overlays": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Clears all debug overlays"
    },
    "ent_create": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Creates an entity of the given type where the player is looking."
    },
    "ent_find": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Find and list all entities with classnames or targetnames that contain the specified substring.\nFormat: find_ent <substring>\n"
    },
    "ent_find_index": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Display data for entity matching specified index.\nFormat: find_ent_index <index>\n"
    },
    "ent_fire": {
        "flags": [
            "gamedll",
            "cheat",
            "vconsole_fuzzy_matching"
        ],
        "help_text": "Usage:\n   ent_fire <target> [action] [value] [delay]\n"
    },
    "ent_grab": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "grabs the object in front of the player. Options: -loose -multiple -toggle"
    },
    "ent_hitbox": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the hitboxes for the given entity(ies).\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_info": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Usage:\n   ent_info <class name>\n"
    },
    "ent_joints": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the joint names + axes an entity.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_messages": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles input/output message display for the selected entity(ies).  The name of the entity will be displayed as well as any messages that it sends or receives.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
    },
    "ent_name": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the entity name"
    },
    "ent_orient": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Orient the specified entity to match the player's angles. By default, only orients target entity's YAW. Use the 'allangles' option to orient on all axis.\n\tFormat: ent_orient <entity name> <optional: allangles>"
    },
    "ent_picker": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles 'picker' mode.  When picker is on, the bounding box, pivot and debugging text is displayed for whatever entity the player is looking at.\n\tArguments:\tfull - enables all debug information"
    },
    "ent_pivot": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the pivot for the given entity(ies).\n\t(y=up=green, z=forward=blue, x=left=red). \n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_remove": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Removes the given entity(s)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_remove_all": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Removes all entities of the specified type\n\tArguments:   \t{entity_name} / {class_name} "
    },
    "ent_rotate": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Rotates an entity by a specified # of degrees"
    },
    "ent_scale": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Scales entities.\tArguments: <scale factor> {entity_name} / {class_name} / no argument picks what player is looking at"
    },
    "ent_script_dump": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Dumps the names and values of this entity's script scope to the console\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_select": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Select or deselects the given entities(s) for later manipulation\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_setang": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Set entity angles"
    },
    "ent_setname": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Sets the targetname of the given entity(s)\n\tArguments:   \t{new entity name} {entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_setpos": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Move entity to position"
    },
    "ent_show_response_criteria": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Print, to the console, an entity's current criteria set used to select responses.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_skeleton": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the skeleton for the given entity(ies).\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_teleport": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Teleport the specified entity to where the player is looking.\n\tFormat: ent_teleport <entity name>"
    },
    "ent_text": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_text256": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays text debugging information about the given entity(ies) [within 256 units of the player] on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_text_clear": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Hide text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_text_filter": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set which ent_text filters you want: "
    },
    "ent_text_radius": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays text debugging information about the given entity(ies) [near the player] on top of the entity (See Overlay Text)\n\t2 Arguments:   \tRadius, {entity_name/class_name/ no argument picks what player is looking at}"
    },
    "ent_text_sticky_add": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Adds to list of names to display text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_text_sticky_clear": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Clears the list of names to display text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_text_sticky_dump": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Spews the list of names to display text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_text_sticky_remove": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Removes from the list of names to display text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_ungrab": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "un-grabs all objects"
    },
    "ent_vcollide_wireframe": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the interpolated vcollide wireframe pm am entity.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "ent_viewoffset": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the eye position for the given entity(ies) in red.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "entity_lump_list": {
        "help_text": "List all known entity lumps"
    },
    "entity_lump_spew": {
        "help_text": "Dump the contents of an entity lump"
    },
    "entityreport": {
        "help_text": "Reports all extant entities. Optional 2nd arg is a substring of a classname that the list will be filtered by."
    },
    "entitysummary": {
        "help_text": "Summarizes (by class) all extant entities. Optional 2nd arg is a substring of a classname that the list will be filtered by."
    },
    "ents": {
        "flags": [
            "gamedll"
        ],
        "help_text": "List server entities, sorted by spawn group"
    },
    "escape": {
        "flags": [
            "clientcmd_can_execute"
        ],
        "help_text": "Escape key pressed."
    },
    "exec": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Execute a cfg file"
    },
    "exec_async": {
        "flags": [
            "cheat",
            "dont_record"
        ],
        "help_text": "Execute a cfg file over time"
    },
    "execifexists": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Execute a cfg file if file exists"
    },
    "explode": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Kills the player with explosive damage"
    },
    "explodevector": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Kills a player applying an explosive force. Usage: explodevector <player> <x value> <y value> <z value>"
    },
    "fadein": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "fadein {time r g b}: Fades the screen in from black or from the specified color over the given number of seconds."
    },
    "fadeout": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "fadeout {time r g b}: Fades the screen to black or to the specified color over the given number of seconds."
    },
    "fake_meta_xp": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Fake meta xp values"
    },
    "find": {
        "help_text": "Find concommands with the specified string in their name/help text."
    },
    "findflags": {
        "help_text": "Find concommands by flags."
    },
    "finish_lobby_setup": {},
    "firetarget": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "fog_override_color": {
        "flags": [
            "cheat"
        ],
        "help_text": "Sets the fog color override"
    },
    "fow_server_stats": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "displays fog of war stats"
    },
    "fow_server_test_tempviewer": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "test a temp viewer"
    },
    "fp_trace": {
        "help_text": "Toggle field path tracing to file\n"
    },
    "fs_clear_open_duplicate_times": {
        "help_text": "Clear the list of files that have been opened."
    },
    "fs_dump_open_duplicate_times": {
        "help_text": "Set fs_report_long_reads 1 before loading to use this. Prints a list of files that were opened more than once and ~how long was spent reading from them."
    },
    "gameui_activate": {
        "help_text": "Shows the game UI"
    },
    "gameui_allowescape": {
        "help_text": "Escape key allowed to hide game UI"
    },
    "gameui_allowescapetoshow": {
        "help_text": "Escape key allowed to show game UI"
    },
    "gameui_hide": {
        "help_text": "Hides the game UI"
    },
    "gameui_preventescape": {
        "help_text": "Escape key doesn't hide game UI"
    },
    "gameui_preventescapetoshow": {
        "help_text": "Escape key doesn't show game UI"
    },
    "give": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Give item to player.\n\tArguments: <item_name>"
    },
    "givecurrentammo": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Give a supply of ammo for current weapon..\n"
    },
    "global_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "global_set <globalname> <state>: Sets the state of the given env_global (0 = OFF, 1 = ON, 2 = DEAD)."
    },
    "god": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Toggle. Player becomes invulnerable."
    },
    "grep": {
        "help_text": "grep line for pattern, print out matching lines only"
    },
    "groups": {
        "help_text": "Show status of all spawn groups."
    },
    "help": {
        "help_text": "Find help about a convar/concommand."
    },
    "hideconsole": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Hide the console."
    },
    "host_timescale_dec": {
        "flags": [
            "cheat"
        ],
        "help_text": "Decrement the timescale by one step"
    },
    "host_timescale_inc": {
        "flags": [
            "cheat"
        ],
        "help_text": "Increment the timescale by one step"
    },
    "host_writeconfig": {
        "help_text": "Saves out the user config values."
    },
    "hurtme": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Hurts the player.\n\tArguments: <health to lose>"
    },
    "ik_enable_only_this_chain": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Disables all chains except for the mentioned one on the selected entity(ies), by name of the chain.\n\tArguments:   \t{chain_name} [entity_name | {class_name} | no argument picks what player is looking at]"
    },
    "ik_toggle_chain": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles on a chain in the selected entity(ies), by name of the chain.\n\tArguments:   \t{chain_name} [entity_name | {class_name} | no argument picks what player is looking at]"
    },
    "incrementvar": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Increment specified convar value."
    },
    "instant_replay_goto_tick": {
        "help_text": "Goto a direct timestamp of the replay"
    },
    "instant_replay_live": {
        "help_text": "If in replay, jumps back to live"
    },
    "instant_replay_pause": {
        "help_text": "Pauses instant replay."
    },
    "instant_replay_resume": {
        "help_text": "Resumes instant replay."
    },
    "instant_replay_skip": {
        "help_text": "Number of seconds to skip back to instant replay from current position"
    },
    "instant_replay_skip_live": {
        "help_text": "Number of seconds to skip back to instant replay from live"
    },
    "instant_replay_timescale": {
        "help_text": "Sets instant replay speed."
    },
    "instant_replay_togglepause": {
        "help_text": "Toggles instant replay."
    },
    "item_show_whitelistable_definitions": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Lists the item definitions that can be whitelisted in the item_whitelist.txt file in tournament mode."
    },
    "jointeam": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Join a team"
    },
    "jpeg_screenshot": {
        "help_text": "Take a jpeg screenshot: jpeg_screenshot [filename] [quality 1-100]."
    },
    "key_findbinding": {
        "help_text": "Find key bound to specified command string."
    },
    "key_listboundkeys": {
        "help_text": "List bound keys with bindings."
    },
    "kick": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Kick a player by name."
    },
    "kickid": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Kick a player by userid or uniqueid, with a message."
    },
    "kickid_hltv": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Kick a player by userid or uniqueid, with a message."
    },
    "kill": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Kills the player with generic damage"
    },
    "killvector": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Kills a player applying force. Usage: killvector <player> <x value> <y value> <z value>"
    },
    "listRecentNPCSpeech": {
        "flags": [
            "gamedll",
            "dont_record"
        ],
        "help_text": "Displays a list of the last 5 lines of speech from NPCs."
    },
    "listdemo": {
        "help_text": "List demo file contents."
    },
    "listid": {
        "help_text": "Lists banned users."
    },
    "listip": {
        "help_text": "List IP addresses on the ban list."
    },
    "load": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Load Game"
    },
    "log": {
        "help_text": "Enables logging to file, console, and udp < on | off >."
    },
    "log_color": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Set the color of a logging channel."
    },
    "log_dumpchannels": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Dumps information about all logging channels."
    },
    "log_flags": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Set the flags on a logging channel."
    },
    "log_level": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Set the spew level of a logging channel."
    },
    "log_verbosity": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Set the verbosity of a logging channel."
    },
    "loop_dump": {
        "help_text": "Print the listeners of the current loop mode"
    },
    "lua_report_memory": {},
    "make_team_lose": {
        "help_text": "make_team_lose"
    },
    "malloc_stats_dump": {
        "help_text": "Dump malloc stats to stderr."
    },
    "map": {
        "flags": [
            "vconsole_fuzzy_matching",
            "vconsole_set_focus"
        ],
        "help_text": "map <mapname> :Load a new map."
    },
    "maps": {
        "help_text": "Displays list of maps."
    },
    "markup_group_ent_bbox": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "markup_group_ent_bbox <markup_group name> -> toggle ent_bbox for all members of the named markup group"
    },
    "markup_group_ent_text": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "markup_group_ent_text <markup_group name> -> toggle ent_text for all members of the named markup group"
    },
    "markup_group_spew": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Spew all current markup groups and their members"
    },
    "mat_clearshadercache": {
        "help_text": "Clears the shader cache used for dynamic shader compile."
    },
    "mat_disable_dynamic_shader_compile": {
        "help_text": "Reloads all shaders from vcs files until the next time mat_reloadshaders is called"
    },
    "mat_print_dead_materials": {
        "help_text": "Print loaded materials that have no valid layers due to not supporting any of the modes in gameinfo.gi."
    },
    "mat_print_error_materials": {
        "help_text": "Print loaded materials that are using the error shader or material."
    },
    "mat_print_expensive_materials": {
        "help_text": "Print materials sorted by cost heuristic"
    },
    "mat_print_material_info": {
        "help_text": "Print info about a specific material"
    },
    "mat_print_materials": {
        "help_text": "Print loaded materials. Takes an optional substring as an argument."
    },
    "mat_print_materials_last_frame": {
        "help_text": "Print materials used last frame"
    },
    "mat_print_materials_unused": {
        "help_text": "Print materials that have never been used"
    },
    "mat_print_modes": {
        "help_text": "Print supported rendering modes."
    },
    "mat_print_shader_info": {
        "help_text": "Print detailed info about a single shader. Takes a shader name (hero.vfx) as an argument."
    },
    "mat_print_shaders": {
        "help_text": "Print loaded shaders. Takes a substring as an argument."
    },
    "mat_print_textures": {
        "help_text": "Print loaded textures in alphabetical order. Takes an optional substring as an argument."
    },
    "mat_print_textures_size": {
        "help_text": "Print loaded textures in ascending size order. Takes an optional substring as an argument."
    },
    "mat_reinitmaterials": {
        "help_text": "Reinitializes all loaded materials, reloading their shaders."
    },
    "mat_reloadmaterials": {
        "help_text": "Reloads all materials. Takes an optional substring as an argument."
    },
    "mat_reloadshaders": {
        "help_text": "Reloads all shaders. Takes an optional substring as an argument."
    },
    "mat_reset_material_costs": {
        "help_text": "Reset material cost heuristic"
    },
    "mem_compact": {
        "help_text": "Compacts the heap"
    },
    "mem_dump": {
        "help_text": "Dump memory stats to text file."
    },
    "mem_incremental_compact": {
        "help_text": "Incrementally compacts the heap"
    },
    "mem_test": {},
    "memory": {
        "help_text": "Print memory stats."
    },
    "meta": {
        "help_text": "Metamod:Source control options"
    },
    "mix_input": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set an input mix value"
    },
    "model_dump_convert_info": {
        "flags": [
            "linked_concommand"
        ],
        "help_text": "Print model load-time conversion info"
    },
    "movie_fixwave": {
        "help_text": "Fixup corrupted .wav file if engine crashed during startmovie/endmovie, etc."
    },
    "mp_disable_autokick": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Prevents a userid from being auto-kicked"
    },
    "multvar": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Multiply specified convar value."
    },
    "nav_add_to_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Add current area to the selected set."
    },
    "nav_add_to_selected_set_by_id": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Add specified area id to the selected set."
    },
    "nav_analyze": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Re-analyze the current Navigation Mesh and save it to disk."
    },
    "nav_analyze_scripted": {
        "flags": [
            "gamedll",
            "hidden",
            "cheat"
        ],
        "help_text": "commandline hook to run a nav_analyze and then quit."
    },
    "nav_auto_build_area": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Build out high-precision areas around the edit cursor and create them."
    },
    "nav_avoid": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles the 'avoid this area when possible' flag used by the AI system."
    },
    "nav_begin_area": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Defines a corner of a new Area or Ladder. To complete the Area or Ladder, drag the opposite corner to the desired location and issue a 'nav_end_area' command."
    },
    "nav_begin_deselecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Start continuously removing from the selected set."
    },
    "nav_begin_drag_deselecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Start dragging a selection area."
    },
    "nav_begin_drag_selecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Start dragging a selection area."
    },
    "nav_begin_selecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Start continuously adding to the selected set."
    },
    "nav_begin_shift_xy": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Begin shifting the Selected Set."
    },
    "nav_build_ladder": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Attempts to build a nav ladder on the climbable surface under the cursor."
    },
    "nav_chop_selected": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Chops all selected areas into their component 1x1 areas"
    },
    "nav_clear_attribute": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Remove given nav attribute from all areas in the selected set."
    },
    "nav_clear_attributes": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Clear all nav attributes of selected area."
    },
    "nav_clear_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Clear the selected set."
    },
    "nav_clear_walkable_marks": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Erase any previously placed walkable positions."
    },
    "nav_connect": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "To connect two Areas, mark the first Area, highlight the second Area, then invoke the connect command. Note that this creates a ONE-WAY connection from the first to the second Area. To make a two-way connection, also connect the second area to the first."
    },
    "nav_corner_lower": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Lower the selected corner of the currently marked Area."
    },
    "nav_corner_place_on_ground": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Places the selected corner of the currently marked Area on the ground."
    },
    "nav_corner_raise": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Raise the selected corner of the currently marked Area."
    },
    "nav_corner_select": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Select a corner of the currently marked Area. Use multiple times to access all four corners."
    },
    "nav_crouch": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles the 'must crouch in this area' flag used by the AI system."
    },
    "nav_delete": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Deletes the currently highlighted Area."
    },
    "nav_delete_marked": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Deletes the currently marked Area (if any)."
    },
    "nav_disconnect": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "To disconnect two Areas, mark an Area, highlight a second Area, then invoke the disconnect command. This will remove all connections between the two Areas."
    },
    "nav_end_area": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Defines the second corner of a new Area or Ladder and creates it."
    },
    "nav_end_deselecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Stop continuously removing from the selected set."
    },
    "nav_end_drag_deselecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Stop dragging a selection area."
    },
    "nav_end_drag_selecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Stop dragging a selection area."
    },
    "nav_end_selecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Stop continuously adding to the selected set."
    },
    "nav_end_shift_xy": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Finish shifting the Selected Set."
    },
    "nav_flood_select": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Selects the current Area and all Areas connected to it, recursively. To clear a selection, use this command again."
    },
    "nav_generate": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Generate a Navigation Mesh for the current map and save it to disk."
    },
    "nav_generate_incremental": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Generate a Navigation Mesh for the current map and save it to disk."
    },
    "nav_jump": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles the 'traverse this area by jumping' flag used by the AI system."
    },
    "nav_ladder_flip": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Flips the selected ladder's direction."
    },
    "nav_load": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Loads the Navigation Mesh for the current map."
    },
    "nav_load_aaquad": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Loads the Navigation Mesh for the current map."
    },
    "nav_load_polyclip": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Loads the Navigation Mesh for the current map."
    },
    "nav_load_recast": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Loads the Navigation Mesh for the current map."
    },
    "nav_lower_drag_volume_max": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Lower the top of the drag select volume."
    },
    "nav_lower_drag_volume_min": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Lower the bottom of the drag select volume."
    },
    "nav_mark": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Marks the Area or Ladder under the cursor for manipulation by subsequent editing commands."
    },
    "nav_mark_attribute": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Set nav attribute for all areas in the selected set."
    },
    "nav_mark_walkable": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Mark the current location as a walkable position. These positions are used as seed locations when sampling the map to generate a Navigation Mesh."
    },
    "nav_merge": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "To merge two Areas into one, mark the first Area, highlight the second by pointing your cursor at it, and invoke the merge command."
    },
    "nav_merge_mesh": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Merges a saved selected set into the current mesh."
    },
    "nav_no_jump": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles the 'dont jump in this area' flag used by the AI system."
    },
    "nav_precise": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles the 'dont avoid obstacles' flag used by the AI system."
    },
    "nav_raise_drag_volume_max": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Raise the top of the drag select volume."
    },
    "nav_raise_drag_volume_min": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Raise the bottom of the drag select volume."
    },
    "nav_recall_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Re-selects the stored selected set."
    },
    "nav_remove_from_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Remove current area from the selected set."
    },
    "nav_save": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Saves the current Navigation Mesh to disk."
    },
    "nav_save_selected": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Writes the selected set to disk for merging into another mesh via nav_merge_mesh."
    },
    "nav_select_blocked_areas": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Adds all blocked areas to the selected set"
    },
    "nav_select_half_space": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Selects any areas that intersect the given half-space."
    },
    "nav_select_obstructed_areas": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Adds all obstructed areas to the selected set"
    },
    "nav_select_radius": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Adds all areas in a radius to the selection set"
    },
    "nav_select_stairs": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Adds all stairway areas to the selected set"
    },
    "nav_select_with_attribute": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Selects areas with the given attribute."
    },
    "nav_set_place_mode": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Sets the editor into or out of Place mode. Place mode allows labelling of Area with Place names."
    },
    "nav_shift": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shifts the selected areas by the specified amount"
    },
    "nav_simplify_selected": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Chops all selected areas into their component 1x1 areas and re-merges them together into larger areas"
    },
    "nav_splice": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "To splice, mark an area, highlight a second area, then invoke the splice command to create a new, connected area between them."
    },
    "nav_split": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "To split an Area into two, align the split line using your cursor and invoke the split command."
    },
    "nav_split_aa": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "To split an area into two, align the split line using your cursor and invoke the split command."
    },
    "nav_store_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Stores the current selected set for later retrieval."
    },
    "nav_strip": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Strips all Hiding Spots, Approach Points, and Encounter Spots from the current Area."
    },
    "nav_subdivide": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Subdivides all selected areas."
    },
    "nav_switch": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Switches to navmesh for the specified spawngroup"
    },
    "nav_test_level_hull": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Find entities that intrude into the nav mesh.  List those entities in console output, and display bounding boxes around them for a while."
    },
    "nav_test_test_ray_to_mesh": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Test CNavMesh::TestRayToMesh().  Args: nNumrays, flRayLength, flRadialOffset"
    },
    "nav_toggle_deselecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Start or stop continuously removing from the selected set."
    },
    "nav_toggle_in_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Remove current area from the selected set."
    },
    "nav_toggle_place_mode": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggle the editor into and out of Place mode. Place mode allows labelling of Area with Place names."
    },
    "nav_toggle_selected_set": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggles all areas into/out of the selected set."
    },
    "nav_toggle_selecting": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Start or stop continuously adding to the selected set."
    },
    "nav_unmark": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Clears the marked Area or Ladder."
    },
    "nav_use_place": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "If used without arguments, all available Places will be listed. If a Place argument is given, the current Place is set."
    },
    "nav_warp_to_mark": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Warps the player to the marked area."
    },
    "nav_world_center": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Centers the nav mesh in the world"
    },
    "nb_command": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Sends a command string to all bots"
    },
    "nb_debug": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Debug NextBots.  Categories are: BEHAVIOR, LOOK_AT, PATH, ANIMATION, LOCOMOTION, VISION, HEARING, EVENTS, ERRORS."
    },
    "nb_debug_filter": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Add items to the NextBot debug filter. Items can be entindexes or part of the identifier of one or more bots."
    },
    "nb_delete_all": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Delete all non-player NextBot entities.  Equivalent to script 'NextBotManager.DeleteAll(...)'"
    },
    "nb_dump_debug_history": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dumps debug history for the bot under the cursor to the blackbox"
    },
    "nb_force_look_at": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Force selected bot to look at the local player's position"
    },
    "nb_move_to_cursor": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Tell all NextBots to move to the cursor position"
    },
    "nb_select": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Select the bot you are aiming at for further debug operations."
    },
    "nb_warp_selected_here": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Teleport the selected bot to your cursor position"
    },
    "net_channels": {
        "help_text": "Shows net channel info"
    },
    "net_connections_stats": {
        "help_text": "Print detailed network statistics for each network connection"
    },
    "net_listallmessages": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all registered net messages"
    },
    "net_messageinfo": {
        "flags": [
            "cheat"
        ],
        "help_text": "Display info about a message (by classname or id)"
    },
    "net_serializedentitymemory": {
        "help_text": "Spew CSerializedEntity memory\n"
    },
    "net_spewcounts": {
        "help_text": "Spew serializer counts\n"
    },
    "net_stats_json": {
        "help_text": "Output server networking statistics in json format"
    },
    "net_status": {
        "help_text": "Shows current network status"
    },
    "net_validatemessages": {
        "flags": [
            "cheat"
        ],
        "help_text": "Activates/deactivates net message validation"
    },
    "nextdemo": {
        "help_text": "Play next demo in sequence."
    },
    "noclip": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Toggle. Player becomes non-solid and flies.  Optional argument of 0 or 1 to force enable/disable"
    },
    "notarget": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Toggle. Player becomes hidden to NPCs."
    },
    "npc_bipass": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the local movement attempts by the given NPC(s) (triangulation detours).  Failed bypass routes are displayed in red, successful bypasses are shown in green.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at."
    },
    "npc_combat": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays text debugging information about the squad and enemy of the selected NPC  (See Overlay Text)\n\tArguments:   \t{npc_name} / {npc class_name} / no argument picks what player is looking at"
    },
    "npc_conditions": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays all the current AI conditions that an NPC has in the overlay text.\n\tArguments:   \t{npc_name} / {npc class_name} / no argument picks what player is looking at"
    },
    "npc_destroy": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Removes the given NPC(s) from the universe\nArguments:   \t{npc_name} / {npc_class_name} / no argument picks what player is looking at"
    },
    "npc_enemies": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shows memory of NPC.  Draws an X on top of each memory.\n\tEluded entities drawn in blue (don't know where it went)\n\tUnreachable entities drawn in green (can't get to it)\n\tCurrent enemy drawn in red\n\tCurrent target entity drawn in magenta\n\tAll other entities drawn in pink\n\tArguments:   \t{npc_name} / {npc class_name} / no argument picks what player is looking at"
    },
    "npc_focus": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays red line to NPC's enemy (if has one) and blue line to NPC's target entity (if has one)\n\tArguments:   \t{npc_name} / {npc class_name} / no argument picks what player is looking at"
    },
    "npc_kill": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Kills the given NPC(s)\nArguments:   \t{npc_name} / {npc_class_name} / no argument picks what player is looking at"
    },
    "npc_nearest": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Draw's a while box around the NPC(s) nearest node\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at  "
    },
    "npc_relationships": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the relationships between this NPC and all others.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
    },
    "npc_route": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the current route of the given NPC as a line on the screen.  Waypoints along the route are drawn as small cyan rectangles.  Line is color coded in the following manner:\n\tBlue\t- path to a node\n\tCyan\t- detour around an object (triangulation)\n\tRed\t- jump\n\tMaroon - path to final target position\n\tArguments:   \t{npc_name} / {npc_class_name} / no argument picks what player is looking at "
    },
    "npc_select": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Select or deselects the given NPC(s) for later manipulation.  Selected NPC's are shown surrounded by a red translucent box\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "npc_squads": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Obsolete.  Replaced by npc_combat"
    },
    "npc_steering": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the steering obstructions of the NPC (used to perform local avoidance)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
    },
    "npc_task_text": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Outputs text debugging information to the console about the all the tasks + break conditions of the selected NPC current schedule\n\tArguments:   \t{npc_name} / {npc class_name} / no argument picks what player is looking at "
    },
    "npc_tasks": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays detailed text debugging information about the all the tasks of the selected NPC current schedule (See Overlay Text)\n\tArguments:   \t{npc_name} / {npc class_name} / no argument picks what player is looking at "
    },
    "npc_viewcone": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the viewcone of the NPC (where they are currently looking and what the extents of there vision is)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
    },
    "p2p_listpeers": {
        "help_text": "List currently known peers."
    },
    "particle_system_start": {
        "flags": [
            "gamedll"
        ],
        "help_text": "start the specified particle system"
    },
    "particle_system_stop": {
        "flags": [
            "gamedll"
        ],
        "help_text": "stop the specified particle system"
    },
    "particle_test_start": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Dispatches the test particle system with the parameters specified in particle_test_file,\n particle_test_attach_mode and particle_test_attach_param on the entity the player is looking at.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "particle_test_stop": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Stops all particle systems on the selected entities.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "particles_end_profile": {
        "help_text": "End profiling particle system performance"
    },
    "particles_start_profile": {
        "help_text": "Begin profiling particle system performance"
    },
    "path": {
        "help_text": "Show the filesystem path."
    },
    "pause": {
        "help_text": "Toggle the server pause state."
    },
    "phys_debug_draw": {
        "help_text": "Set up debug-draw of physics internal state"
    },
    "phys_dump_intersection_controller": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dump intersection controller status"
    },
    "phys_list": {
        "flags": [
            "gamedll"
        ],
        "help_text": "List all physics component contents of every entity in the game;\n    -allents: include non-physical entities\n    -classes: print class names\n    -sdk    : Rubikon build\n    -world  : current state of the world\n    -world -touch: list body pairs (bodies in contact)\n    -world -save <name>: save world to a file\n    -world -mem: memory dump\n    -world -snapshots: Start/Stop dumping snapshots of the world into the current directory\n    -world -profiletraces: ProfileRecordedTraces\n    -world -agg: current aggregate data registry (loaded resources)\n"
    },
    "phys_shoot": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shoots a phys object."
    },
    "phys_sleep": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Put all physics in all the worlds to sleep"
    },
    "phys_wakeup": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Wake all physics objects in the Main physics up"
    },
    "physics_debug_entity": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Dumps debug info for an entity"
    },
    "physics_highlight_active": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Turns on the absbox for all active physics objects.\n  0 : un-highlight.\n"
    },
    "physics_report_active": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Lists all active physics objects\n  -more : extra info\n"
    },
    "pixelvis_debug": {
        "flags": [
            "cheat"
        ],
        "help_text": "Dump debug info"
    },
    "play": {
        "flags": [
            "server_can_execute"
        ],
        "help_text": "Play a sound."
    },
    "playdemo": {
        "help_text": "Play a recorded demo file (.dem )."
    },
    "playsound": {
        "help_text": "playsound <soundname>"
    },
    "playvol": {
        "help_text": "Play a sound at a specified volume."
    },
    "pop_var_values": {
        "help_text": "Restore previously pushed convars and config values"
    },
    "progress_enable": {},
    "prop_debug": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggle prop debug mode. If on, props will show colorcoded bounding boxes. Red means ignore all damage. White means respond physically to damage but never break. Green maps health in the range of 100 down to 1."
    },
    "prop_dynamic_create": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Creates a dynamic prop with a specific .vmdl aimed away from where the player is looking.\n\tArguments: {.vmdl name}"
    },
    "prop_physics_create": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Creates a physics prop with a specific .vmdl aimed away from where the player is looking.\n\tArguments: {.vmdl name}"
    },
    "push_var_values": {
        "help_text": "Save convars and config values"
    },
    "quit": {
        "flags": [
            "vconsole_set_focus"
        ],
        "help_text": "Quit the game"
    },
    "r_camerapos": {
        "help_text": "Prints out the current camera position + orientation to the console"
    },
    "r_cubemap_takesnapshot": {
        "help_text": "Take a cube map snapshot at the current camera location"
    },
    "r_entpos": {
        "help_text": "Moves the camera position + orientation to the named entity"
    },
    "r_force_engine_render_frame": {
        "help_text": "Force a single render of the engine viewport."
    },
    "r_gpu_mem_stats": {
        "flags": [
            "linked_concommand"
        ],
        "help_text": "Display GPU memory usage."
    },
    "r_incrementlodscale": {
        "help_text": "Modifies the LOD scale"
    },
    "r_render_coordination_state": {
        "help_text": "Prints out the current render coordination state."
    },
    "r_setpos": {
        "help_text": "Moves the camera position + orientation to the specified position"
    },
    "r_textures_evict_all": {
        "flags": [
            "linked_concommand"
        ],
        "help_text": "Evict all resident texture."
    },
    "r_toggleviewportsize": {
        "help_text": "Toggles viewport size between small + full window."
    },
    "r_viewport": {
        "help_text": "Slams viewport size to a specified value."
    },
    "rangefinder": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Measures distance along a ray"
    },
    "ray_bench": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Load the rays and run the benchmark"
    },
    "record": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Record a demo."
    },
    "redirectend": {
        "flags": [
            "hidden"
        ],
        "help_text": "Redirect server console output"
    },
    "redirectstart": {
        "flags": [
            "hidden"
        ],
        "help_text": "Redirect server console output"
    },
    "reload": {
        "flags": [
            "cheat",
            "vconsole_set_focus"
        ],
        "help_text": "Reload the most recent saved game."
    },
    "removeid": {
        "help_text": "Remove a user ID from the ban list."
    },
    "removeip": {
        "help_text": "Remove an IP address from the ban list."
    },
    "report_soundpatch": {
        "flags": [
            "gamedll"
        ],
        "help_text": "reports sound patch count"
    },
    "reset_all": {},
    "reset_gameconvars": {
        "flags": [
            "cheat"
        ],
        "help_text": "Reset game convars to default values"
    },
    "resource_dump": {
        "help_text": "Dump known resources to console."
    },
    "resource_leaks": {
        "help_text": "resource_leaks <resource_name>: Show resource leaks for the named resource"
    },
    "respawn_entities": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Respawn all the entities in the map."
    },
    "respawn_player": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Respawns the player from death!\n"
    },
    "restart": {
        "flags": [
            "cheat",
            "vconsole_set_focus"
        ],
        "help_text": "Poor man's restart: reload the current map from disk."
    },
    "rr_forceconcept": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "fire a response concept directly at a given character.\nUSAGE: rr_forceconcept <target> <concept> \"criteria1:value1,criteria2:value2,...\"\ncriteria values are optional.\n"
    },
    "rr_reloadresponsesystems": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Reload all response system scripts. Note: This won't work unless you run with -rr_allow_reload."
    },
    "run_perftest": {
        "flags": [
            "cheat",
            "dont_record"
        ],
        "help_text": "Execute perftest.cfg"
    },
    "save": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Save Game"
    },
    "save_animgraph_recording": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Saves all active animgraph recordings to disk"
    },
    "say": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Display player message"
    },
    "say_team": {
        "flags": [
            "gamedll",
            "server_can_execute"
        ],
        "help_text": "Display player message to team"
    },
    "sc_dumpworld": {
        "flags": [
            "cheat"
        ],
        "help_text": "Dump a list of the objects in a sceneworld (Usage: sc_dumpworld <world_index>)"
    },
    "sc_dumpworld3d": {
        "flags": [
            "cheat"
        ],
        "help_text": "Dump the objects in a sceneworld into a 3d geoview buffer (Usage: sc_dumpworld3d <world_index>)"
    },
    "sc_list_extradata_allocations": {
        "help_text": "Prints out the overall extra data allocation counts"
    },
    "sc_listworlds": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all the active sceneworlds"
    },
    "sc_optimizepartitions": {
        "help_text": "Optimize the partition assignment of objects based on the next frame's render"
    },
    "sc_setclassflags": {
        "flags": [
            "cheat"
        ],
        "help_text": "Low level command to set the flags byte associated with an object class. sc_SetClassFlags <classname> <value>\n"
    },
    "sc_setfloatattr": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set a float attribute which will be visible to all rendering (Usage: sc_setfloatattr <attrname> <value>)"
    },
    "sc_setintattr": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set an integer attribute which will be visible to all rendering (Usage: sc_setintattr <attrname> <value>)"
    },
    "sc_showclasses": {
        "flags": [
            "cheat"
        ],
        "help_text": "List the object class names known by scenesystem\n"
    },
    "scene_flush": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Flush all .vcds from the cache and reload from disk."
    },
    "scene_playvcd": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Play the given VCD as an instanced scripted scene."
    },
    "screenshot": {
        "help_text": "Take a screenshot: screenshot [filename]"
    },
    "script": {
        "help_text": "Run the text as a script"
    },
    "script_add_debug_filter": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Add a filter to the game debug overlay"
    },
    "script_add_watch": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Add a watch to the game debug overlay"
    },
    "script_add_watch_pattern": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Add a watch to the game debug overlay"
    },
    "script_attach_debugger": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Connect the vscript VM to the script debugger"
    },
    "script_clear_watches": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Clear all watches from the game debug overlay"
    },
    "script_debug": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Toggle the in-game script debug features"
    },
    "script_dump_all": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Dump the state of the VM to the console"
    },
    "script_execute": {},
    "script_find": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Find a key in the VM "
    },
    "script_help": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Output help for script functions"
    },
    "script_help2": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Output help for script functions suitable for auto-completion"
    },
    "script_reload": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Reload scripts"
    },
    "script_reload_code": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Execute a vscript file, replacing existing functions with the functions in the run script"
    },
    "script_reload_entity_code": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Execute all of this entity's VScripts, replacing existing functions with the functions in the run scripts"
    },
    "script_remove_debug_filter": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Remove a filter from the game debug overlay"
    },
    "script_remove_watch": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Remove a watch from the game debug overlay"
    },
    "script_remove_watch_pattern": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Remove a watch from the game debug overlay"
    },
    "script_resurrect_unreachable": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Use the garbage collector to track down reference cycles"
    },
    "script_trace_disable": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Turn off a particular trace output by file or function name"
    },
    "script_trace_disable_all": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Turn off all trace output"
    },
    "script_trace_disable_key": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Turn off a particular trace output by table/instance"
    },
    "script_trace_enable": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Turn on a particular trace output by file or function name"
    },
    "script_trace_enable_all": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Turn on all trace output"
    },
    "script_trace_enable_key": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Turn on a particular trace output by table/instance"
    },
    "sdr": {
        "help_text": "SteamDatagram Network Configuration"
    },
    "server_game_time": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Gives the game time in seconds (server's curtime)"
    },
    "server_gc_status": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Check status of connection to the GC"
    },
    "set_blocked_hero": {
        "help_text": "set_blocked_hero <short hero entity name> [short hero entity name] ..."
    },
    "set_custom_difficulty": {},
    "set_custom_game_auto_created_lobby": {},
    "set_custom_game_crc": {},
    "set_custom_game_id": {},
    "set_custom_game_mode": {},
    "set_custom_game_timestamp": {},
    "set_custom_game_uses_account_records": {},
    "set_custom_map_name": {},
    "set_custom_max_players": {},
    "set_custom_min_players": {},
    "set_forced_hero": {
        "help_text": "set_forced_hero <hero entity name>"
    },
    "set_game_mode": {
        "help_text": "set_game_mode <mode>"
    },
    "set_match_id": {
        "help_text": "set_match_id <id>"
    },
    "set_match_type": {
        "help_text": "set_match_type <type>"
    },
    "set_no_bottle": {},
    "set_no_neutrals": {},
    "set_no_runes": {},
    "set_series_data": {
        "help_text": "set_series_data <bo3|bo5> <radiantWins> <direWins>"
    },
    "setang": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Snap player eyes to specified pitch yaw <roll:optional> (must have sv_cheats)."
    },
    "setang_exact": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Snap player eyes and orientation to specified pitch yaw <roll:optional> (must have sv_cheats)."
    },
    "setinfo": {
        "flags": [
            "clientcmd_can_execute"
        ],
        "help_text": "Adds a new user info value"
    },
    "setmodel": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Changes's player's model"
    },
    "setpause": {
        "help_text": "Set the pause state of the server."
    },
    "setpos": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Move player to specified origin (must have sv_cheats)."
    },
    "setpos_exact": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Move player to an exact specified origin (must have sv_cheats)."
    },
    "setpos_player": {
        "flags": [
            "gamedll",
            "cheat",
            "server_can_execute"
        ],
        "help_text": "Move specified player to specified origin (must have sv_cheats)."
    },
    "shake": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Shake the screen."
    },
    "shatterglass_break": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "shatterglass_restore": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "shootbullet": {
        "flags": [
            "gamedll",
            "cheat"
        ]
    },
    "showconsole": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Show the console."
    },
    "showmainmenu": {},
    "showtriggers_toggle": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Displays the movement bounding box for the triggers in orange.  Some entites will also display entity specific overlays.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
    },
    "snd_async_flush": {
        "help_text": "Flush all unlocked async audio data"
    },
    "snd_async_showmem": {
        "help_text": "Show async memory stats"
    },
    "snd_async_showmem_music": {
        "help_text": "Show async memory stats for just non-streamed music"
    },
    "snd_async_showmem_summary": {
        "help_text": "Show brief async memory stats"
    },
    "snd_compare_soundevents": {
        "flags": [
            "cheat"
        ],
        "help_text": "Compare the compiled and loaded contents of 2 soundevents."
    },
    "snd_dump_filepaths": {},
    "snd_front_headphone_position": {
        "help_text": "Specifies the position (in degrees) of the virtual front left/right headphones."
    },
    "snd_front_stereo_speaker_position": {
        "help_text": "Specifies the position (in degrees) of the virtual front left/right speakers."
    },
    "snd_front_surround_speaker_position": {
        "help_text": "Specifies the position (in degrees) of the virtual front left/right speakers."
    },
    "snd_headphone_pan_exponent": {
        "help_text": "Specifies the exponent for the pan xfade from phone to phone if the \"exp\" pan law is being used."
    },
    "snd_headphone_pan_radial_weight": {
        "help_text": "Apply cos(angle) * weight before pan law"
    },
    "snd_list_soundevents": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all available soundevents"
    },
    "snd_list_soundevents_by_stack": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all available soundevents using specified stack name"
    },
    "snd_print_arrangements": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all available sequence arrangments"
    },
    "snd_print_current_mixer_mixgroup": {
        "help_text": "Get data related to mix group matching string"
    },
    "snd_print_samplers": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all available samplers"
    },
    "snd_print_sequences": {
        "flags": [
            "cheat"
        ],
        "help_text": "List all available midi sequences"
    },
    "snd_rear_headphone_position": {
        "help_text": "Specifies the position  (in degrees) of the virtual rear left/right headphones."
    },
    "snd_rear_stereo_speaker_position": {
        "help_text": "Specifies the position (in degrees) of the virtual rear left/right speakers."
    },
    "snd_rear_surround_speaker_position": {
        "help_text": "Specifies the position (in degrees) of the virtual rear left/right speakers."
    },
    "snd_remove_all_soundevents": {
        "flags": [
            "cheat"
        ],
        "help_text": "Remove all soundevents"
    },
    "snd_remove_soundevent": {
        "flags": [
            "cheat"
        ],
        "help_text": "Remove the specified soundevent"
    },
    "snd_samplers_play_note": {
        "flags": [
            "cheat"
        ],
        "help_text": "Play a note from a specified sampler"
    },
    "snd_samplers_stop_note": {
        "flags": [
            "cheat"
        ],
        "help_text": "Stop a note from a specified sampler"
    },
    "snd_sequence_set_track_bpm": {
        "flags": [
            "cheat"
        ],
        "help_text": "Sets the tempo of the specified track"
    },
    "snd_sequence_set_track_transpose": {
        "flags": [
            "cheat"
        ],
        "help_text": "Sets the transposition of the specified track"
    },
    "snd_sequence_start": {
        "flags": [
            "cheat"
        ],
        "help_text": "Start the specified sequence"
    },
    "snd_sequence_stop_track": {
        "flags": [
            "cheat"
        ],
        "help_text": "Stops the specified track"
    },
    "snd_setmixer": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set named Mixgroup of current mixer to mix vol, mute, solo."
    },
    "snd_setmixlayer": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set named Mixgroup of named mix layer to mix vol, mute, solo."
    },
    "snd_sos_flush_operators": {
        "flags": [
            "cheat"
        ],
        "help_text": "Flush and re-parse the sound operator system"
    },
    "snd_sos_get_operator_field_info": {
        "flags": [
            "cheat"
        ],
        "help_text": "Currently gets info for a single operator field"
    },
    "snd_sos_print_class_sizes": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints the sizes of relevant sos classes."
    },
    "snd_sos_print_groups": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints the current state of the groups system"
    },
    "snd_sos_print_operator_stack": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints a master list of currently exposed variables"
    },
    "snd_sos_print_operators": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints a list of currently available operators"
    },
    "snd_sos_print_stack_exec_list": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints the current stack execution list"
    },
    "snd_sos_print_stack_list": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints a list of currently available stacks"
    },
    "snd_sos_print_strings": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints a list of currently cached strings"
    },
    "snd_sos_print_tool_properties": {
        "flags": [
            "cheat"
        ],
        "help_text": "Prints the current state of tool properties."
    },
    "snd_sos_resolve_execute_operator": {
        "flags": [
            "cheat"
        ],
        "help_text": "Resolve the inputs and execute one specified operator from a specified stack"
    },
    "snd_sos_set_operator_field": {
        "flags": [
            "cheat"
        ],
        "help_text": "Currently sets a single float operator field"
    },
    "snd_sos_set_operator_field_by_guid": {
        "flags": [
            "cheat"
        ],
        "help_text": "Currently sets a single float operator field"
    },
    "snd_sos_start_soundevent": {
        "flags": [
            "cheat"
        ],
        "help_text": "Starts a specified soundevent"
    },
    "snd_sos_stop_all_soundevents": {
        "flags": [
            "cheat"
        ],
        "help_text": "Stops all soundevents currently on the execution list"
    },
    "snd_sos_stop_soundevent_guid": {
        "flags": [
            "cheat"
        ],
        "help_text": "Stops a specified soundevent"
    },
    "snd_sos_stop_soundevent_index": {
        "flags": [
            "cheat"
        ],
        "help_text": "Stops a specified soundevent"
    },
    "snd_sos_sv_soundevent_pause_last": {
        "help_text": "Test"
    },
    "snd_sos_sv_soundevent_start": {
        "help_text": "Test"
    },
    "snd_sos_sv_soundevent_stop_last": {
        "help_text": "Test"
    },
    "snd_sos_sv_soundevent_unpause_last": {
        "help_text": "Test"
    },
    "snd_sos_sv_test_gender": {
        "help_text": "Test"
    },
    "snd_sos_test_soundmessage": {
        "flags": [
            "cheat"
        ],
        "help_text": "test"
    },
    "snd_soundmixer_flush": {
        "help_text": "Reload soundmixers.txt file."
    },
    "snd_soundmixer_list_mix_groups": {
        "help_text": "List all mix groups to dev console."
    },
    "snd_soundmixer_list_mix_layers": {
        "help_text": "List all mix layers to dev console."
    },
    "snd_soundmixer_list_mixers": {
        "help_text": "List all mixers to dev console."
    },
    "snd_soundmixer_set_trigger_factor": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set named mix layer / mix group, trigger amount."
    },
    "snd_soundmixer_setmixlayer_amount": {
        "flags": [
            "cheat"
        ],
        "help_text": "Set named mix layer mix amount."
    },
    "snd_stereo_speaker_pan_exponent": {
        "help_text": "Specifies the exponent for the pan xfade from speaker to speaker if the \"exp\" pan law is being used."
    },
    "snd_stereo_speaker_pan_radial_weight": {
        "help_text": "Apply cos(angle) * weight before pan law"
    },
    "snd_surround_speaker_pan_exponent": {
        "help_text": "Specifies the exponent for the pan xfade from speaker to speaker if the \"exp\" pan law is being used."
    },
    "snd_surround_speaker_pan_radial_weight": {
        "help_text": "Apply cos(angle) * weight before pan law"
    },
    "sndplaydelay": {},
    "soundinfo": {
        "help_text": "Describe the current sound device."
    },
    "soundlist": {
        "help_text": "List all known sounds."
    },
    "soundscape_flush": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Flushes the server & client side soundscapes"
    },
    "spawn_group_activate": {
        "help_text": "Activate specified spawngroup."
    },
    "spawn_group_list": {
        "help_text": "List all spawn groups"
    },
    "spawn_group_load": {
        "help_text": "Load named spawn group."
    },
    "spawn_group_unload": {
        "help_text": "Unload named spawn group."
    },
    "spew_fonts": {
        "help_text": "Spew information about font manager fonts"
    },
    "ss_add": {
        "help_text": "Adds a splitscreen user."
    },
    "ss_remove": {
        "help_text": "Removes a splitscreen user."
    },
    "startdemos": {
        "help_text": "Play demos in demo sequence."
    },
    "startmovie": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Start recording movie frames."
    },
    "stats": {
        "help_text": "Prints server performance variables"
    },
    "stats_print": {
        "help_text": "Prints out perf statistics to the console, clears perf history"
    },
    "status": {
        "help_text": "Print connection status"
    },
    "stop": {
        "help_text": "Finish recording demo."
    },
    "stopdemos": {
        "help_text": "Stop looping demos (current demo will complete)."
    },
    "stopsound": {
        "flags": [
            "cheat"
        ]
    },
    "surfaceprop": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Reports the surface properties at the cursor"
    },
    "sv_clearhinthistory": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Clear memory of server side hints displayed to the player."
    },
    "sv_decal_clear_all_entities": {
        "help_text": "Clears decals from all entities"
    },
    "sv_decal_clear_from_entity": {
        "help_text": "Clears decals from the targetted entity"
    },
    "sv_decal_clear_world": {
        "help_text": "Clears world decals"
    },
    "sv_decal_debug": {
        "help_text": "Toggles server decal debug visualization"
    },
    "sv_decal_shoot": {
        "help_text": "Shoots a server-side decal"
    },
    "sv_dota_custom_game_cache_test_download": {
        "flags": [
            "gamedll"
        ],
        "help_text": "<custom game ID> [<expected_timestamp>].  Test code to cache UGC to dedicated server"
    },
    "sv_dota_dump_econ_item_stringtable": {
        "flags": [
            "gamedll"
        ],
        "help_text": "sv_dota_dump_econ_item_stringtable"
    },
    "sv_dota_dump_modifier_stringtable": {
        "flags": [
            "gamedll"
        ],
        "help_text": "sv_dota_dump_modifier_stringtable"
    },
    "sv_fullupdate": {
        "help_text": "Force a full update for all clients."
    },
    "sv_packstats": {
        "flags": [
            "release"
        ],
        "help_text": "Show entity packing stats, pass 'clear' as argument to reset counts."
    },
    "sv_printdecalinfo": {
        "help_text": "(server) Prints info about decals currently in the scene"
    },
    "sv_pure": {
        "help_text": "Show user data."
    },
    "sv_querycache_stats": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Display status of the query cache (client only)"
    },
    "sv_save_session_persisters": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Saves session persister data immediately."
    },
    "sv_showtags": {
        "help_text": "Describe current gametags."
    },
    "sv_shutdown": {
        "help_text": "Sets the server to shutdown when all games have completed"
    },
    "sv_soundemitter_reload": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Flushes the sounds.txt system"
    },
    "sv_soundscape_printdebuginfo": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "print soundscapes"
    },
    "sys_info": {
        "help_text": "Print system information to the console"
    },
    "test_compendium_endgame_stats": {
        "flags": [
            "gamedll"
        ],
        "help_text": "test_compendium_endgame_stats"
    },
    "test_compendium_stats": {
        "flags": [
            "gamedll"
        ],
        "help_text": "test_compendium_stats"
    },
    "test_dispatcheffect": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Test a clientside dispatch effect.\n\tUsage: test_dispatcheffect <effect name> <distance away> <flags> <magnitude> <scale>\n\tDefaults are: <distance 1024> <flags 0> <magnitude 0> <scale 0>\n"
    },
    "test_entity_blocker": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "Test command that drops an entity blocker out in front of the player."
    },
    "timedemo": {
        "help_text": "Play a demo and report performance info."
    },
    "timedemo_vprofrecord": {
        "help_text": "Play a demo and report performance info.  Also record vprof data for the span of the demo"
    },
    "timedemoquit": {
        "help_text": "Play a demo, report performance info, and then exit"
    },
    "toggle": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Toggles specified convar value on and off."
    },
    "toggleconsole": {
        "flags": [
            "dont_record"
        ],
        "help_text": "Show/hide the console."
    },
    "tutorial_cleanup_post": {
        "flags": [
            "gamedll"
        ]
    },
    "tutorial_experience_closed": {
        "flags": [
            "gamedll"
        ]
    },
    "tutorial_speech_end": {
        "flags": [
            "gamedll"
        ]
    },
    "tutorial_start_lesson": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Jump to the passed tutorial lesson"
    },
    "tutorial_testui": {
        "flags": [
            "gamedll"
        ]
    },
    "tutorial_tip_dismissed": {
        "flags": [
            "gamedll"
        ]
    },
    "tv_clients": {
        "help_text": "Shows list of connected SourceTV clients."
    },
    "tv_msg": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Send a screen message to all clients."
    },
    "tv_record": {
        "help_text": "Starts SourceTV demo recording."
    },
    "tv_relay": {
        "help_text": "Connect to SourceTV server and relay broadcast."
    },
    "tv_retry": {
        "help_text": "Reconnects the SourceTV relay proxy."
    },
    "tv_status": {
        "help_text": "Show SourceTV server status."
    },
    "tv_stop": {
        "help_text": "Stops the SourceTV broadcast."
    },
    "tv_stoprecord": {
        "help_text": "Stops SourceTV demo recording."
    },
    "unbind": {
        "flags": [
            "release"
        ],
        "help_text": "Unbind a key."
    },
    "unbindall": {
        "flags": [
            "release"
        ],
        "help_text": "Unbind all keys."
    },
    "unpause": {
        "help_text": "Clear the pause state of the server."
    },
    "use": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Use a particular weapon\t\nArguments: <weapon_name>"
    },
    "users": {
        "help_text": "Show user info for players on server."
    },
    "vehicle_flushscript": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Flush and reload all vehicle scripts"
    },
    "vgui_dump_panels": {
        "help_text": "vgui_dump_panels [visible]"
    },
    "vgui_togglepanel": {
        "help_text": "show/hide vgui panel by name."
    },
    "vis_debug_currentcluster": {
        "help_text": "Show the current cluster number"
    },
    "vis_debug_drawcluster": {
        "help_text": "Add cluster # to visualization, (-1) to clear"
    },
    "vis_debug_dumpvisibleclusters": {
        "help_text": "Show the list of visible clusters"
    },
    "vis_debug_find_los": {
        "help_text": "Find or clear the vis LOS to here"
    },
    "vis_debug_lock": {
        "help_text": "Lock vis LOS origin to current"
    },
    "vis_debug_outside": {
        "help_text": "Show outside space vis volumes"
    },
    "vis_debug_record_start": {
        "help_text": "Record a path to debug vis"
    },
    "vis_debug_record_stop": {
        "help_text": "Record a path to debug vis"
    },
    "vis_debug_show": {
        "help_text": "Show/hide the vis debug visualization"
    },
    "vis_debug_tracelos": {
        "help_text": "Trace rays and check vis from the current camera"
    },
    "vprof_dump_counters": {
        "help_text": "Dump vprof counters to the console"
    },
    "vprof_generate_report": {
        "help_text": "Generate a report to the console."
    },
    "vprof_generate_report_budget": {
        "help_text": "Generate a report to the console based on budget group."
    },
    "vprof_generate_report_hierarchy": {
        "help_text": "Generate a report to the console."
    },
    "vprof_off": {
        "help_text": "Disable vprof"
    },
    "vprof_on": {
        "help_text": "Enable vprof"
    },
    "vprof_remote_start": {
        "help_text": "Request a VProf data stream from the remote server (requires authentication)"
    },
    "vprof_remote_stop": {
        "help_text": "Stop an existing remote VProf data request"
    },
    "vprof_reset": {
        "help_text": "Reset the stats in VProf profiler"
    },
    "vprof_reset_peaks": {
        "help_text": "Reset just the peak time in VProf profiler"
    },
    "vr_swap_logical_hands": {
        "flags": [
            "gamedll"
        ],
        "help_text": "Swaps which hand is considered 'primary' and 'secondary' (ie. dominant/off-hand)"
    },
    "vr_vrfly_does_noclip": {
        "flags": [
            "gamedll",
            "cheat"
        ],
        "help_text": "VRFly also is noclip"
    },
    "vtune": {
        "help_text": "Controls VTune's sampling."
    },
    "world_dump_loaded_worlds": {
        "help_text": "Dump all of the worlds that we know about"
    },
    "world_layer_list": {
        "help_text": "List all world layers"
    },
    "world_layer_set_visible": {
        "help_text": "Show or hide the specified world layer"
    },
    "writeid": {
        "help_text": "Writes a list of permanently-banned user IDs to banned_user.cfg."
    },
    "writeip": {
        "help_text": "Save the ban list to banned_ip.cfg."
    },
    "writekeybindings": {
        "flags": [
            "release"
        ],
        "help_text": "Saves current key bindings to disk."
    }
}